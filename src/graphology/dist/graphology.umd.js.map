{"version":3,"file":"graphology.umd.js","sources":["../src/utils.js","../../../node_modules/events/events.js","../../../node_modules/obliterator/iterator.js","../../../node_modules/obliterator/support.js","../../../node_modules/obliterator/iter.js","../../../node_modules/obliterator/take.js","../src/errors.js","../src/data.js","../src/attributes/nodes.js","../src/attributes/edges.js","../../../node_modules/obliterator/chain.js","../src/iteration/edges.js","../src/iteration/neighbors.js","../src/iteration/adjacency.js","../src/serialization.js","../src/graph.js","../src/classes.js","../src/endpoint.cjs.js"],"sourcesContent":["/**\n * Graphology Utilities\n * =====================\n *\n * Collection of helpful functions used by the implementation.\n */\n\n/**\n * Object.assign-like polyfill.\n *\n * @param  {object} target       - First object.\n * @param  {object} [...objects] - Objects to merge.\n * @return {object}\n */\nfunction assignPolyfill() {\n  const target = arguments[0];\n\n  for (let i = 1, l = arguments.length; i < l; i++) {\n    if (!arguments[i]) continue;\n\n    for (const k in arguments[i]) target[k] = arguments[i][k];\n  }\n\n  return target;\n}\n\nlet assign = assignPolyfill;\n\nif (typeof Object.assign === 'function') assign = Object.assign;\n\nexport {assign};\n\n/**\n * Function returning the first matching edge for given path.\n * Note: this function does not check the existence of source & target. This\n * must be performed by the caller.\n *\n * @param  {Graph}  graph  - Target graph.\n * @param  {any}    source - Source node.\n * @param  {any}    target - Target node.\n * @param  {string} type   - Type of the edge (mixed, directed or undirected).\n * @return {string|null}\n */\nexport function getMatchingEdge(graph, source, target, type) {\n  const sourceData = graph._nodes.get(source);\n\n  let edge = null;\n\n  if (!sourceData) return edge;\n\n  if (type === 'mixed') {\n    edge =\n      (sourceData.out && sourceData.out[target]) ||\n      (sourceData.undirected && sourceData.undirected[target]);\n  } else if (type === 'directed') {\n    edge = sourceData.out && sourceData.out[target];\n  } else {\n    edge = sourceData.undirected && sourceData.undirected[target];\n  }\n\n  return edge;\n}\n\n/**\n * Checks whether the given value is a plain object.\n *\n * @param  {mixed}   value - Target value.\n * @return {boolean}\n */\nexport function isPlainObject(value) {\n  return (\n    typeof value === 'object' && value !== null && value.constructor === Object\n  );\n}\n\n/**\n * Checks whether the given object is empty.\n *\n * @param  {object}  o - Target Object.\n * @return {boolean}\n */\nexport function isEmpty(o) {\n  let k;\n\n  for (k in o) return false;\n\n  return true;\n}\n\n/**\n * Creates a \"private\" property for the given member name by concealing it\n * using the `enumerable` option.\n *\n * @param {object} target - Target object.\n * @param {string} name   - Member name.\n */\nexport function privateProperty(target, name, value) {\n  Object.defineProperty(target, name, {\n    enumerable: false,\n    configurable: false,\n    writable: true,\n    value\n  });\n}\n\n/**\n * Creates a read-only property for the given member name & the given getter.\n *\n * @param {object}   target - Target object.\n * @param {string}   name   - Member name.\n * @param {mixed}    value  - The attached getter or fixed value.\n */\nexport function readOnlyProperty(target, name, value) {\n  const descriptor = {\n    enumerable: true,\n    configurable: true\n  };\n\n  if (typeof value === 'function') {\n    descriptor.get = value;\n  } else {\n    descriptor.value = value;\n    descriptor.writable = false;\n  }\n\n  Object.defineProperty(target, name, descriptor);\n}\n\n/**\n * Returns whether the given object constitute valid hints.\n *\n * @param {object} hints - Target object.\n */\nexport function validateHints(hints) {\n  if (!isPlainObject(hints)) return false;\n\n  if (hints.attributes && !Array.isArray(hints.attributes)) return false;\n\n  return true;\n}\n\n/**\n * Creates a function generating incremental ids for edges.\n *\n * @return {function}\n */\nexport function incrementalIdStartingFromRandomByte() {\n  let i = Math.floor(Math.random() * 256) & 0xff;\n\n  return () => {\n    return i++;\n  };\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/**\n * Obliterator Iterator Class\n * ===========================\n *\n * Simple class representing the library's iterators.\n */\n\n/**\n * Iterator class.\n *\n * @constructor\n * @param {function} next - Next function.\n */\nfunction Iterator(next) {\n  if (typeof next !== 'function')\n    throw new Error('obliterator/iterator: expecting a function!');\n\n  this.next = next;\n}\n\n/**\n * If symbols are supported, we add `next` to `Symbol.iterator`.\n */\nif (typeof Symbol !== 'undefined')\n  Iterator.prototype[Symbol.iterator] = function () {\n    return this;\n  };\n\n/**\n * Returning an iterator of the given values.\n *\n * @param  {any...} values - Values.\n * @return {Iterator}\n */\nIterator.of = function () {\n  var args = arguments,\n    l = args.length,\n    i = 0;\n\n  return new Iterator(function () {\n    if (i >= l) return {done: true};\n\n    return {done: false, value: args[i++]};\n  });\n};\n\n/**\n * Returning an empty iterator.\n *\n * @return {Iterator}\n */\nIterator.empty = function () {\n  var iterator = new Iterator(function () {\n    return {done: true};\n  });\n\n  return iterator;\n};\n\n/**\n * Returning an iterator over the given indexed sequence.\n *\n * @param  {string|Array} sequence - Target sequence.\n * @return {Iterator}\n */\nIterator.fromSequence = function (sequence) {\n  var i = 0,\n    l = sequence.length;\n\n  return new Iterator(function () {\n    if (i >= l) return {done: true};\n\n    return {done: false, value: sequence[i++]};\n  });\n};\n\n/**\n * Returning whether the given value is an iterator.\n *\n * @param  {any} value - Value.\n * @return {boolean}\n */\nIterator.is = function (value) {\n  if (value instanceof Iterator) return true;\n\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.next === 'function'\n  );\n};\n\n/**\n * Exporting.\n */\nmodule.exports = Iterator;\n","exports.ARRAY_BUFFER_SUPPORT = typeof ArrayBuffer !== 'undefined';\nexports.SYMBOL_SUPPORT = typeof Symbol !== 'undefined';\n","/**\n * Obliterator Iter Function\n * ==========================\n *\n * Function coercing values to an iterator. It can be quite useful when needing\n * to handle iterables and iterators the same way.\n */\nvar Iterator = require('./iterator.js');\nvar support = require('./support.js');\n\nvar ARRAY_BUFFER_SUPPORT = support.ARRAY_BUFFER_SUPPORT;\nvar SYMBOL_SUPPORT = support.SYMBOL_SUPPORT;\n\nfunction iterOrNull(target) {\n  // Indexed sequence\n  if (\n    typeof target === 'string' ||\n    Array.isArray(target) ||\n    (ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(target))\n  )\n    return Iterator.fromSequence(target);\n\n  // Invalid value\n  if (typeof target !== 'object' || target === null) return null;\n\n  // Iterable\n  if (SYMBOL_SUPPORT && typeof target[Symbol.iterator] === 'function')\n    return target[Symbol.iterator]();\n\n  // Iterator duck-typing\n  if (typeof target.next === 'function') return target;\n\n  // Invalid object\n  return null;\n}\n\nmodule.exports = function iter(target) {\n  var iterator = iterOrNull(target);\n\n  if (!iterator)\n    throw new Error(\n      'obliterator: target is not iterable nor a valid iterator.'\n    );\n\n  return iterator;\n};\n","/* eslint no-constant-condition: 0 */\n/**\n * Obliterator Take Function\n * ==========================\n *\n * Function taking n or every value of the given iterator and returns them\n * into an array.\n */\nvar iter = require('./iter.js');\n\n/**\n * Take.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @param  {number}   [n]      - Optional number of items to take.\n * @return {array}\n */\nmodule.exports = function take(iterable, n) {\n  var l = arguments.length > 1 ? n : Infinity,\n    array = l !== Infinity ? new Array(l) : [],\n    step,\n    i = 0;\n\n  var iterator = iter(iterable);\n\n  while (true) {\n    if (i === l) return array;\n\n    step = iterator.next();\n\n    if (step.done) {\n      if (i !== n) array.length = i;\n\n      return array;\n    }\n\n    array[i++] = step.value;\n  }\n};\n","/**\n * Graphology Custom Errors\n * =========================\n *\n * Defining custom errors for ease of use & easy unit tests across\n * implementations (normalized typology rather than relying on error\n * messages to check whether the correct error was found).\n */\nexport class GraphError extends Error {\n  constructor(message) {\n    super();\n    this.name = 'GraphError';\n    this.message = message;\n  }\n}\n\nexport class InvalidArgumentsGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'InvalidArgumentsGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(\n        this,\n        InvalidArgumentsGraphError.prototype.constructor\n      );\n  }\n}\n\nexport class NotFoundGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'NotFoundGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(this, NotFoundGraphError.prototype.constructor);\n  }\n}\n\nexport class UsageGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'UsageGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(this, UsageGraphError.prototype.constructor);\n  }\n}\n","/**\n * Graphology Internal Data Classes\n * =================================\n *\n * Internal classes hopefully reduced to structs by engines & storing\n * necessary information for nodes & edges.\n *\n * Note that those classes don't rely on the `class` keyword to avoid some\n * cruft introduced by most of ES2015 transpilers.\n */\n\n/**\n * MixedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function MixedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nMixedNodeData.prototype.clear = function () {\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n  this.undirectedDegree = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n  this.undirected = {};\n};\n\n/**\n * DirectedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function DirectedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nDirectedNodeData.prototype.clear = function () {\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n};\n\n/**\n * UndirectedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function UndirectedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nUndirectedNodeData.prototype.clear = function () {\n  // Degrees\n  this.undirectedDegree = 0;\n\n  // Indices\n  this.undirected = {};\n};\n\n/**\n * EdgeData class.\n *\n * @constructor\n * @param {boolean} undirected   - Whether the edge is undirected.\n * @param {string}  string       - The edge's key.\n * @param {string}  source       - Source of the edge.\n * @param {string}  target       - Target of the edge.\n * @param {object}  attributes   - Edge's attributes.\n */\nexport function EdgeData(undirected, key, source, target, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n  this.undirected = undirected;\n\n  // Extremities\n  this.source = source;\n  this.target = target;\n}\n\nEdgeData.prototype.attach = function () {\n  let outKey = 'out';\n  let inKey = 'in';\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  const source = this.source.key;\n  const target = this.target.key;\n\n  // Handling source\n  this.source[outKey][target] = this;\n\n  if (this.undirected && source === target) return;\n\n  // Handling target\n  this.target[inKey][source] = this;\n};\n\nEdgeData.prototype.attachMulti = function () {\n  let outKey = 'out';\n  let inKey = 'in';\n\n  const source = this.source.key;\n  const target = this.target.key;\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  // Handling source\n  const adj = this.source[outKey];\n  const head = adj[target];\n\n  if (typeof head === 'undefined') {\n    adj[target] = this;\n\n    // Self-loop optimization\n    if (!(this.undirected && source === target)) {\n      // Handling target\n      this.target[inKey][source] = this;\n    }\n\n    return;\n  }\n\n  // Prepending to doubly-linked list\n  head.previous = this;\n  this.next = head;\n\n  // Pointing to new head\n  // NOTE: use mutating swap later to avoid lookup?\n  adj[target] = this;\n  this.target[inKey][source] = this;\n};\n\nEdgeData.prototype.detach = function () {\n  const source = this.source.key;\n  const target = this.target.key;\n\n  let outKey = 'out';\n  let inKey = 'in';\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  delete this.source[outKey][target];\n\n  // No-op delete in case of undirected self-loop\n  delete this.target[inKey][source];\n};\n\nEdgeData.prototype.detachMulti = function () {\n  const source = this.source.key;\n  const target = this.target.key;\n\n  let outKey = 'out';\n  let inKey = 'in';\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  // Deleting from doubly-linked list\n  if (this.previous === undefined) {\n    // We are dealing with the head\n\n    // Should we delete the adjacency entry because it is now empty?\n    if (this.next === undefined) {\n      delete this.source[outKey][target];\n\n      // No-op delete in case of undirected self-loop\n      delete this.target[inKey][source];\n    } else {\n      // Detaching\n      this.next.previous = undefined;\n\n      // NOTE: could avoid the lookups by creating a #.become mutating method\n      this.source[outKey][target] = this.next;\n\n      // No-op delete in case of undirected self-loop\n      this.target[inKey][source] = this.next;\n    }\n  } else {\n    // We are dealing with another list node\n    this.previous.next = this.next;\n\n    // If not last\n    if (this.next !== undefined) {\n      this.next.previous = this.previous;\n    }\n  }\n};\n","/**\n * Graphology Node Attributes methods\n * ===================================\n */\nimport {assign, isPlainObject} from '../utils';\n\nimport {InvalidArgumentsGraphError, NotFoundGraphError} from '../errors';\n\nconst NODE = 0;\nconst SOURCE = 1;\nconst TARGET = 2;\nconst OPPOSITE = 3;\n\nfunction findRelevantNodeData(\n  graph,\n  method,\n  mode,\n  nodeOrEdge,\n  nameOrEdge,\n  add1,\n  add2\n) {\n  let nodeData, edgeData, arg1, arg2;\n\n  nodeOrEdge = '' + nodeOrEdge;\n\n  if (mode === NODE) {\n    nodeData = graph._nodes.get(nodeOrEdge);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${nodeOrEdge}\" node in the graph.`\n      );\n\n    arg1 = nameOrEdge;\n    arg2 = add1;\n  } else if (mode === OPPOSITE) {\n    nameOrEdge = '' + nameOrEdge;\n\n    edgeData = graph._edges.get(nameOrEdge);\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${nameOrEdge}\" edge in the graph.`\n      );\n\n    const source = edgeData.source.key;\n    const target = edgeData.target.key;\n\n    if (nodeOrEdge === source) {\n      nodeData = edgeData.target;\n    } else if (nodeOrEdge === target) {\n      nodeData = edgeData.source;\n    } else {\n      throw new NotFoundGraphError(\n        `Graph.${method}: the \"${nodeOrEdge}\" node is not attached to the \"${nameOrEdge}\" edge (${source}, ${target}).`\n      );\n    }\n\n    arg1 = add1;\n    arg2 = add2;\n  } else {\n    edgeData = graph._edges.get(nodeOrEdge);\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${nodeOrEdge}\" edge in the graph.`\n      );\n\n    if (mode === SOURCE) {\n      nodeData = edgeData.source;\n    } else {\n      nodeData = edgeData.target;\n    }\n\n    arg1 = nameOrEdge;\n    arg2 = add1;\n  }\n\n  return [nodeData, arg1, arg2];\n}\n\nfunction attachNodeAttributeGetter(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, name] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    return data.attributes[name];\n  };\n}\n\nfunction attachNodeAttributesGetter(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge) {\n    const [data] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge\n    );\n\n    return data.attributes;\n  };\n}\n\nfunction attachNodeAttributeChecker(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, name] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    return data.attributes.hasOwnProperty(name);\n  };\n}\n\nfunction attachNodeAttributeSetter(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1, add2) {\n    const [data, name, value] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1,\n      add2\n    );\n\n    data.attributes[name] = value;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributeUpdater(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1, add2) {\n    const [data, name, updater] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1,\n      add2\n    );\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: updater should be a function.`\n      );\n\n    const attributes = data.attributes;\n    const value = updater(attributes[name]);\n\n    attributes[name] = value;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributeRemover(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, name] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    delete data.attributes[name];\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'remove',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributesReplacer(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, attributes] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    data.attributes = attributes;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'replace',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributesMerger(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, attributes] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    assign(data.attributes, attributes);\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'merge',\n      attributes: data.attributes,\n      data: attributes\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributesUpdater(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, updater] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided updater is not a function.`\n      );\n\n    data.attributes = updater(data.attributes);\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'update',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * List of methods to attach.\n */\nconst NODE_ATTRIBUTES_METHODS = [\n  {\n    name: element => `get${element}Attribute`,\n    attacher: attachNodeAttributeGetter\n  },\n  {\n    name: element => `get${element}Attributes`,\n    attacher: attachNodeAttributesGetter\n  },\n  {\n    name: element => `has${element}Attribute`,\n    attacher: attachNodeAttributeChecker\n  },\n  {\n    name: element => `set${element}Attribute`,\n    attacher: attachNodeAttributeSetter\n  },\n  {\n    name: element => `update${element}Attribute`,\n    attacher: attachNodeAttributeUpdater\n  },\n  {\n    name: element => `remove${element}Attribute`,\n    attacher: attachNodeAttributeRemover\n  },\n  {\n    name: element => `replace${element}Attributes`,\n    attacher: attachNodeAttributesReplacer\n  },\n  {\n    name: element => `merge${element}Attributes`,\n    attacher: attachNodeAttributesMerger\n  },\n  {\n    name: element => `update${element}Attributes`,\n    attacher: attachNodeAttributesUpdater\n  }\n];\n\n/**\n * Attach every attributes-related methods to a Graph class.\n *\n * @param {function} Graph - Target class.\n */\nexport default function attachNodeAttributesMethods(Graph) {\n  NODE_ATTRIBUTES_METHODS.forEach(function ({name, attacher}) {\n    // For nodes\n    attacher(Graph, name('Node'), NODE);\n\n    // For sources\n    attacher(Graph, name('Source'), SOURCE);\n\n    // For targets\n    attacher(Graph, name('Target'), TARGET);\n\n    // For opposites\n    attacher(Graph, name('Opposite'), OPPOSITE);\n  });\n}\n","/**\n * Graphology Edge Attributes methods\n * ===================================\n */\nimport {assign, isPlainObject, getMatchingEdge} from '../utils';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from '../errors';\n\n/**\n * Attach an attribute getter method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeGetter(Class, method, type) {\n  /**\n   * Get the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {mixed}          - The attribute's value.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    return data.attributes[name];\n  };\n}\n\n/**\n * Attach an attributes getter method onto the provided class.\n *\n * @param {function} Class       - Target class.\n * @param {string}   method      - Method name.\n * @param {string}   type        - Type of the edge to find.\n */\nfunction attachEdgeAttributesGetter(Class, method, type) {\n  /**\n   * Retrieves all the target element's attributes.\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   *\n   * @return {object}          - The element's attributes.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 1) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + arguments[1];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    return data.attributes;\n  };\n}\n\n/**\n * Attach an attribute checker method onto the provided class.\n *\n * @param {function} Class       - Target class.\n * @param {string}   method      - Method name.\n * @param {string}   type        - Type of the edge to find.\n */\nfunction attachEdgeAttributeChecker(Class, method, type) {\n  /**\n   * Checks whether the desired attribute is set for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    return data.attributes.hasOwnProperty(name);\n  };\n}\n\n/**\n * Attach an attribute setter method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeSetter(Class, method, type) {\n  /**\n   * Set the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   * @param  {mixed}  value   - New attribute value.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   * @param  {mixed}  value   - New attribute value.\n   *\n   * @return {Graph}          - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name, value) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 3) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n      value = arguments[3];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    data.attributes[name] = value;\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute updater method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeUpdater(Class, method, type) {\n  /**\n   * Update the desired attribute for the given element (node or edge) using\n   * the provided function.\n   *\n   * Arity 2:\n   * @param  {any}      element - Target element.\n   * @param  {string}   name    - Attribute's name.\n   * @param  {function} updater - Updater function.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}      source  - Source element.\n   * @param  {any}      target  - Target element.\n   * @param  {string}   name    - Attribute's name.\n   * @param  {function} updater - Updater function.\n   *\n   * @return {Graph}            - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name, updater) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 3) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n      updater = arguments[3];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: updater should be a function.`\n      );\n\n    data.attributes[name] = updater(data.attributes[name]);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute remover method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeRemover(Class, method, type) {\n  /**\n   * Remove the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {Graph}          - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    delete data.attributes[name];\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'remove',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute replacer method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributesReplacer(Class, method, type) {\n  /**\n   * Replace the attributes for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element    - Target element.\n   * @param  {object} attributes - New attributes.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source     - Source element.\n   * @param  {any}     target     - Target element.\n   * @param  {object}  attributes - New attributes.\n   *\n   * @return {Graph}              - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, attributes) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + attributes;\n\n      attributes = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    data.attributes = attributes;\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'replace',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute merger method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributesMerger(Class, method, type) {\n  /**\n   * Merge the attributes for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element    - Target element.\n   * @param  {object} attributes - Attributes to merge.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source     - Source element.\n   * @param  {any}     target     - Target element.\n   * @param  {object}  attributes - Attributes to merge.\n   *\n   * @return {Graph}              - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, attributes) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + attributes;\n\n      attributes = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    assign(data.attributes, attributes);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'merge',\n      attributes: data.attributes,\n      data: attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute updater method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributesUpdater(Class, method, type) {\n  /**\n   * Update the attributes of the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}      element - Target element.\n   * @param  {function} updater - Updater function.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}      source  - Source element.\n   * @param  {any}      target  - Target element.\n   * @param  {function} updater - Updater function.\n   *\n   * @return {Graph}            - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, updater) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + updater;\n\n      updater = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided updater is not a function.`\n      );\n\n    data.attributes = updater(data.attributes);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'update',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * List of methods to attach.\n */\nconst EDGE_ATTRIBUTES_METHODS = [\n  {\n    name: element => `get${element}Attribute`,\n    attacher: attachEdgeAttributeGetter\n  },\n  {\n    name: element => `get${element}Attributes`,\n    attacher: attachEdgeAttributesGetter\n  },\n  {\n    name: element => `has${element}Attribute`,\n    attacher: attachEdgeAttributeChecker\n  },\n  {\n    name: element => `set${element}Attribute`,\n    attacher: attachEdgeAttributeSetter\n  },\n  {\n    name: element => `update${element}Attribute`,\n    attacher: attachEdgeAttributeUpdater\n  },\n  {\n    name: element => `remove${element}Attribute`,\n    attacher: attachEdgeAttributeRemover\n  },\n  {\n    name: element => `replace${element}Attributes`,\n    attacher: attachEdgeAttributesReplacer\n  },\n  {\n    name: element => `merge${element}Attributes`,\n    attacher: attachEdgeAttributesMerger\n  },\n  {\n    name: element => `update${element}Attributes`,\n    attacher: attachEdgeAttributesUpdater\n  }\n];\n\n/**\n * Attach every attributes-related methods to a Graph class.\n *\n * @param {function} Graph - Target class.\n */\nexport default function attachEdgeAttributesMethods(Graph) {\n  EDGE_ATTRIBUTES_METHODS.forEach(function ({name, attacher}) {\n    // For edges\n    attacher(Graph, name('Edge'), 'mixed');\n\n    // For directed edges\n    attacher(Graph, name('DirectedEdge'), 'directed');\n\n    // For undirected edges\n    attacher(Graph, name('UndirectedEdge'), 'undirected');\n  });\n}\n","/**\n * Obliterator Chain Function\n * ===========================\n *\n * Variadic function combining the given iterables.\n */\nvar Iterator = require('./iterator.js');\nvar iter = require('./iter.js');\n\n/**\n * Chain.\n *\n * @param  {...Iterator} iterables - Target iterables.\n * @return {Iterator}\n */\nmodule.exports = function chain() {\n  var iterables = arguments;\n  var current = null;\n  var i = -1;\n\n  /* eslint-disable no-constant-condition */\n  return new Iterator(function next() {\n    var step = null;\n\n    do {\n      if (current === null) {\n        i++;\n\n        if (i >= iterables.length) return {done: true};\n\n        current = iter(iterables[i]);\n      }\n\n      step = current.next();\n\n      if (step.done === true) {\n        current = null;\n        continue;\n      }\n\n      break;\n    } while (true);\n\n    return step;\n  });\n};\n","/**\n * Graphology Edge Iteration\n * ==========================\n *\n * Attaching some methods to the Graph class to be able to iterate over a\n * graph's edges.\n */\nimport Iterator from 'obliterator/iterator';\nimport chain from 'obliterator/chain';\nimport take from 'obliterator/take';\n\nimport {InvalidArgumentsGraphError, NotFoundGraphError} from '../errors';\n\n/**\n * Definitions.\n */\nconst EDGES_ITERATION = [\n  {\n    name: 'edges',\n    type: 'mixed'\n  },\n  {\n    name: 'inEdges',\n    type: 'directed',\n    direction: 'in'\n  },\n  {\n    name: 'outEdges',\n    type: 'directed',\n    direction: 'out'\n  },\n  {\n    name: 'inboundEdges',\n    type: 'mixed',\n    direction: 'in'\n  },\n  {\n    name: 'outboundEdges',\n    type: 'mixed',\n    direction: 'out'\n  },\n  {\n    name: 'directedEdges',\n    type: 'directed'\n  },\n  {\n    name: 'undirectedEdges',\n    type: 'undirected'\n  }\n];\n\n/**\n * Function iterating over edges from the given object to match one of them.\n *\n * @param {object}   object   - Target object.\n * @param {function} callback - Function to call.\n */\nfunction forEachSimple(breakable, object, callback, avoid) {\n  let shouldBreak = false;\n\n  for (const k in object) {\n    if (k === avoid) continue;\n\n    const edgeData = object[k];\n\n    shouldBreak = callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected\n    );\n\n    if (breakable && shouldBreak) return edgeData.key;\n  }\n\n  return;\n}\n\nfunction forEachMulti(breakable, object, callback, avoid) {\n  let edgeData, source, target;\n\n  let shouldBreak = false;\n\n  for (const k in object) {\n    if (k === avoid) continue;\n\n    edgeData = object[k];\n\n    do {\n      source = edgeData.source;\n      target = edgeData.target;\n\n      shouldBreak = callback(\n        edgeData.key,\n        edgeData.attributes,\n        source.key,\n        target.key,\n        source.attributes,\n        target.attributes,\n        edgeData.undirected\n      );\n\n      if (breakable && shouldBreak) return edgeData.key;\n\n      edgeData = edgeData.next;\n    } while (edgeData !== undefined);\n  }\n\n  return;\n}\n\n/**\n * Function returning an iterator over edges from the given object.\n *\n * @param  {object}   object - Target object.\n * @return {Iterator}\n */\nfunction createIterator(object, avoid) {\n  const keys = Object.keys(object);\n  const l = keys.length;\n\n  let edgeData;\n  let i = 0;\n\n  return new Iterator(function next() {\n    do {\n      if (!edgeData) {\n        if (i >= l) return {done: true};\n\n        const k = keys[i++];\n\n        if (k === avoid) {\n          edgeData = undefined;\n          continue;\n        }\n\n        edgeData = object[k];\n      } else {\n        edgeData = edgeData.next;\n      }\n    } while (!edgeData);\n\n    return {\n      done: false,\n      value: {\n        edge: edgeData.key,\n        attributes: edgeData.attributes,\n        source: edgeData.source.key,\n        target: edgeData.target.key,\n        sourceAttributes: edgeData.source.attributes,\n        targetAttributes: edgeData.target.attributes,\n        undirected: edgeData.undirected\n      }\n    };\n  });\n}\n\n/**\n * Function iterating over the egdes from the object at given key to match\n * one of them.\n *\n * @param {object}   object   - Target object.\n * @param {mixed}    k        - Neighbor key.\n * @param {function} callback - Callback to use.\n */\nfunction forEachForKeySimple(breakable, object, k, callback) {\n  const edgeData = object[k];\n\n  if (!edgeData) return;\n\n  const sourceData = edgeData.source;\n  const targetData = edgeData.target;\n\n  if (\n    callback(\n      edgeData.key,\n      edgeData.attributes,\n      sourceData.key,\n      targetData.key,\n      sourceData.attributes,\n      targetData.attributes,\n      edgeData.undirected\n    ) &&\n    breakable\n  )\n    return edgeData.key;\n}\n\nfunction forEachForKeyMulti(breakable, object, k, callback) {\n  let edgeData = object[k];\n\n  if (!edgeData) return;\n\n  let shouldBreak = false;\n\n  do {\n    shouldBreak = callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected\n    );\n\n    if (breakable && shouldBreak) return edgeData.key;\n\n    edgeData = edgeData.next;\n  } while (edgeData !== undefined);\n\n  return;\n}\n\n/**\n * Function returning an iterator over the egdes from the object at given key.\n *\n * @param  {object}   object   - Target object.\n * @param  {mixed}    k        - Neighbor key.\n * @return {Iterator}\n */\nfunction createIteratorForKey(object, k) {\n  let edgeData = object[k];\n\n  if (edgeData.next !== undefined) {\n    return new Iterator(function () {\n      if (!edgeData) return {done: true};\n\n      const value = {\n        edge: edgeData.key,\n        attributes: edgeData.attributes,\n        source: edgeData.source.key,\n        target: edgeData.target.key,\n        sourceAttributes: edgeData.source.attributes,\n        targetAttributes: edgeData.target.attributes,\n        undirected: edgeData.undirected\n      };\n\n      edgeData = edgeData.next;\n\n      return {\n        done: false,\n        value\n      };\n    });\n  }\n\n  return Iterator.of({\n    edge: edgeData.key,\n    attributes: edgeData.attributes,\n    source: edgeData.source.key,\n    target: edgeData.target.key,\n    sourceAttributes: edgeData.source.attributes,\n    targetAttributes: edgeData.target.attributes,\n    undirected: edgeData.undirected\n  });\n}\n\n/**\n * Function creating an array of edges for the given type.\n *\n * @param  {Graph}   graph - Target Graph instance.\n * @param  {string}  type  - Type of edges to retrieve.\n * @return {array}         - Array of edges.\n */\nfunction createEdgeArray(graph, type) {\n  if (graph.size === 0) return [];\n\n  if (type === 'mixed' || type === graph.type) {\n    if (typeof Array.from === 'function')\n      return Array.from(graph._edges.keys());\n\n    return take(graph._edges.keys(), graph._edges.size);\n  }\n\n  const size =\n    type === 'undirected' ? graph.undirectedSize : graph.directedSize;\n\n  const list = new Array(size),\n    mask = type === 'undirected';\n\n  const iterator = graph._edges.values();\n\n  let i = 0;\n  let step, data;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    data = step.value;\n\n    if (data.undirected === mask) list[i++] = data.key;\n  }\n\n  return list;\n}\n\n/**\n * Function iterating over a graph's edges using a callback to match one of\n * them.\n *\n * @param  {Graph}    graph    - Target Graph instance.\n * @param  {string}   type     - Type of edges to retrieve.\n * @param  {function} callback - Function to call.\n */\nfunction forEachEdge(breakable, graph, type, callback) {\n  if (graph.size === 0) return;\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  let step, data;\n  let shouldBreak = false;\n  const iterator = graph._edges.values();\n\n  while (((step = iterator.next()), step.done !== true)) {\n    data = step.value;\n\n    if (shouldFilter && data.undirected !== mask) continue;\n\n    const {key, attributes, source, target} = data;\n\n    shouldBreak = callback(\n      key,\n      attributes,\n      source.key,\n      target.key,\n      source.attributes,\n      target.attributes,\n      data.undirected\n    );\n\n    if (breakable && shouldBreak) return key;\n  }\n\n  return;\n}\n\n/**\n * Function creating an iterator of edges for the given type.\n *\n * @param  {Graph}    graph - Target Graph instance.\n * @param  {string}   type  - Type of edges to retrieve.\n * @return {Iterator}\n */\nfunction createEdgeIterator(graph, type) {\n  if (graph.size === 0) return Iterator.empty();\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  const iterator = graph._edges.values();\n\n  return new Iterator(function next() {\n    let step, data;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      step = iterator.next();\n\n      if (step.done) return step;\n\n      data = step.value;\n\n      if (shouldFilter && data.undirected !== mask) continue;\n\n      break;\n    }\n\n    const value = {\n      edge: data.key,\n      attributes: data.attributes,\n      source: data.source.key,\n      target: data.target.key,\n      sourceAttributes: data.source.attributes,\n      targetAttributes: data.target.attributes,\n      undirected: data.undirected\n    };\n\n    return {value, done: false};\n  });\n}\n\n/**\n * Function iterating over a node's edges using a callback to match one of them.\n *\n * @param  {boolean}  multi     - Whether the graph is multi or not.\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Function to call.\n */\nfunction forEachEdgeForNode(\n  breakable,\n  multi,\n  type,\n  direction,\n  nodeData,\n  callback\n) {\n  const fn = multi ? forEachMulti : forEachSimple;\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      found = fn(breakable, nodeData.in, callback);\n\n      if (breakable && found) return found;\n    }\n    if (direction !== 'in') {\n      found = fn(\n        breakable,\n        nodeData.out,\n        callback,\n        !direction ? nodeData.key : undefined\n      );\n\n      if (breakable && found) return found;\n    }\n  }\n\n  if (type !== 'directed') {\n    found = fn(breakable, nodeData.undirected, callback);\n\n    if (breakable && found) return found;\n  }\n\n  return;\n}\n\n/**\n * Function creating an array of edges for the given type & the given node.\n *\n * @param  {boolean} multi     - Whether the graph is multi or not.\n * @param  {string}  type      - Type of edges to retrieve.\n * @param  {string}  direction - In or out?\n * @param  {any}     nodeData  - Target node's data.\n * @return {array}             - Array of edges.\n */\nfunction createEdgeArrayForNode(multi, type, direction, nodeData) {\n  const edges = []; // TODO: possibility to know size beforehand or factorize with map\n\n  forEachEdgeForNode(false, multi, type, direction, nodeData, function (key) {\n    edges.push(key);\n  });\n\n  return edges;\n}\n\n/**\n * Function iterating over a node's edges using a callback.\n *\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @return {Iterator}\n */\nfunction createEdgeIteratorForNode(type, direction, nodeData) {\n  let iterator = Iterator.empty();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out' && typeof nodeData.in !== 'undefined')\n      iterator = chain(iterator, createIterator(nodeData.in));\n    if (direction !== 'in' && typeof nodeData.out !== 'undefined')\n      iterator = chain(\n        iterator,\n        createIterator(nodeData.out, !direction ? nodeData.key : undefined)\n      );\n  }\n\n  if (type !== 'directed' && typeof nodeData.undirected !== 'undefined') {\n    iterator = chain(iterator, createIterator(nodeData.undirected));\n  }\n\n  return iterator;\n}\n\n/**\n * Function iterating over edges for the given path using a callback to match\n * one of them.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction forEachEdgeForPath(\n  breakable,\n  type,\n  multi,\n  direction,\n  sourceData,\n  target,\n  callback\n) {\n  const fn = multi ? forEachForKeyMulti : forEachForKeySimple;\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (typeof sourceData.in !== 'undefined' && direction !== 'out') {\n      found = fn(breakable, sourceData.in, target, callback);\n\n      if (breakable && found) return found;\n    }\n\n    if (\n      typeof sourceData.out !== 'undefined' &&\n      direction !== 'in' &&\n      (direction || sourceData.key !== target)\n    ) {\n      found = fn(breakable, sourceData.out, target, callback);\n\n      if (breakable && found) return found;\n    }\n  }\n\n  if (type !== 'directed') {\n    if (typeof sourceData.undirected !== 'undefined') {\n      found = fn(breakable, sourceData.undirected, target, callback);\n\n      if (breakable && found) return found;\n    }\n  }\n\n  return;\n}\n\n/**\n * Function creating an array of edges for the given path.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {any}      target     - Target node.\n * @return {array}               - Array of edges.\n */\nfunction createEdgeArrayForPath(type, multi, direction, sourceData, target) {\n  const edges = []; // TODO: possibility to know size beforehand or factorize with map\n\n  forEachEdgeForPath(\n    false,\n    type,\n    multi,\n    direction,\n    sourceData,\n    target,\n    function (key) {\n      edges.push(key);\n    }\n  );\n\n  return edges;\n}\n\n/**\n * Function returning an iterator over edges for the given path.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction createEdgeIteratorForPath(type, direction, sourceData, target) {\n  let iterator = Iterator.empty();\n\n  if (type !== 'undirected') {\n    if (\n      typeof sourceData.in !== 'undefined' &&\n      direction !== 'out' &&\n      target in sourceData.in\n    )\n      iterator = chain(iterator, createIteratorForKey(sourceData.in, target));\n\n    if (\n      typeof sourceData.out !== 'undefined' &&\n      direction !== 'in' &&\n      target in sourceData.out &&\n      (direction || sourceData.key !== target)\n    )\n      iterator = chain(iterator, createIteratorForKey(sourceData.out, target));\n  }\n\n  if (type !== 'directed') {\n    if (\n      typeof sourceData.undirected !== 'undefined' &&\n      target in sourceData.undirected\n    )\n      iterator = chain(\n        iterator,\n        createIteratorForKey(sourceData.undirected, target)\n      );\n  }\n\n  return iterator;\n}\n\n/**\n * Function attaching an edge array creator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachEdgeArrayCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  /**\n   * Function returning an array of certain edges.\n   *\n   * Arity 0: Return all the relevant edges.\n   *\n   * Arity 1: Return all of a node's relevant edges.\n   * @param  {any}   node   - Target node.\n   *\n   * Arity 2: Return the relevant edges across the given path.\n   * @param  {any}   source - Source node.\n   * @param  {any}   target - Target node.\n   *\n   * @return {array|number} - The edges or the number of edges.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[name] = function (source, target) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return [];\n\n    if (!arguments.length) return createEdgeArray(this, type);\n\n    if (arguments.length === 1) {\n      source = '' + source;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${name}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      return createEdgeArrayForNode(\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData\n      );\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return createEdgeArrayForPath(\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`\n    );\n  };\n}\n\n/**\n * Function attaching a edge callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachEdge(Class, description) {\n  const {name, type, direction} = description;\n\n  const forEachName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over the graph's relevant edges by applying the given\n   * callback.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachName] = function (source, target, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    if (arguments.length === 1) {\n      callback = source;\n      return forEachEdge(false, this, type, callback);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      callback = target;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      // TODO: maybe attach the sub method to the instance dynamically?\n      return forEachEdgeForNode(\n        false,\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData,\n        callback\n      );\n    }\n\n    if (arguments.length === 3) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return forEachEdgeForPath(\n        false,\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target,\n        callback\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${forEachName}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`\n    );\n  };\n\n  /**\n   * Function mapping the graph's relevant edges by applying the given\n   * callback.\n   *\n   * Arity 1: Map all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Map all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Map the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const mapName = 'map' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[mapName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    let result;\n\n    // We know the result length beforehand\n    if (args.length === 0) {\n      let length = 0;\n\n      if (type !== 'directed') length += this.undirectedSize;\n      if (type !== 'undirected') length += this.directedSize;\n\n      result = new Array(length);\n\n      let i = 0;\n\n      args.push((e, ea, s, t, sa, ta, u) => {\n        result[i++] = callback(e, ea, s, t, sa, ta, u);\n      });\n    }\n\n    // We don't know the result length beforehand\n    // TODO: we can in some instances of simple graphs, knowing degree\n    else {\n      result = [];\n\n      args.push((e, ea, s, t, sa, ta, u) => {\n        result.push(callback(e, ea, s, t, sa, ta, u));\n      });\n    }\n\n    this[forEachName].apply(this, args);\n\n    return result;\n  };\n\n  /**\n   * Function filtering the graph's relevant edges using the provided predicate\n   * function.\n   *\n   * Arity 1: Filter all the relevant edges.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * Arity 2: Filter all of a node's relevant edges.\n   * @param  {any}      node      - Target node.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * Arity 3: Filter the relevant edges across the given path.\n   * @param  {any}      source    - Source node.\n   * @param  {any}      target    - Target node.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const filterName = 'filter' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[filterName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    const result = [];\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      if (callback(e, ea, s, t, sa, ta, u)) result.push(e);\n    });\n\n    this[forEachName].apply(this, args);\n\n    return result;\n  };\n\n  /**\n   * Function reducing the graph's relevant edges using the provided accumulator\n   * function.\n   *\n   * Arity 1: Reduce all the relevant edges.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * Arity 2: Reduce all of a node's relevant edges.\n   * @param  {any}      node         - Target node.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * Arity 3: Reduce the relevant edges across the given path.\n   * @param  {any}      source       - Source node.\n   * @param  {any}      target       - Target node.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const reduceName = 'reduce' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[reduceName] = function () {\n    let args = Array.prototype.slice.call(arguments);\n\n    if (args.length < 2 || args.length > 4) {\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: invalid number of arguments (expecting 2, 3 or 4 and got ${args.length}).`\n      );\n    }\n\n    if (\n      typeof args[args.length - 1] === 'function' &&\n      typeof args[args.length - 2] !== 'function'\n    ) {\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`\n      );\n    }\n\n    let callback;\n    let initialValue;\n\n    if (args.length === 2) {\n      callback = args[0];\n      initialValue = args[1];\n      args = [];\n    } else if (args.length === 3) {\n      callback = args[1];\n      initialValue = args[2];\n      args = [args[0]];\n    } else if (args.length === 4) {\n      callback = args[2];\n      initialValue = args[3];\n      args = [args[0], args[1]];\n    }\n\n    let accumulator = initialValue;\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      accumulator = callback(accumulator, e, ea, s, t, sa, ta, u);\n    });\n\n    this[forEachName].apply(this, args);\n\n    return accumulator;\n  };\n}\n\n/**\n * Function attaching a breakable edge callback iterator method to the Graph\n * prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachFindEdge(Class, description) {\n  const {name, type, direction} = description;\n\n  const findEdgeName = 'find' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over the graph's relevant edges in order to match\n   * one of them using the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[findEdgeName] = function (source, target, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return false;\n\n    if (arguments.length === 1) {\n      callback = source;\n      return forEachEdge(true, this, type, callback);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      callback = target;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      // TODO: maybe attach the sub method to the instance dynamically?\n      return forEachEdgeForNode(\n        true,\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData,\n        callback\n      );\n    }\n\n    if (arguments.length === 3) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return forEachEdgeForPath(\n        true,\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target,\n        callback\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${findEdgeName}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`\n    );\n  };\n\n  /**\n   * Function iterating over the graph's relevant edges in order to assert\n   * whether any one of them matches the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const someName = 'some' + name[0].toUpperCase() + name.slice(1, -1);\n\n  Class.prototype[someName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      return callback(e, ea, s, t, sa, ta, u);\n    });\n\n    const found = this[findEdgeName].apply(this, args);\n\n    if (found) return true;\n\n    return false;\n  };\n\n  /**\n   * Function iterating over the graph's relevant edges in order to assert\n   * whether all of them matche the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const everyName = 'every' + name[0].toUpperCase() + name.slice(1, -1);\n\n  Class.prototype[everyName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      return !callback(e, ea, s, t, sa, ta, u);\n    });\n\n    const found = this[findEdgeName].apply(this, args);\n\n    if (found) return false;\n\n    return true;\n  };\n}\n\n/**\n * Function attaching an edge iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachEdgeIteratorCreator(Class, description) {\n  const {name: originalName, type, direction} = description;\n\n  const name = originalName.slice(0, -1) + 'Entries';\n\n  /**\n   * Function returning an iterator over the graph's edges.\n   *\n   * Arity 0: Iterate over all the relevant edges.\n   *\n   * Arity 1: Iterate over all of a node's relevant edges.\n   * @param  {any}   node   - Target node.\n   *\n   * Arity 2: Iterate over the relevant edges across the given path.\n   * @param  {any}   source - Source node.\n   * @param  {any}   target - Target node.\n   *\n   * @return {array|number} - The edges or the number of edges.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[name] = function (source, target) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return Iterator.empty();\n\n    if (!arguments.length) return createEdgeIterator(this, type);\n\n    if (arguments.length === 1) {\n      source = '' + source;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      return createEdgeIteratorForNode(type, direction, sourceData);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return createEdgeIteratorForPath(type, direction, sourceData, target);\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`\n    );\n  };\n}\n\n/**\n * Function attaching every edge iteration method to the Graph class.\n *\n * @param {function} Graph - Graph class.\n */\nexport default function attachEdgeIterationMethods(Graph) {\n  EDGES_ITERATION.forEach(description => {\n    attachEdgeArrayCreator(Graph, description);\n    attachForEachEdge(Graph, description);\n    attachFindEdge(Graph, description);\n    attachEdgeIteratorCreator(Graph, description);\n  });\n}\n","/**\n * Graphology Neighbor Iteration\n * ==============================\n *\n * Attaching some methods to the Graph class to be able to iterate over\n * neighbors.\n */\nimport Iterator from 'obliterator/iterator';\nimport chain from 'obliterator/chain';\n\nimport {NotFoundGraphError, InvalidArgumentsGraphError} from '../errors';\n\n/**\n * Definitions.\n */\nconst NEIGHBORS_ITERATION = [\n  {\n    name: 'neighbors',\n    type: 'mixed'\n  },\n  {\n    name: 'inNeighbors',\n    type: 'directed',\n    direction: 'in'\n  },\n  {\n    name: 'outNeighbors',\n    type: 'directed',\n    direction: 'out'\n  },\n  {\n    name: 'inboundNeighbors',\n    type: 'mixed',\n    direction: 'in'\n  },\n  {\n    name: 'outboundNeighbors',\n    type: 'mixed',\n    direction: 'out'\n  },\n  {\n    name: 'directedNeighbors',\n    type: 'directed'\n  },\n  {\n    name: 'undirectedNeighbors',\n    type: 'undirected'\n  }\n];\n\n/**\n * Helpers.\n */\nfunction CompositeSetWrapper() {\n  this.A = null;\n  this.B = null;\n}\n\nCompositeSetWrapper.prototype.wrap = function (set) {\n  if (this.A === null) this.A = set;\n  else if (this.B === null) this.B = set;\n};\n\nCompositeSetWrapper.prototype.has = function (key) {\n  if (this.A !== null && key in this.A) return true;\n  if (this.B !== null && key in this.B) return true;\n  return false;\n};\n\n/**\n * Function iterating over the given node's relevant neighbors to match\n * one of them using a predicated function.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Callback to use.\n */\nfunction forEachInObjectOnce(breakable, visited, nodeData, object, callback) {\n  for (const k in object) {\n    const edgeData = object[k];\n\n    const sourceData = edgeData.source;\n    const targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    if (visited && visited.has(neighborData.key)) continue;\n\n    const shouldBreak = callback(neighborData.key, neighborData.attributes);\n\n    if (breakable && shouldBreak) return neighborData.key;\n  }\n\n  return;\n}\n\nfunction forEachNeighbor(breakable, type, direction, nodeData, callback) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return forEachInObjectOnce(\n        breakable,\n        null,\n        nodeData,\n        nodeData.undirected,\n        callback\n      );\n\n    if (typeof direction === 'string')\n      return forEachInObjectOnce(\n        breakable,\n        null,\n        nodeData,\n        nodeData[direction],\n        callback\n      );\n  }\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  // We cheat by querying the other adjacencies\n  const visited = new CompositeSetWrapper();\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      found = forEachInObjectOnce(\n        breakable,\n        null,\n        nodeData,\n        nodeData.in,\n        callback\n      );\n\n      if (breakable && found) return found;\n\n      visited.wrap(nodeData.in);\n    }\n    if (direction !== 'in') {\n      found = forEachInObjectOnce(\n        breakable,\n        visited,\n        nodeData,\n        nodeData.out,\n        callback\n      );\n\n      if (breakable && found) return found;\n\n      visited.wrap(nodeData.out);\n    }\n  }\n\n  if (type !== 'directed') {\n    found = forEachInObjectOnce(\n      breakable,\n      visited,\n      nodeData,\n      nodeData.undirected,\n      callback\n    );\n\n    if (breakable && found) return found;\n  }\n\n  return;\n}\n\n/**\n * Function creating an array of relevant neighbors for the given node.\n *\n * @param  {string}       type      - Type of neighbors.\n * @param  {string}       direction - Direction.\n * @param  {any}          nodeData  - Target node's data.\n * @return {Array}                  - The list of neighbors.\n */\nfunction createNeighborArrayForNode(type, direction, nodeData) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected') return Object.keys(nodeData.undirected);\n\n    if (typeof direction === 'string') return Object.keys(nodeData[direction]);\n  }\n\n  const neighbors = [];\n\n  forEachNeighbor(false, type, direction, nodeData, function (key) {\n    neighbors.push(key);\n  });\n\n  return neighbors;\n}\n\n/**\n * Function returning an iterator over the given node's relevant neighbors.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @return {Iterator}\n */\nfunction createDedupedObjectIterator(visited, nodeData, object) {\n  const keys = Object.keys(object);\n  const l = keys.length;\n\n  let i = 0;\n\n  return new Iterator(function next() {\n    let neighborData = null;\n\n    do {\n      if (i >= l) {\n        if (visited) visited.wrap(object);\n        return {done: true};\n      }\n\n      const edgeData = object[keys[i++]];\n\n      const sourceData = edgeData.source;\n      const targetData = edgeData.target;\n\n      neighborData = sourceData === nodeData ? targetData : sourceData;\n\n      if (visited && visited.has(neighborData.key)) {\n        neighborData = null;\n        continue;\n      }\n    } while (neighborData === null);\n\n    return {\n      done: false,\n      value: {neighbor: neighborData.key, attributes: neighborData.attributes}\n    };\n  });\n}\n\nfunction createNeighborIterator(type, direction, nodeData) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return createDedupedObjectIterator(null, nodeData, nodeData.undirected);\n\n    if (typeof direction === 'string')\n      return createDedupedObjectIterator(null, nodeData, nodeData[direction]);\n  }\n\n  let iterator = Iterator.empty();\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  // We cheat by querying the other adjacencies\n  const visited = new CompositeSetWrapper();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      iterator = chain(\n        iterator,\n        createDedupedObjectIterator(visited, nodeData, nodeData.in)\n      );\n    }\n    if (direction !== 'in') {\n      iterator = chain(\n        iterator,\n        createDedupedObjectIterator(visited, nodeData, nodeData.out)\n      );\n    }\n  }\n\n  if (type !== 'directed') {\n    iterator = chain(\n      iterator,\n      createDedupedObjectIterator(visited, nodeData, nodeData.undirected)\n    );\n  }\n\n  return iterator;\n}\n\n/**\n * Function attaching a neighbors array creator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachNeighborArrayCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  /**\n   * Function returning an array of certain neighbors.\n   *\n   * @param  {any}   node   - Target node.\n   * @return {array} - The neighbors of neighbors.\n   *\n   * @throws {Error} - Will throw if node is not found in the graph.\n   */\n  Class.prototype[name] = function (node) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return [];\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${name}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return createNeighborArrayForNode(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData\n    );\n  };\n}\n\n/**\n * Function attaching a neighbors callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachNeighbor(Class, description) {\n  const {name, type, direction} = description;\n\n  const forEachName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over all the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachName] = function (node, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${forEachName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    forEachNeighbor(\n      false,\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData,\n      callback\n    );\n  };\n\n  /**\n   * Function mapping the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const mapName = 'map' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[mapName] = function (node, callback) {\n    // TODO: optimize when size is known beforehand\n    const result = [];\n\n    this[forEachName](node, (n, a) => {\n      result.push(callback(n, a));\n    });\n\n    return result;\n  };\n\n  /**\n   * Function filtering the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const filterName = 'filter' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[filterName] = function (node, callback) {\n    const result = [];\n\n    this[forEachName](node, (n, a) => {\n      if (callback(n, a)) result.push(n);\n    });\n\n    return result;\n  };\n\n  /**\n   * Function reducing the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const reduceName = 'reduce' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[reduceName] = function (node, callback, initialValue) {\n    if (arguments.length < 3)\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`\n      );\n\n    let accumulator = initialValue;\n\n    this[forEachName](node, (n, a) => {\n      accumulator = callback(accumulator, n, a);\n    });\n\n    return accumulator;\n  };\n}\n\n/**\n * Function attaching a breakable neighbors callback iterator method to the\n * Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachFindNeighbor(Class, description) {\n  const {name, type, direction} = description;\n\n  const capitalizedSingular = name[0].toUpperCase() + name.slice(1, -1);\n\n  const findName = 'find' + capitalizedSingular;\n\n  /**\n   * Function iterating over all the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[findName] = function (node, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${findName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return forEachNeighbor(\n      true,\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData,\n      callback\n    );\n  };\n\n  /**\n   * Function iterating over all the relevant neighbors to find if any of them\n   * matches the given predicate.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const someName = 'some' + capitalizedSingular;\n\n  Class.prototype[someName] = function (node, callback) {\n    const found = this[findName](node, callback);\n\n    if (found) return true;\n\n    return false;\n  };\n\n  /**\n   * Function iterating over all the relevant neighbors to find if all of them\n   * matche the given predicate.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const everyName = 'every' + capitalizedSingular;\n\n  Class.prototype[everyName] = function (node, callback) {\n    const found = this[findName](node, (n, a) => {\n      return !callback(n, a);\n    });\n\n    if (found) return false;\n\n    return true;\n  };\n}\n\n/**\n * Function attaching a neighbors callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachNeighborIteratorCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  const iteratorName = name.slice(0, -1) + 'Entries';\n\n  /**\n   * Function returning an iterator over all the relevant neighbors.\n   *\n   * @param  {any}      node     - Target node.\n   * @return {Iterator}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[iteratorName] = function (node) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return Iterator.empty();\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${iteratorName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return createNeighborIterator(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData\n    );\n  };\n}\n\n/**\n * Function attaching every neighbor iteration method to the Graph class.\n *\n * @param {function} Graph - Graph class.\n */\nexport default function attachNeighborIterationMethods(Graph) {\n  NEIGHBORS_ITERATION.forEach(description => {\n    attachNeighborArrayCreator(Graph, description);\n    attachForEachNeighbor(Graph, description);\n    attachFindNeighbor(Graph, description);\n    attachNeighborIteratorCreator(Graph, description);\n  });\n}\n","/**\n * Graphology Adjacency Iteration\n * ===============================\n *\n * Attaching some methods to the Graph class to be able to iterate over a\n * graph's adjacency.\n */\n\n/**\n * Function iterating over a simple graph's adjacency using a callback.\n *\n * @param {boolean}  breakable         - Can we break?\n * @param {boolean}  assymetric        - Whether to emit undirected edges only once.\n * @param {boolean}  disconnectedNodes - Whether to emit disconnected nodes.\n * @param {Graph}    graph             - Target Graph instance.\n * @param {callback} function          - Iteration callback.\n */\nexport function forEachAdjacency(\n  breakable,\n  assymetric,\n  disconnectedNodes,\n  graph,\n  callback\n) {\n  const iterator = graph._nodes.values();\n\n  const type = graph.type;\n\n  let step, sourceData, neighbor, adj, edgeData, targetData, shouldBreak;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    let hasEdges = false;\n\n    sourceData = step.value;\n\n    if (type !== 'undirected') {\n      adj = sourceData.out;\n\n      for (neighbor in adj) {\n        edgeData = adj[neighbor];\n\n        do {\n          targetData = edgeData.target;\n\n          hasEdges = true;\n          shouldBreak = callback(\n            sourceData.key,\n            targetData.key,\n            sourceData.attributes,\n            targetData.attributes,\n            edgeData.key,\n            edgeData.attributes,\n            edgeData.undirected\n          );\n\n          if (breakable && shouldBreak) return edgeData;\n\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    if (type !== 'directed') {\n      adj = sourceData.undirected;\n\n      for (neighbor in adj) {\n        if (assymetric && sourceData.key > neighbor) continue;\n\n        edgeData = adj[neighbor];\n\n        do {\n          targetData = edgeData.target;\n\n          if (targetData.key !== neighbor) targetData = edgeData.source;\n\n          hasEdges = true;\n          shouldBreak = callback(\n            sourceData.key,\n            targetData.key,\n            sourceData.attributes,\n            targetData.attributes,\n            edgeData.key,\n            edgeData.attributes,\n            edgeData.undirected\n          );\n\n          if (breakable && shouldBreak) return edgeData;\n\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    if (disconnectedNodes && !hasEdges) {\n      shouldBreak = callback(\n        sourceData.key,\n        null,\n        sourceData.attributes,\n        null,\n        null,\n        null,\n        null\n      );\n\n      if (breakable && shouldBreak) return null;\n    }\n  }\n\n  return;\n}\n","/**\n * Graphology Serialization Utilities\n * ===================================\n *\n * Collection of functions used by the graph serialization schemes.\n */\nimport {InvalidArgumentsGraphError} from './errors';\nimport {assign, isPlainObject, isEmpty} from './utils';\n\n/**\n * Formats internal node data into a serialized node.\n *\n * @param  {any}    key  - The node's key.\n * @param  {object} data - Internal node's data.\n * @return {array}       - The serialized node.\n */\nexport function serializeNode(key, data) {\n  const serialized = {key};\n\n  if (!isEmpty(data.attributes))\n    serialized.attributes = assign({}, data.attributes);\n\n  return serialized;\n}\n\n/**\n * Formats internal edge data into a serialized edge.\n *\n * @param  {string} type - The graph's type.\n * @param  {any}    key  - The edge's key.\n * @param  {object} data - Internal edge's data.\n * @return {array}       - The serialized edge.\n */\nexport function serializeEdge(type, key, data) {\n  const serialized = {\n    key,\n    source: data.source.key,\n    target: data.target.key\n  };\n\n  if (!isEmpty(data.attributes))\n    serialized.attributes = assign({}, data.attributes);\n\n  if (type === 'mixed' && data.undirected) serialized.undirected = true;\n\n  return serialized;\n}\n\n/**\n * Checks whether the given value is a serialized node.\n *\n * @param  {mixed} value - Target value.\n * @return {string|null}\n */\nexport function validateSerializedNode(value) {\n  if (!isPlainObject(value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid serialized node. A serialized node should be a plain object with at least a \"key\" property.'\n    );\n\n  if (!('key' in value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: serialized node is missing its key.'\n    );\n\n  if (\n    'attributes' in value &&\n    (!isPlainObject(value.attributes) || value.attributes === null)\n  )\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.'\n    );\n}\n\n/**\n * Checks whether the given value is a serialized edge.\n *\n * @param  {mixed} value - Target value.\n * @return {string|null}\n */\nexport function validateSerializedEdge(value) {\n  if (!isPlainObject(value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid serialized edge. A serialized edge should be a plain object with at least a \"source\" & \"target\" property.'\n    );\n\n  if (!('source' in value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: serialized edge is missing its source.'\n    );\n\n  if (!('target' in value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: serialized edge is missing its target.'\n    );\n\n  if (\n    'attributes' in value &&\n    (!isPlainObject(value.attributes) || value.attributes === null)\n  )\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.'\n    );\n\n  if ('undirected' in value && typeof value.undirected !== 'boolean')\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid undirectedness information. Undirected should be boolean or omitted.'\n    );\n}\n","/* eslint no-nested-ternary: 0 */\n/**\n * Graphology Reference Implementation\n * ====================================\n *\n * Reference implementation of the graphology specs.\n */\nimport {EventEmitter} from 'events';\nimport Iterator from 'obliterator/iterator';\nimport take from 'obliterator/take';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\nimport {\n  MixedNodeData,\n  DirectedNodeData,\n  UndirectedNodeData,\n  EdgeData\n} from './data';\n\nimport attachNodeAttributesMethods from './attributes/nodes';\nimport attachEdgeAttributesMethods from './attributes/edges';\nimport attachEdgeIterationMethods from './iteration/edges';\nimport attachNeighborIterationMethods from './iteration/neighbors';\nimport {forEachAdjacency} from './iteration/adjacency';\n\nimport {\n  serializeNode,\n  serializeEdge,\n  validateSerializedNode,\n  validateSerializedEdge\n} from './serialization';\n\nimport {\n  assign,\n  getMatchingEdge,\n  isPlainObject,\n  privateProperty,\n  readOnlyProperty,\n  incrementalIdStartingFromRandomByte,\n  validateHints\n} from './utils';\n\n/**\n * Constants.\n */\nconst INSTANCE_ID = incrementalIdStartingFromRandomByte();\n\n/**\n * Enums.\n */\nconst TYPES = new Set(['directed', 'undirected', 'mixed']);\n\nconst EMITTER_PROPS = new Set([\n  'domain',\n  '_events',\n  '_eventsCount',\n  '_maxListeners'\n]);\n\nconst EDGE_ADD_METHODS = [\n  {\n    name: verb => `${verb}Edge`,\n    generateKey: true\n  },\n  {\n    name: verb => `${verb}DirectedEdge`,\n    generateKey: true,\n    type: 'directed'\n  },\n  {\n    name: verb => `${verb}UndirectedEdge`,\n    generateKey: true,\n    type: 'undirected'\n  },\n  {\n    name: verb => `${verb}EdgeWithKey`\n  },\n  {\n    name: verb => `${verb}DirectedEdgeWithKey`,\n    type: 'directed'\n  },\n  {\n    name: verb => `${verb}UndirectedEdgeWithKey`,\n    type: 'undirected'\n  }\n];\n\n/**\n * Default options.\n */\nconst DEFAULTS = {\n  allowSelfLoops: true,\n  multi: false,\n  type: 'mixed'\n};\n\n/**\n * Abstract functions used by the Graph class for various methods.\n */\n\n/**\n * Internal method used to add a node to the given graph\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {any}     node            - The node's key.\n * @param  {object}  [attributes]    - Optional attributes.\n * @return {NodeData}                - Created node data.\n */\nfunction addNode(graph, node, attributes) {\n  if (attributes && !isPlainObject(attributes))\n    throw new InvalidArgumentsGraphError(\n      `Graph.addNode: invalid attributes. Expecting an object but got \"${attributes}\"`\n    );\n\n  // String coercion\n  node = '' + node;\n  attributes = attributes || {};\n\n  if (graph._nodes.has(node))\n    throw new UsageGraphError(\n      `Graph.addNode: the \"${node}\" node already exist in the graph.`\n    );\n\n  const data = new graph.NodeDataClass(node, attributes);\n\n  // Adding the node to internal register\n  graph._nodes.set(node, data);\n\n  // Emitting\n  graph.emit('nodeAdded', {\n    key: node,\n    attributes\n  });\n\n  return data;\n}\n\n/**\n * Same as the above but without sanity checks because we call this in contexts\n * where necessary checks were already done.\n */\nfunction unsafeAddNode(graph, node, attributes) {\n  const data = new graph.NodeDataClass(node, attributes);\n\n  graph._nodes.set(node, data);\n\n  graph.emit('nodeAdded', {\n    key: node,\n    attributes\n  });\n\n  return data;\n}\n\n/**\n * Internal method used to add an arbitrary edge to the given graph.\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {string}  name            - Name of the child method for errors.\n * @param  {boolean} mustGenerateKey - Should the graph generate an id?\n * @param  {boolean} undirected      - Whether the edge is undirected.\n * @param  {any}     edge            - The edge's key.\n * @param  {any}     source          - The source node.\n * @param  {any}     target          - The target node.\n * @param  {object}  [attributes]    - Optional attributes.\n * @return {any}                     - The edge.\n *\n * @throws {Error} - Will throw if the graph is of the wrong type.\n * @throws {Error} - Will throw if the given attributes are not an object.\n * @throws {Error} - Will throw if source or target doesn't exist.\n * @throws {Error} - Will throw if the edge already exist.\n */\nfunction addEdge(\n  graph,\n  name,\n  mustGenerateKey,\n  undirected,\n  edge,\n  source,\n  target,\n  attributes\n) {\n  // Checking validity of operation\n  if (!undirected && graph.type === 'undirected')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead.`\n    );\n\n  if (undirected && graph.type === 'directed')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead.`\n    );\n\n  if (attributes && !isPlainObject(attributes))\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: invalid attributes. Expecting an object but got \"${attributes}\"`\n    );\n\n  // Coercion of source & target:\n  source = '' + source;\n  target = '' + target;\n  attributes = attributes || {};\n\n  if (!graph.allowSelfLoops && source === target)\n    throw new UsageGraphError(\n      `Graph.${name}: source & target are the same (\"${source}\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`\n    );\n\n  const sourceData = graph._nodes.get(source),\n    targetData = graph._nodes.get(target);\n\n  if (!sourceData)\n    throw new NotFoundGraphError(\n      `Graph.${name}: source node \"${source}\" not found.`\n    );\n\n  if (!targetData)\n    throw new NotFoundGraphError(\n      `Graph.${name}: target node \"${target}\" not found.`\n    );\n\n  // Must the graph generate an id for this edge?\n  const eventData = {\n    key: null,\n    undirected,\n    source,\n    target,\n    attributes\n  };\n\n  if (mustGenerateKey) {\n    // NOTE: in this case we can guarantee that the key does not already\n    // exist and is already correctly casted as a string\n    edge = graph._edgeKeyGenerator();\n  } else {\n    // Coercion of edge key\n    edge = '' + edge;\n\n    // Here, we have a key collision\n    if (graph._edges.has(edge))\n      throw new UsageGraphError(\n        `Graph.${name}: the \"${edge}\" edge already exists in the graph.`\n      );\n  }\n\n  // Here, we might have a source / target collision\n  if (\n    !graph.multi &&\n    (undirected\n      ? typeof sourceData.undirected[target] !== 'undefined'\n      : typeof sourceData.out[target] !== 'undefined')\n  ) {\n    throw new UsageGraphError(\n      `Graph.${name}: an edge linking \"${source}\" to \"${target}\" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option.`\n    );\n  }\n\n  // Storing some data\n  const edgeData = new EdgeData(\n    undirected,\n    edge,\n    sourceData,\n    targetData,\n    attributes\n  );\n\n  // Adding the edge to the internal register\n  graph._edges.set(edge, edgeData);\n\n  // Incrementing node degree counters\n  const isSelfLoop = source === target;\n\n  if (undirected) {\n    sourceData.undirectedDegree++;\n    targetData.undirectedDegree++;\n\n    if (isSelfLoop) graph._undirectedSelfLoopCount++;\n  } else {\n    sourceData.outDegree++;\n    targetData.inDegree++;\n\n    if (isSelfLoop) graph._directedSelfLoopCount++;\n  }\n\n  // Updating relevant index\n  if (graph.multi) edgeData.attachMulti();\n  else edgeData.attach();\n\n  if (undirected) graph._undirectedSize++;\n  else graph._directedSize++;\n\n  // Emitting\n  eventData.key = edge;\n\n  graph.emit('edgeAdded', eventData);\n\n  return edge;\n}\n\n/**\n * Internal method used to add an arbitrary edge to the given graph.\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {string}  name            - Name of the child method for errors.\n * @param  {boolean} mustGenerateKey - Should the graph generate an id?\n * @param  {boolean} undirected      - Whether the edge is undirected.\n * @param  {any}     edge            - The edge's key.\n * @param  {any}     source          - The source node.\n * @param  {any}     target          - The target node.\n * @param  {object}  [attributes]    - Optional attributes.\n * @param  {boolean} [asUpdater]       - Are we updating or merging?\n * @return {any}                     - The edge.\n *\n * @throws {Error} - Will throw if the graph is of the wrong type.\n * @throws {Error} - Will throw if the given attributes are not an object.\n * @throws {Error} - Will throw if source or target doesn't exist.\n * @throws {Error} - Will throw if the edge already exist.\n */\nfunction mergeEdge(\n  graph,\n  name,\n  mustGenerateKey,\n  undirected,\n  edge,\n  source,\n  target,\n  attributes,\n  asUpdater\n) {\n  // Checking validity of operation\n  if (!undirected && graph.type === 'undirected')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot merge/update a directed edge to an undirected graph. Use the #.mergeEdge/#.updateEdge or #.addUndirectedEdge instead.`\n    );\n\n  if (undirected && graph.type === 'directed')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot merge/update an undirected edge to a directed graph. Use the #.mergeEdge/#.updateEdge or #.addDirectedEdge instead.`\n    );\n\n  if (attributes) {\n    if (asUpdater) {\n      if (typeof attributes !== 'function')\n        throw new InvalidArgumentsGraphError(\n          `Graph.${name}: invalid updater function. Expecting a function but got \"${attributes}\"`\n        );\n    } else {\n      if (!isPlainObject(attributes))\n        throw new InvalidArgumentsGraphError(\n          `Graph.${name}: invalid attributes. Expecting an object but got \"${attributes}\"`\n        );\n    }\n  }\n\n  // Coercion of source & target:\n  source = '' + source;\n  target = '' + target;\n\n  let updater;\n\n  if (asUpdater) {\n    updater = attributes;\n    attributes = undefined;\n  }\n\n  if (!graph.allowSelfLoops && source === target)\n    throw new UsageGraphError(\n      `Graph.${name}: source & target are the same (\"${source}\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`\n    );\n\n  let sourceData = graph._nodes.get(source);\n  let targetData = graph._nodes.get(target);\n  let edgeData;\n\n  // Do we need to handle duplicate?\n  let alreadyExistingEdgeData;\n\n  if (!mustGenerateKey) {\n    edgeData = graph._edges.get(edge);\n\n    if (edgeData) {\n      // Here, we need to ensure, if the user gave a key, that source & target\n      // are consistent\n      if (edgeData.source.key !== source || edgeData.target.key !== target) {\n        // If source or target inconsistent\n        if (\n          !undirected ||\n          edgeData.source.key !== target ||\n          edgeData.target.key !== source\n        ) {\n          // If directed, or source/target aren't flipped\n          throw new UsageGraphError(\n            `Graph.${name}: inconsistency detected when attempting to merge the \"${edge}\" edge with \"${source}\" source & \"${target}\" target vs. (\"${edgeData.source.key}\", \"${edgeData.target.key}\").`\n          );\n        }\n      }\n\n      alreadyExistingEdgeData = edgeData;\n    }\n  }\n\n  // Here, we might have a source / target collision\n  if (!alreadyExistingEdgeData && !graph.multi && sourceData) {\n    alreadyExistingEdgeData = undirected\n      ? sourceData.undirected[target]\n      : sourceData.out[target];\n  }\n\n  // Handling duplicates\n  if (alreadyExistingEdgeData) {\n    const info = [alreadyExistingEdgeData.key, false, false, false];\n\n    // We can skip the attribute merging part if the user did not provide them\n    if (asUpdater ? !updater : !attributes) return info;\n\n    // Updating the attributes\n    if (asUpdater) {\n      const oldAttributes = alreadyExistingEdgeData.attributes;\n      alreadyExistingEdgeData.attributes = updater(oldAttributes);\n\n      graph.emit('edgeAttributesUpdated', {\n        type: 'replace',\n        key: alreadyExistingEdgeData.key,\n        attributes: alreadyExistingEdgeData.attributes\n      });\n    }\n\n    // Merging the attributes\n    else {\n      assign(alreadyExistingEdgeData.attributes, attributes);\n\n      graph.emit('edgeAttributesUpdated', {\n        type: 'merge',\n        key: alreadyExistingEdgeData.key,\n        attributes: alreadyExistingEdgeData.attributes,\n        data: attributes\n      });\n    }\n\n    return info;\n  }\n\n  attributes = attributes || {};\n\n  if (asUpdater && updater) attributes = updater(attributes);\n\n  // Must the graph generate an id for this edge?\n  const eventData = {\n    key: null,\n    undirected,\n    source,\n    target,\n    attributes\n  };\n\n  if (mustGenerateKey) {\n    // NOTE: in this case we can guarantee that the key does not already\n    // exist and is already correctly casted as a string\n    edge = graph._edgeKeyGenerator();\n  } else {\n    // Coercion of edge key\n    edge = '' + edge;\n\n    // Here, we have a key collision\n    if (graph._edges.has(edge))\n      throw new UsageGraphError(\n        `Graph.${name}: the \"${edge}\" edge already exists in the graph.`\n      );\n  }\n\n  let sourceWasAdded = false;\n  let targetWasAdded = false;\n\n  if (!sourceData) {\n    sourceData = unsafeAddNode(graph, source, {});\n    sourceWasAdded = true;\n\n    if (source === target) {\n      targetData = sourceData;\n      targetWasAdded = true;\n    }\n  }\n  if (!targetData) {\n    targetData = unsafeAddNode(graph, target, {});\n    targetWasAdded = true;\n  }\n\n  // Storing some data\n  edgeData = new EdgeData(undirected, edge, sourceData, targetData, attributes);\n\n  // Adding the edge to the internal register\n  graph._edges.set(edge, edgeData);\n\n  // Incrementing node degree counters\n  const isSelfLoop = source === target;\n\n  if (undirected) {\n    sourceData.undirectedDegree++;\n    targetData.undirectedDegree++;\n\n    if (isSelfLoop) graph._undirectedSelfLoopCount++;\n  } else {\n    sourceData.outDegree++;\n    targetData.inDegree++;\n\n    if (isSelfLoop) graph._directedSelfLoopCount++;\n  }\n\n  // Updating relevant index\n  if (graph.multi) edgeData.attachMulti();\n  else edgeData.attach();\n\n  if (undirected) graph._undirectedSize++;\n  else graph._directedSize++;\n\n  // Emitting\n  eventData.key = edge;\n\n  graph.emit('edgeAdded', eventData);\n\n  return [edge, true, sourceWasAdded, targetWasAdded];\n}\n\n/**\n * Internal method used to drop an edge.\n *\n * @param  {Graph}    graph    - Target graph.\n * @param  {EdgeData} edgeData - Data of the edge to drop.\n */\nfunction dropEdgeFromData(graph, edgeData) {\n  // Dropping the edge from the register\n  graph._edges.delete(edgeData.key);\n\n  // Updating related degrees\n  const {source: sourceData, target: targetData, attributes} = edgeData;\n\n  const undirected = edgeData.undirected;\n\n  const isSelfLoop = sourceData === targetData;\n\n  if (undirected) {\n    sourceData.undirectedDegree--;\n    targetData.undirectedDegree--;\n\n    if (isSelfLoop) graph._undirectedSelfLoopCount--;\n  } else {\n    sourceData.outDegree--;\n    targetData.inDegree--;\n\n    if (isSelfLoop) graph._directedSelfLoopCount--;\n  }\n\n  // Clearing index\n  if (graph.multi) edgeData.detachMulti();\n  else edgeData.detach();\n\n  if (undirected) graph._undirectedSize--;\n  else graph._directedSize--;\n\n  // Emitting\n  graph.emit('edgeDropped', {\n    key: edgeData.key,\n    attributes,\n    source: sourceData.key,\n    target: targetData.key,\n    undirected\n  });\n}\n\n/**\n * Graph class\n *\n * @constructor\n * @param  {object}  [options] - Options:\n * @param  {boolean}   [allowSelfLoops] - Allow self loops?\n * @param  {string}    [type]           - Type of the graph.\n * @param  {boolean}   [map]            - Allow references as keys?\n * @param  {boolean}   [multi]          - Allow parallel edges?\n *\n * @throws {Error} - Will throw if the arguments are not valid.\n */\nexport default class Graph extends EventEmitter {\n  constructor(options) {\n    super();\n\n    //-- Solving options\n    options = assign({}, DEFAULTS, options);\n\n    // Enforcing options validity\n    if (typeof options.multi !== 'boolean')\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'multi' option. Expecting a boolean but got \"${options.multi}\".`\n      );\n\n    if (!TYPES.has(options.type))\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'type' option. Should be one of \"mixed\", \"directed\" or \"undirected\" but got \"${options.type}\".`\n      );\n\n    if (typeof options.allowSelfLoops !== 'boolean')\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got \"${options.allowSelfLoops}\".`\n      );\n\n    //-- Private properties\n\n    // Utilities\n    const NodeDataClass =\n      options.type === 'mixed'\n        ? MixedNodeData\n        : options.type === 'directed'\n        ? DirectedNodeData\n        : UndirectedNodeData;\n\n    privateProperty(this, 'NodeDataClass', NodeDataClass);\n\n    // Internal edge key generator\n\n    // NOTE: this internal generator produce keys that are strings\n    // composed of a weird prefix, an incremental instance id starting from\n    // a random byte and finally an internal instance incremental id.\n    // All this to avoid intra-frame and cross-frame adversarial inputs\n    // that can force a single #.addEdge call to degenerate into a O(n)\n    // available key search loop.\n\n    // It also ensures that automatically generated edge keys are unlikely\n    // to produce collisions with arbitrary keys given by users.\n    const instancePrefix = 'geid_' + INSTANCE_ID() + '_';\n    let edgeId = 0;\n\n    const edgeKeyGenerator = () => {\n      let availableEdgeKey;\n\n      do {\n        availableEdgeKey = instancePrefix + edgeId++;\n      } while (this._edges.has(availableEdgeKey));\n\n      return availableEdgeKey;\n    };\n\n    // Indexes\n    privateProperty(this, '_attributes', {});\n    privateProperty(this, '_nodes', new Map());\n    privateProperty(this, '_edges', new Map());\n    privateProperty(this, '_directedSize', 0);\n    privateProperty(this, '_undirectedSize', 0);\n    privateProperty(this, '_directedSelfLoopCount', 0);\n    privateProperty(this, '_undirectedSelfLoopCount', 0);\n    privateProperty(this, '_edgeKeyGenerator', edgeKeyGenerator);\n\n    // Options\n    privateProperty(this, '_options', options);\n\n    // Emitter properties\n    EMITTER_PROPS.forEach(prop => privateProperty(this, prop, this[prop]));\n\n    //-- Properties readers\n    readOnlyProperty(this, 'order', () => this._nodes.size);\n    readOnlyProperty(this, 'size', () => this._edges.size);\n    readOnlyProperty(this, 'directedSize', () => this._directedSize);\n    readOnlyProperty(this, 'undirectedSize', () => this._undirectedSize);\n    readOnlyProperty(\n      this,\n      'selfLoopCount',\n      () => this._directedSelfLoopCount + this._undirectedSelfLoopCount\n    );\n    readOnlyProperty(\n      this,\n      'directedSelfLoopCount',\n      () => this._directedSelfLoopCount\n    );\n    readOnlyProperty(\n      this,\n      'undirectedSelfLoopCount',\n      () => this._undirectedSelfLoopCount\n    );\n    readOnlyProperty(this, 'multi', this._options.multi);\n    readOnlyProperty(this, 'type', this._options.type);\n    readOnlyProperty(this, 'allowSelfLoops', this._options.allowSelfLoops);\n    readOnlyProperty(this, 'implementation', () => 'graphology');\n  }\n\n  _resetInstanceCounters() {\n    this._directedSize = 0;\n    this._undirectedSize = 0;\n    this._directedSelfLoopCount = 0;\n    this._undirectedSelfLoopCount = 0;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Read\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning whether the given node is found in the graph.\n   *\n   * @param  {any}     node - The node.\n   * @return {boolean}\n   */\n  hasNode(node) {\n    return this._nodes.has('' + node);\n  }\n\n  /**\n   * Method returning whether the given directed edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasDirectedEdge(source, target) {\n    // Early termination\n    if (this.type === 'undirected') return false;\n\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      const edgeData = this._edges.get(edge);\n\n      return !!edgeData && !edgeData.undirected;\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      const edges = nodeData.out[target];\n\n      if (!edges) return false;\n\n      return this.multi ? !!edges.size : true;\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning whether the given undirected edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasUndirectedEdge(source, target) {\n    // Early termination\n    if (this.type === 'directed') return false;\n\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      const edgeData = this._edges.get(edge);\n\n      return !!edgeData && edgeData.undirected;\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      const edges = nodeData.undirected[target];\n\n      if (!edges) return false;\n\n      return this.multi ? !!edges.size : true;\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning whether the given edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasEdge(source, target) {\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      return this._edges.has(edge);\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      let edges = typeof nodeData.out !== 'undefined' && nodeData.out[target];\n\n      if (!edges)\n        edges =\n          typeof nodeData.undirected !== 'undefined' &&\n          nodeData.undirected[target];\n\n      if (!edges) return false;\n\n      return this.multi ? !!edges.size : true;\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning the edge matching source & target in a directed fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  directedEdge(source, target) {\n    if (this.type === 'undirected') return;\n\n    source = '' + source;\n    target = '' + target;\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.'\n      );\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.directedEdge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.directedEdge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData = (sourceData.out && sourceData.out[target]) || undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning the edge matching source & target in a undirected fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  undirectedEdge(source, target) {\n    if (this.type === 'directed') return;\n\n    source = '' + source;\n    target = '' + target;\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.'\n      );\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedEdge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.undirectedEdge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData =\n      (sourceData.undirected && sourceData.undirected[target]) || undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning the edge matching source & target in a mixed fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  edge(source, target) {\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.'\n      );\n\n    source = '' + source;\n    target = '' + target;\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.edge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.edge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData =\n      (sourceData.out && sourceData.out[target]) ||\n      (sourceData.undirected && sourceData.undirected[target]) ||\n      undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning whether two nodes are directed neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areDirectedNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areDirectedNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.in || neighbor in nodeData.out;\n  }\n\n  /**\n   * Method returning whether two nodes are out neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areOutNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areOutNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.out;\n  }\n\n  /**\n   * Method returning whether two nodes are in neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areInNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areInNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.in;\n  }\n\n  /**\n   * Method returning whether two nodes are undirected neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areUndirectedNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areUndirectedNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return false;\n\n    return neighbor in nodeData.undirected;\n  }\n\n  /**\n   * Method returning whether two nodes are neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.in || neighbor in nodeData.out) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether two nodes are inbound neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areInboundNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areInboundNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.in) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether two nodes are outbound neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areOutboundNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areOutboundNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.out) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning the given node's in degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree;\n  }\n\n  /**\n   * Method returning the given node's out degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.outDegree;\n  }\n\n  /**\n   * Method returning the given node's directed degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  directedDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.directedDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree + nodeData.outDegree;\n  }\n\n  /**\n   * Method returning the given node's undirected degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  undirectedDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return 0;\n\n    return nodeData.undirectedDegree;\n  }\n\n  /**\n   * Method returning the given node's inbound degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's inbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inboundDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inboundDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given node's outbound degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's outbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outboundDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outboundDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.outDegree;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given node's directed degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  degree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.degree: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree + nodeData.outDegree;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given node's in degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    const self = nodeData.in[node];\n    const loops = self ? (this.multi ? self.size : 1) : 0;\n\n    return nodeData.inDegree - loops;\n  }\n\n  /**\n   * Method returning the given node's out degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    const self = nodeData.out[node];\n    const loops = self ? (this.multi ? self.size : 1) : 0;\n\n    return nodeData.outDegree - loops;\n  }\n\n  /**\n   * Method returning the given node's directed degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  directedDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.directedDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    const self = nodeData.out[node];\n    const loops = self ? (this.multi ? self.size : 1) : 0;\n\n    return nodeData.inDegree + nodeData.outDegree - loops * 2;\n  }\n\n  /**\n   * Method returning the given node's undirected degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  undirectedDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return 0;\n\n    const self = nodeData.undirected[node];\n    const loops = self ? (this.multi ? self.size : 1) : 0;\n\n    return nodeData.undirectedDegree - loops * 2;\n  }\n\n  /**\n   * Method returning the given node's inbound degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's inbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inboundDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inboundDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    let self;\n    let degree = 0;\n    let loops = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n\n      self = nodeData.undirected[node];\n      loops += (self ? (this.multi ? self.size : 1) : 0) * 2;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree;\n\n      self = nodeData.out[node];\n      loops += self ? (this.multi ? self.size : 1) : 0;\n    }\n\n    return degree - loops;\n  }\n\n  /**\n   * Method returning the given node's outbound degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's outbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outboundDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outboundDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    let self;\n    let degree = 0;\n    let loops = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n\n      self = nodeData.undirected[node];\n      loops += (self ? (this.multi ? self.size : 1) : 0) * 2;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.outDegree;\n\n      self = nodeData.in[node];\n      loops += self ? (this.multi ? self.size : 1) : 0;\n    }\n\n    return degree - loops;\n  }\n\n  /**\n   * Method returning the given node's directed degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  degreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.degreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    let self;\n    let degree = 0;\n    let loops = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n\n      self = nodeData.undirected[node];\n      loops += (self ? (this.multi ? self.size : 1) : 0) * 2;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree + nodeData.outDegree;\n\n      self = nodeData.out[node];\n      loops += (self ? (this.multi ? self.size : 1) : 0) * 2;\n    }\n\n    return degree - loops;\n  }\n\n  /**\n   * Method returning the given edge's source.\n   *\n   * @param  {any} edge - The edge's key.\n   * @return {any}      - The edge's source.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  source(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.source: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source.key;\n  }\n\n  /**\n   * Method returning the given edge's target.\n   *\n   * @param  {any} edge - The edge's key.\n   * @return {any}      - The edge's target.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  target(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.target: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.target.key;\n  }\n\n  /**\n   * Method returning the given edge's extremities.\n   *\n   * @param  {any}   edge - The edge's key.\n   * @return {array}      - The edge's extremities.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  extremities(edge) {\n    edge = '' + edge;\n\n    const edgeData = this._edges.get(edge);\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.extremities: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return [edgeData.source.key, edgeData.target.key];\n  }\n\n  /**\n   * Given a node & an edge, returns the other extremity of the edge.\n   *\n   * @param  {any}   node - The node's key.\n   * @param  {any}   edge - The edge's key.\n   * @return {any}        - The related node.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph or if the\n   *                   edge & node are not related.\n   */\n  opposite(node, edge) {\n    node = '' + node;\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.opposite: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    const source = data.source.key;\n    const target = data.target.key;\n\n    if (node === source) return target;\n    if (node === target) return source;\n\n    throw new NotFoundGraphError(\n      `Graph.opposite: the \"${node}\" node is not attached to the \"${edge}\" edge (${source}, ${target}).`\n    );\n  }\n\n  /**\n   * Returns whether the given edge has the given node as extremity.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @param  {any}     node - The node's key.\n   * @return {boolean}      - The related node.\n   *\n   * @throws {Error} - Will throw if either the node or the edge isn't in the graph.\n   */\n  hasExtremity(edge, node) {\n    edge = '' + edge;\n    node = '' + node;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.hasExtremity: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source.key === node || data.target.key === node;\n  }\n\n  /**\n   * Method returning whether the given edge is undirected.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isUndirected(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isUndirected: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.undirected;\n  }\n\n  /**\n   * Method returning whether the given edge is directed.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isDirected(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isDirected: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return !data.undirected;\n  }\n\n  /**\n   * Method returning whether the given edge is a self loop.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isSelfLoop(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isSelfLoop: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source === data.target;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Mutation\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used to add a node to the graph.\n   *\n   * @param  {any}    node         - The node.\n   * @param  {object} [attributes] - Optional attributes.\n   * @return {any}                 - The node.\n   *\n   * @throws {Error} - Will throw if the given node already exist.\n   * @throws {Error} - Will throw if the given attributes are not an object.\n   */\n  addNode(node, attributes) {\n    const nodeData = addNode(this, node, attributes);\n\n    return nodeData.key;\n  }\n\n  /**\n   * Method used to merge a node into the graph.\n   *\n   * @param  {any}    node         - The node.\n   * @param  {object} [attributes] - Optional attributes.\n   * @return {any}                 - The node.\n   */\n  mergeNode(node, attributes) {\n    if (attributes && !isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.mergeNode: invalid attributes. Expecting an object but got \"${attributes}\"`\n      );\n\n    // String coercion\n    node = '' + node;\n    attributes = attributes || {};\n\n    // If the node already exists, we merge the attributes\n    let data = this._nodes.get(node);\n\n    if (data) {\n      if (attributes) {\n        assign(data.attributes, attributes);\n\n        this.emit('nodeAttributesUpdated', {\n          type: 'merge',\n          key: node,\n          attributes: data.attributes,\n          data: attributes\n        });\n      }\n      return [node, false];\n    }\n\n    data = new this.NodeDataClass(node, attributes);\n\n    // Adding the node to internal register\n    this._nodes.set(node, data);\n\n    // Emitting\n    this.emit('nodeAdded', {\n      key: node,\n      attributes\n    });\n\n    return [node, true];\n  }\n\n  /**\n   * Method used to add a node if it does not exist in the graph or else to\n   * update its attributes using a function.\n   *\n   * @param  {any}      node      - The node.\n   * @param  {function} [updater] - Optional updater function.\n   * @return {any}                - The node.\n   */\n  updateNode(node, updater) {\n    if (updater && typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.updateNode: invalid updater function. Expecting a function but got \"${updater}\"`\n      );\n\n    // String coercion\n    node = '' + node;\n\n    // If the node already exists, we update the attributes\n    let data = this._nodes.get(node);\n\n    if (data) {\n      if (updater) {\n        const oldAttributes = data.attributes;\n        data.attributes = updater(oldAttributes);\n\n        this.emit('nodeAttributesUpdated', {\n          type: 'replace',\n          key: node,\n          attributes: data.attributes\n        });\n      }\n      return [node, false];\n    }\n\n    const attributes = updater ? updater({}) : {};\n\n    data = new this.NodeDataClass(node, attributes);\n\n    // Adding the node to internal register\n    this._nodes.set(node, data);\n\n    // Emitting\n    this.emit('nodeAdded', {\n      key: node,\n      attributes\n    });\n\n    return [node, true];\n  }\n\n  /**\n   * Method used to drop a single node & all its attached edges from the graph.\n   *\n   * @param  {any}    node - The node.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the node doesn't exist.\n   */\n  dropNode(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.dropNode: could not find the \"${node}\" node in the graph.`\n      );\n\n    let edgeData;\n\n    // Removing attached edges\n    // NOTE: we could be faster here, but this is such a pain to maintain\n    if (this.type !== 'undirected') {\n      for (const neighbor in nodeData.out) {\n        edgeData = nodeData.out[neighbor];\n\n        do {\n          dropEdgeFromData(this, edgeData);\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n\n      for (const neighbor in nodeData.in) {\n        edgeData = nodeData.in[neighbor];\n\n        do {\n          dropEdgeFromData(this, edgeData);\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    if (this.type !== 'directed') {\n      for (const neighbor in nodeData.undirected) {\n        edgeData = nodeData.undirected[neighbor];\n\n        do {\n          dropEdgeFromData(this, edgeData);\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    // Dropping the node from the register\n    this._nodes.delete(node);\n\n    // Emitting\n    this.emit('nodeDropped', {\n      key: node,\n      attributes: nodeData.attributes\n    });\n  }\n\n  /**\n   * Method used to drop a single edge from the graph.\n   *\n   * Arity 1:\n   * @param  {any}    edge - The edge.\n   *\n   * Arity 2:\n   * @param  {any}    source - Source node.\n   * @param  {any}    target - Target node.\n   *\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the edge doesn't exist.\n   */\n  dropEdge(edge) {\n    let edgeData;\n\n    if (arguments.length > 1) {\n      const source = '' + arguments[0];\n      const target = '' + arguments[1];\n\n      edgeData = getMatchingEdge(this, source, target, this.type);\n\n      if (!edgeData)\n        throw new NotFoundGraphError(\n          `Graph.dropEdge: could not find the \"${source}\" -> \"${target}\" edge in the graph.`\n        );\n    } else {\n      edge = '' + edge;\n\n      edgeData = this._edges.get(edge);\n\n      if (!edgeData)\n        throw new NotFoundGraphError(\n          `Graph.dropEdge: could not find the \"${edge}\" edge in the graph.`\n        );\n    }\n\n    dropEdgeFromData(this, edgeData);\n\n    return this;\n  }\n\n  /**\n   * Method used to drop a single directed edge from the graph.\n   *\n   * @param  {any}    source - Source node.\n   * @param  {any}    target - Target node.\n   *\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the edge doesn't exist.\n   */\n  dropDirectedEdge(source, target) {\n    if (arguments.length < 2)\n      throw new UsageGraphError(\n        'Graph.dropDirectedEdge: it does not make sense to try and drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.'\n      );\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.dropDirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.'\n      );\n\n    source = '' + source;\n    target = '' + target;\n\n    const edgeData = getMatchingEdge(this, source, target, 'directed');\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.dropDirectedEdge: could not find a \"${source}\" -> \"${target}\" edge in the graph.`\n      );\n\n    dropEdgeFromData(this, edgeData);\n\n    return this;\n  }\n\n  /**\n   * Method used to drop a single undirected edge from the graph.\n   *\n   * @param  {any}    source - Source node.\n   * @param  {any}    target - Target node.\n   *\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the edge doesn't exist.\n   */\n  dropUndirectedEdge(source, target) {\n    if (arguments.length < 2)\n      throw new UsageGraphError(\n        'Graph.dropUndirectedEdge: it does not make sense to drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.'\n      );\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.dropUndirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.'\n      );\n\n    const edgeData = getMatchingEdge(this, source, target, 'undirected');\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.dropUndirectedEdge: could not find a \"${source}\" -> \"${target}\" edge in the graph.`\n      );\n\n    dropEdgeFromData(this, edgeData);\n\n    return this;\n  }\n\n  /**\n   * Method used to remove every edge & every node from the graph.\n   *\n   * @return {Graph}\n   */\n  clear() {\n    // Clearing edges\n    this._edges.clear();\n\n    // Clearing nodes\n    this._nodes.clear();\n\n    // Reset counters\n    this._resetInstanceCounters();\n\n    // Emitting\n    this.emit('cleared');\n  }\n\n  /**\n   * Method used to remove every edge from the graph.\n   *\n   * @return {Graph}\n   */\n  clearEdges() {\n    // Clearing structure index\n    const iterator = this._nodes.values();\n\n    let step;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      step.value.clear();\n    }\n\n    // Clearing edges\n    this._edges.clear();\n\n    // Reset counters\n    this._resetInstanceCounters();\n\n    // Emitting\n    this.emit('edgesCleared');\n  }\n\n  /**---------------------------------------------------------------------------\n   * Attributes-related methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning the desired graph's attribute.\n   *\n   * @param  {string} name - Name of the attribute.\n   * @return {any}\n   */\n  getAttribute(name) {\n    return this._attributes[name];\n  }\n\n  /**\n   * Method returning the graph's attributes.\n   *\n   * @return {object}\n   */\n  getAttributes() {\n    return this._attributes;\n  }\n\n  /**\n   * Method returning whether the graph has the desired attribute.\n   *\n   * @param  {string}  name - Name of the attribute.\n   * @return {boolean}\n   */\n  hasAttribute(name) {\n    return this._attributes.hasOwnProperty(name);\n  }\n\n  /**\n   * Method setting a value for the desired graph's attribute.\n   *\n   * @param  {string}  name  - Name of the attribute.\n   * @param  {any}     value - Value for the attribute.\n   * @return {Graph}\n   */\n  setAttribute(name, value) {\n    this._attributes[name] = value;\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'set',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method using a function to update the desired graph's attribute's value.\n   *\n   * @param  {string}   name    - Name of the attribute.\n   * @param  {function} updater - Function use to update the attribute's value.\n   * @return {Graph}\n   */\n  updateAttribute(name, updater) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateAttribute: updater should be a function.'\n      );\n\n    const value = this._attributes[name];\n\n    this._attributes[name] = updater(value);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'set',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method removing the desired graph's attribute.\n   *\n   * @param  {string} name  - Name of the attribute.\n   * @return {Graph}\n   */\n  removeAttribute(name) {\n    delete this._attributes[name];\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'remove',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method replacing the graph's attributes.\n   *\n   * @param  {object} attributes - New attributes.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given attributes are not a plain object.\n   */\n  replaceAttributes(attributes) {\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        'Graph.replaceAttributes: provided attributes are not a plain object.'\n      );\n\n    this._attributes = attributes;\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'replace',\n      attributes: this._attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method merging the graph's attributes.\n   *\n   * @param  {object} attributes - Attributes to merge.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given attributes are not a plain object.\n   */\n  mergeAttributes(attributes) {\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        'Graph.mergeAttributes: provided attributes are not a plain object.'\n      );\n\n    assign(this._attributes, attributes);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'merge',\n      attributes: this._attributes,\n      data: attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method updating the graph's attributes.\n   *\n   * @param  {function} updater - Function used to update the attributes.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given updater is not a function.\n   */\n  updateAttributes(updater) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateAttributes: provided updater is not a function.'\n      );\n\n    this._attributes = updater(this._attributes);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'update',\n      attributes: this._attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method used to update each node's attributes using the given function.\n   *\n   * @param {function}  updater - Updater function to use.\n   * @param {object}    [hints] - Optional hints.\n   */\n  updateEachNodeAttributes(updater, hints) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachNodeAttributes: expecting an updater function.'\n      );\n\n    if (hints && !validateHints(hints))\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      nodeData.attributes = updater(nodeData.key, nodeData.attributes);\n    }\n\n    this.emit('eachNodeAttributesUpdated', {\n      hints: hints ? hints : null\n    });\n  }\n\n  /**\n   * Method used to update each edge's attributes using the given function.\n   *\n   * @param {function}  updater - Updater function to use.\n   * @param {object}    [hints] - Optional hints.\n   */\n  updateEachEdgeAttributes(updater, hints) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachEdgeAttributes: expecting an updater function.'\n      );\n\n    if (hints && !validateHints(hints))\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}'\n      );\n\n    const iterator = this._edges.values();\n\n    let step, edgeData, sourceData, targetData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      edgeData = step.value;\n      sourceData = edgeData.source;\n      targetData = edgeData.target;\n\n      edgeData.attributes = updater(\n        edgeData.key,\n        edgeData.attributes,\n        sourceData.key,\n        targetData.key,\n        sourceData.attributes,\n        targetData.attributes,\n        edgeData.undirected\n      );\n    }\n\n    this.emit('eachEdgeAttributesUpdated', {\n      hints: hints ? hints : null\n    });\n  }\n\n  /**---------------------------------------------------------------------------\n   * Iteration-related methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method iterating over the graph's adjacency using the given callback.\n   *\n   * @param  {function}  callback - Callback to use.\n   */\n  forEachAdjacencyEntry(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAdjacencyEntry: expecting a callback.'\n      );\n\n    forEachAdjacency(false, false, false, this, callback);\n  }\n  forEachAdjacencyEntryWithOrphans(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAdjacencyEntryWithOrphans: expecting a callback.'\n      );\n\n    forEachAdjacency(false, false, true, this, callback);\n  }\n\n  /**\n   * Method iterating over the graph's assymetric adjacency using the given callback.\n   *\n   * @param  {function}  callback - Callback to use.\n   */\n  forEachAssymetricAdjacencyEntry(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAssymetricAdjacencyEntry: expecting a callback.'\n      );\n\n    forEachAdjacency(false, true, false, this, callback);\n  }\n  forEachAssymetricAdjacencyEntryWithOrphans(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAssymetricAdjacencyEntryWithOrphans: expecting a callback.'\n      );\n\n    forEachAdjacency(false, true, true, this, callback);\n  }\n\n  /**\n   * Method returning the list of the graph's nodes.\n   *\n   * @return {array} - The nodes.\n   */\n  nodes() {\n    if (typeof Array.from === 'function') return Array.from(this._nodes.keys());\n\n    return take(this._nodes.keys(), this._nodes.size);\n  }\n\n  /**\n   * Method iterating over the graph's nodes using the given callback.\n   *\n   * @param  {function}  callback - Callback (key, attributes, index).\n   */\n  forEachNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      callback(nodeData.key, nodeData.attributes);\n    }\n  }\n\n  /**\n   * Method iterating attempting to find a node matching the given predicate\n   * function.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  findNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.findNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes)) return nodeData.key;\n    }\n\n    return;\n  }\n\n  /**\n   * Method mapping nodes.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  mapNodes(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.mapNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    const result = new Array(this.order);\n    let i = 0;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      result[i++] = callback(nodeData.key, nodeData.attributes);\n    }\n\n    return result;\n  }\n\n  /**\n   * Method returning whether some node verify the given predicate.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  someNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.someNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes)) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether all node verify the given predicate.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  everyNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.everyNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (!callback(nodeData.key, nodeData.attributes)) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Method filtering nodes.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  filterNodes(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.filterNodes: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    const result = [];\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes))\n        result.push(nodeData.key);\n    }\n\n    return result;\n  }\n\n  /**\n   * Method reducing nodes.\n   *\n   * @param  {function}  callback - Callback (accumulator, key, attributes).\n   */\n  reduceNodes(callback, initialValue) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.reduceNodes: expecting a callback.'\n      );\n\n    if (arguments.length < 2)\n      throw new InvalidArgumentsGraphError(\n        'Graph.reduceNodes: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.'\n      );\n\n    let accumulator = initialValue;\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      accumulator = callback(accumulator, nodeData.key, nodeData.attributes);\n    }\n\n    return accumulator;\n  }\n\n  /**\n   * Method returning an iterator over the graph's node entries.\n   *\n   * @return {Iterator}\n   */\n  nodeEntries() {\n    const iterator = this._nodes.values();\n\n    return new Iterator(() => {\n      const step = iterator.next();\n\n      if (step.done) return step;\n\n      const data = step.value;\n\n      return {\n        value: {node: data.key, attributes: data.attributes},\n        done: false\n      };\n    });\n  }\n\n  /**---------------------------------------------------------------------------\n   * Serialization\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used to export the whole graph.\n   *\n   * @return {object} - The serialized graph.\n   */\n  export() {\n    const nodes = new Array(this._nodes.size);\n\n    let i = 0;\n\n    this._nodes.forEach((data, key) => {\n      nodes[i++] = serializeNode(key, data);\n    });\n\n    const edges = new Array(this._edges.size);\n\n    i = 0;\n\n    this._edges.forEach((data, key) => {\n      edges[i++] = serializeEdge(this.type, key, data);\n    });\n\n    return {\n      options: {\n        type: this.type,\n        multi: this.multi,\n        allowSelfLoops: this.allowSelfLoops\n      },\n      attributes: this.getAttributes(),\n      nodes,\n      edges\n    };\n  }\n\n  /**\n   * Method used to import a serialized graph.\n   *\n   * @param  {object|Graph} data  - The serialized graph.\n   * @param  {boolean}      merge - Whether to merge data.\n   * @return {Graph}              - Returns itself for chaining.\n   */\n  import(data, merge = false) {\n    // Importing a Graph instance directly\n    if (data instanceof Graph) {\n      // Nodes\n      data.forEachNode((n, a) => {\n        if (merge) this.mergeNode(n, a);\n        else this.addNode(n, a);\n      });\n\n      // Edges\n      data.forEachEdge((e, a, s, t, _sa, _ta, u) => {\n        if (merge) {\n          if (u) this.mergeUndirectedEdgeWithKey(e, s, t, a);\n          else this.mergeDirectedEdgeWithKey(e, s, t, a);\n        } else {\n          if (u) this.addUndirectedEdgeWithKey(e, s, t, a);\n          else this.addDirectedEdgeWithKey(e, s, t, a);\n        }\n      });\n\n      return this;\n    }\n\n    // Importing a serialized graph\n    if (!isPlainObject(data))\n      throw new InvalidArgumentsGraphError(\n        'Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.'\n      );\n\n    if (data.attributes) {\n      if (!isPlainObject(data.attributes))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid attributes. Expecting a plain object.'\n        );\n\n      if (merge) this.mergeAttributes(data.attributes);\n      else this.replaceAttributes(data.attributes);\n    }\n\n    let i, l, list, node, edge;\n\n    if (data.nodes) {\n      list = data.nodes;\n\n      if (!Array.isArray(list))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid nodes. Expecting an array.'\n        );\n\n      for (i = 0, l = list.length; i < l; i++) {\n        node = list[i];\n\n        // Validating\n        validateSerializedNode(node);\n\n        // Adding the node\n        const {key, attributes} = node;\n\n        if (merge) this.mergeNode(key, attributes);\n        else this.addNode(key, attributes);\n      }\n    }\n\n    if (data.edges) {\n      let undirectedByDefault = false;\n\n      if (this.type === 'undirected') {\n        undirectedByDefault = true;\n      }\n\n      list = data.edges;\n\n      if (!Array.isArray(list))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid edges. Expecting an array.'\n        );\n\n      for (i = 0, l = list.length; i < l; i++) {\n        edge = list[i];\n\n        // Validating\n        validateSerializedEdge(edge);\n\n        // Adding the edge\n        const {\n          source,\n          target,\n          attributes,\n          undirected = undirectedByDefault\n        } = edge;\n\n        let method;\n\n        if ('key' in edge) {\n          method = merge\n            ? undirected\n              ? this.mergeUndirectedEdgeWithKey\n              : this.mergeDirectedEdgeWithKey\n            : undirected\n            ? this.addUndirectedEdgeWithKey\n            : this.addDirectedEdgeWithKey;\n\n          method.call(this, edge.key, source, target, attributes);\n        } else {\n          method = merge\n            ? undirected\n              ? this.mergeUndirectedEdge\n              : this.mergeDirectedEdge\n            : undirected\n            ? this.addUndirectedEdge\n            : this.addDirectedEdge;\n\n          method.call(this, source, target, attributes);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Utils\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning a null copy of the graph, i.e. a graph without nodes\n   * & edges but with the exact same options.\n   *\n   * @param  {object} options - Options to merge with the current ones.\n   * @return {Graph}          - The null copy.\n   */\n  nullCopy(options) {\n    const graph = new Graph(assign({}, this._options, options));\n    graph.replaceAttributes(assign({}, this.getAttributes()));\n    return graph;\n  }\n\n  /**\n   * Method returning an empty copy of the graph, i.e. a graph without edges but\n   * with the exact same options.\n   *\n   * @param  {object} options - Options to merge with the current ones.\n   * @return {Graph}          - The empty copy.\n   */\n  emptyCopy(options) {\n    const graph = this.nullCopy(options);\n\n    this._nodes.forEach((nodeData, key) => {\n      const attributes = assign({}, nodeData.attributes);\n\n      // NOTE: no need to emit events since user cannot access the instance yet\n      nodeData = new graph.NodeDataClass(key, attributes);\n      graph._nodes.set(key, nodeData);\n    });\n\n    return graph;\n  }\n\n  /**\n   * Method returning an exact copy of the graph.\n   *\n   * @param  {object} options - Upgrade options.\n   * @return {Graph}          - The copy.\n   */\n  copy(options) {\n    options = options || {};\n\n    if (\n      typeof options.type === 'string' &&\n      options.type !== this.type &&\n      options.type !== 'mixed'\n    )\n      throw new UsageGraphError(\n        `Graph.copy: cannot create an incompatible copy from \"${this.type}\" type to \"${options.type}\" because this would mean losing information about the current graph.`\n      );\n\n    if (\n      typeof options.multi === 'boolean' &&\n      options.multi !== this.multi &&\n      options.multi !== true\n    )\n      throw new UsageGraphError(\n        'Graph.copy: cannot create an incompatible copy by downgrading a multi graph to a simple one because this would mean losing information about the current graph.'\n      );\n\n    if (\n      typeof options.allowSelfLoops === 'boolean' &&\n      options.allowSelfLoops !== this.allowSelfLoops &&\n      options.allowSelfLoops !== true\n    )\n      throw new UsageGraphError(\n        'Graph.copy: cannot create an incompatible copy from a graph allowing self loops to one that does not because this would mean losing information about the current graph.'\n      );\n\n    const graph = this.emptyCopy(options);\n\n    const iterator = this._edges.values();\n\n    let step, edgeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      edgeData = step.value;\n\n      // NOTE: no need to emit events since user cannot access the instance yet\n      addEdge(\n        graph,\n        'copy',\n        false,\n        edgeData.undirected,\n        edgeData.key,\n        edgeData.source.key,\n        edgeData.target.key,\n        assign({}, edgeData.attributes)\n      );\n    }\n\n    return graph;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Known methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used by JavaScript to perform JSON serialization.\n   *\n   * @return {object} - The serialized graph.\n   */\n  toJSON() {\n    return this.export();\n  }\n\n  /**\n   * Method returning [object Graph].\n   */\n  toString() {\n    return '[object Graph]';\n  }\n\n  /**\n   * Method used internally by node's console to display a custom object.\n   *\n   * @return {object} - Formatted object representation of the graph.\n   */\n  inspect() {\n    const nodes = {};\n    this._nodes.forEach((data, key) => {\n      nodes[key] = data.attributes;\n    });\n\n    const edges = {},\n      multiIndex = {};\n\n    this._edges.forEach((data, key) => {\n      const direction = data.undirected ? '--' : '->';\n\n      let label = '';\n\n      let source = data.source.key;\n      let target = data.target.key;\n      let tmp;\n\n      if (data.undirected && source > target) {\n        tmp = source;\n        source = target;\n        target = tmp;\n      }\n\n      const desc = `(${source})${direction}(${target})`;\n\n      if (!key.startsWith('geid_')) {\n        label += `[${key}]: `;\n      } else if (this.multi) {\n        if (typeof multiIndex[desc] === 'undefined') {\n          multiIndex[desc] = 0;\n        } else {\n          multiIndex[desc]++;\n        }\n\n        label += `${multiIndex[desc]}. `;\n      }\n\n      label += desc;\n\n      edges[label] = data.attributes;\n    });\n\n    const dummy = {};\n\n    for (const k in this) {\n      if (\n        this.hasOwnProperty(k) &&\n        !EMITTER_PROPS.has(k) &&\n        typeof this[k] !== 'function' &&\n        typeof k !== 'symbol'\n      )\n        dummy[k] = this[k];\n    }\n\n    dummy.attributes = this._attributes;\n    dummy.nodes = nodes;\n    dummy.edges = edges;\n\n    privateProperty(dummy, 'constructor', this.constructor);\n\n    return dummy;\n  }\n}\n\n/**\n * Attaching methods to the prototype.\n *\n * Here, we are attaching a wide variety of methods to the Graph class'\n * prototype when those are very numerous and when their creation is\n * abstracted.\n */\n\n/**\n * Attaching custom inspect method for node >= 10.\n */\nif (typeof Symbol !== 'undefined')\n  Graph.prototype[Symbol.for('nodejs.util.inspect.custom')] =\n    Graph.prototype.inspect;\n\n/**\n * Related to edge addition.\n */\nEDGE_ADD_METHODS.forEach(method => {\n  ['add', 'merge', 'update'].forEach(verb => {\n    const name = method.name(verb);\n    const fn = verb === 'add' ? addEdge : mergeEdge;\n\n    if (method.generateKey) {\n      Graph.prototype[name] = function (source, target, attributes) {\n        return fn(\n          this,\n          name,\n          true,\n          (method.type || this.type) === 'undirected',\n          null,\n          source,\n          target,\n          attributes,\n          verb === 'update'\n        );\n      };\n    } else {\n      Graph.prototype[name] = function (edge, source, target, attributes) {\n        return fn(\n          this,\n          name,\n          false,\n          (method.type || this.type) === 'undirected',\n          edge,\n          source,\n          target,\n          attributes,\n          verb === 'update'\n        );\n      };\n    }\n  });\n});\n\n/**\n * Attributes-related.\n */\nattachNodeAttributesMethods(Graph);\nattachEdgeAttributesMethods(Graph);\n\n/**\n * Edge iteration-related.\n */\nattachEdgeIterationMethods(Graph);\n\n/**\n * Neighbor iteration-related.\n */\nattachNeighborIterationMethods(Graph);\n","/**\n * Graphology Helper Classes\n * ==========================\n *\n * Building some higher-order classes instantiating the graph with\n * predefinite options.\n */\nimport {assign} from './utils';\nimport Graph from './graph';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\n/**\n * Alternative constructors.\n */\nclass DirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'directed'}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== false)\n      throw new InvalidArgumentsGraphError(\n        'DirectedGraph.from: inconsistent indication that the graph should be multi in given options!'\n      );\n\n    if (finalOptions.type !== 'directed')\n      throw new InvalidArgumentsGraphError(\n        'DirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass UndirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'undirected'}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== false)\n      throw new InvalidArgumentsGraphError(\n        'UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!'\n      );\n\n    if (finalOptions.type !== 'undirected')\n      throw new InvalidArgumentsGraphError(\n        'UndirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiDirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'directed', multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    if (finalOptions.type !== 'directed')\n      throw new InvalidArgumentsGraphError(\n        'MultiDirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiUndirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'undirected', multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    if (finalOptions.type !== 'undirected')\n      throw new InvalidArgumentsGraphError(\n        'MultiUndirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\n\n/**\n * Attaching static #.from method to each of the constructors.\n */\nfunction attachStaticFromMethod(Class) {\n  /**\n   * Builds a graph from serialized data or another graph's data.\n   *\n   * @param  {Graph|SerializedGraph} data      - Hydratation data.\n   * @param  {object}                [options] - Options.\n   * @return {Class}\n   */\n  Class.from = function (data, options) {\n    // Merging given options with serialized ones\n    const finalOptions = assign({}, data.options, options);\n\n    const instance = new Class(finalOptions);\n    instance.import(data);\n\n    return instance;\n  };\n}\n\nattachStaticFromMethod(Graph);\nattachStaticFromMethod(DirectedGraph);\nattachStaticFromMethod(UndirectedGraph);\nattachStaticFromMethod(MultiGraph);\nattachStaticFromMethod(MultiDirectedGraph);\nattachStaticFromMethod(MultiUndirectedGraph);\n\nGraph.Graph = Graph;\nGraph.DirectedGraph = DirectedGraph;\nGraph.UndirectedGraph = UndirectedGraph;\nGraph.MultiGraph = MultiGraph;\nGraph.MultiDirectedGraph = MultiDirectedGraph;\nGraph.MultiUndirectedGraph = MultiUndirectedGraph;\n\nGraph.InvalidArgumentsGraphError = InvalidArgumentsGraphError;\nGraph.NotFoundGraphError = NotFoundGraphError;\nGraph.UsageGraphError = UsageGraphError;\n\nexport {\n  Graph,\n  DirectedGraph,\n  UndirectedGraph,\n  MultiGraph,\n  MultiDirectedGraph,\n  MultiUndirectedGraph\n};\n","/**\n * Graphology CommonJS Endoint\n * ============================\n *\n * Endpoint for CommonJS modules consumers.\n */\nimport {Graph} from './classes';\n\nexport default Graph;\n"],"names":["assignPolyfill","target","arguments","i","l","length","k","assign","Object","getMatchingEdge","graph","source","type","sourceData","_nodes","get","edge","out","undirected","isPlainObject","value","constructor","isEmpty","o","privateProperty","name","defineProperty","enumerable","configurable","writable","readOnlyProperty","descriptor","validateHints","hints","attributes","Array","isArray","incrementalIdStartingFromRandomByte","Math","floor","random","R","Reflect","ReflectApply","apply","receiver","args","Function","prototype","call","ReflectOwnKeys","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","concat","ProcessEmitWarning","warning","console","warn","NumberIsNaN","Number","isNaN","EventEmitter","init","eventsModule","exports","events","once","_events","undefined","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","listener","TypeError","set","arg","RangeError","getPrototypeOf","create","setMaxListeners","n","_getMaxListeners","that","getMaxListeners","emit","push","doError","error","er","Error","err","message","context","handler","len","listeners","arrayClone","_addListener","prepend","m","existing","newListener","unshift","warned","w","String","emitter","count","addListener","on","prependListener","onceWrapper","fired","removeListener","wrapFn","_onceWrap","state","wrapped","bind","prependOnceListener","list","position","originalListener","shift","spliceOne","off","removeAllListeners","keys","key","_listeners","unwrap","evlistener","unwrapListeners","rawListeners","listenerCount","eventNames","arr","copy","index","pop","ret","Promise","resolve","reject","errorListener","resolver","slice","eventTargetAgnosticAddListener","addErrorHandlerIfEventEmitter","flags","addEventListener","wrapListener","removeEventListener","Iterator","next","Symbol","iterator","of","done","empty","fromSequence","sequence","is","support","ARRAY_BUFFER_SUPPORT","ArrayBuffer","SYMBOL_SUPPORT","require$$0","require$$1","iterOrNull","isView","iter","take","iterable","Infinity","array","step","GraphError","InvalidArgumentsGraphError","captureStackTrace","NotFoundGraphError","UsageGraphError","MixedNodeData","clear","inDegree","outDegree","undirectedDegree","DirectedNodeData","UndirectedNodeData","EdgeData","attach","outKey","inKey","attachMulti","adj","head","previous","detach","detachMulti","NODE","SOURCE","TARGET","OPPOSITE","findRelevantNodeData","method","mode","nodeOrEdge","nameOrEdge","add1","add2","nodeData","edgeData","arg1","arg2","_edges","attachNodeAttributeGetter","Class","data","attachNodeAttributesGetter","attachNodeAttributeChecker","hasOwnProperty","attachNodeAttributeSetter","attachNodeAttributeUpdater","updater","attachNodeAttributeRemover","attachNodeAttributesReplacer","attachNodeAttributesMerger","attachNodeAttributesUpdater","NODE_ATTRIBUTES_METHODS","element","attacher","attachNodeAttributesMethods","Graph","forEach","attachEdgeAttributeGetter","multi","attachEdgeAttributesGetter","attachEdgeAttributeChecker","attachEdgeAttributeSetter","attachEdgeAttributeUpdater","attachEdgeAttributeRemover","attachEdgeAttributesReplacer","attachEdgeAttributesMerger","attachEdgeAttributesUpdater","EDGE_ATTRIBUTES_METHODS","attachEdgeAttributesMethods","chain","iterables","current","EDGES_ITERATION","direction","forEachSimple","breakable","object","callback","avoid","shouldBreak","forEachMulti","createIterator","sourceAttributes","targetAttributes","forEachForKeySimple","targetData","forEachForKeyMulti","createIteratorForKey","createEdgeArray","size","from","undirectedSize","directedSize","mask","values","forEachEdge","shouldFilter","createEdgeIterator","forEachEdgeForNode","fn","found","createEdgeArrayForNode","edges","createEdgeIteratorForNode","forEachEdgeForPath","createEdgeArrayForPath","createEdgeIteratorForPath","attachEdgeArrayCreator","description","has","attachForEachEdge","forEachName","toUpperCase","mapName","result","e","ea","s","t","sa","ta","u","filterName","reduceName","initialValue","accumulator","attachFindEdge","findEdgeName","someName","everyName","attachEdgeIteratorCreator","originalName","attachEdgeIterationMethods","NEIGHBORS_ITERATION","CompositeSetWrapper","A","B","wrap","forEachInObjectOnce","visited","neighborData","forEachNeighbor","createNeighborArrayForNode","neighbors","createDedupedObjectIterator","neighbor","createNeighborIterator","attachNeighborArrayCreator","node","attachForEachNeighbor","a","attachFindNeighbor","capitalizedSingular","findName","attachNeighborIteratorCreator","iteratorName","attachNeighborIterationMethods","forEachAdjacency","assymetric","disconnectedNodes","hasEdges","serializeNode","serialized","serializeEdge","validateSerializedNode","validateSerializedEdge","INSTANCE_ID","TYPES","Set","EMITTER_PROPS","EDGE_ADD_METHODS","verb","generateKey","DEFAULTS","allowSelfLoops","addNode","NodeDataClass","unsafeAddNode","addEdge","mustGenerateKey","eventData","_edgeKeyGenerator","isSelfLoop","_undirectedSelfLoopCount","_directedSelfLoopCount","_undirectedSize","_directedSize","mergeEdge","asUpdater","alreadyExistingEdgeData","info","oldAttributes","sourceWasAdded","targetWasAdded","dropEdgeFromData","options","instancePrefix","edgeId","edgeKeyGenerator","availableEdgeKey","Map","prop","_options","_resetInstanceCounters","hasNode","hasDirectedEdge","hasUndirectedEdge","hasEdge","directedEdge","undirectedEdge","areDirectedNeighbors","areOutNeighbors","areInNeighbors","areUndirectedNeighbors","areNeighbors","areInboundNeighbors","areOutboundNeighbors","directedDegree","inboundDegree","degree","outboundDegree","inDegreeWithoutSelfLoops","self","loops","outDegreeWithoutSelfLoops","directedDegreeWithoutSelfLoops","undirectedDegreeWithoutSelfLoops","inboundDegreeWithoutSelfLoops","outboundDegreeWithoutSelfLoops","degreeWithoutSelfLoops","extremities","opposite","hasExtremity","isUndirected","isDirected","mergeNode","updateNode","dropNode","dropEdge","dropDirectedEdge","dropUndirectedEdge","clearEdges","getAttribute","_attributes","getAttributes","hasAttribute","setAttribute","updateAttribute","removeAttribute","replaceAttributes","mergeAttributes","updateAttributes","updateEachNodeAttributes","updateEachEdgeAttributes","forEachAdjacencyEntry","forEachAdjacencyEntryWithOrphans","forEachAssymetricAdjacencyEntry","forEachAssymetricAdjacencyEntryWithOrphans","nodes","forEachNode","findNode","mapNodes","order","someNode","everyNode","filterNodes","reduceNodes","nodeEntries","merge","_sa","_ta","mergeUndirectedEdgeWithKey","mergeDirectedEdgeWithKey","addUndirectedEdgeWithKey","addDirectedEdgeWithKey","undirectedByDefault","mergeUndirectedEdge","mergeDirectedEdge","addUndirectedEdge","addDirectedEdge","nullCopy","emptyCopy","toJSON","toString","inspect","multiIndex","label","tmp","desc","startsWith","dummy","DirectedGraph","finalOptions","UndirectedGraph","MultiGraph","MultiDirectedGraph","MultiUndirectedGraph","attachStaticFromMethod","instance"],"mappings":"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"}