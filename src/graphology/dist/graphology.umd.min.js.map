{"version":3,"file":"graphology.umd.min.js","sources":["../src/utils.js","../../../node_modules/events/events.js","../../../node_modules/obliterator/iterator.js","../../../node_modules/obliterator/support.js","../../../node_modules/obliterator/iter.js","../../../node_modules/obliterator/take.js","../src/errors.js","../src/data.js","../src/attributes/nodes.js","../src/attributes/edges.js","../../../node_modules/obliterator/chain.js","../src/iteration/edges.js","../src/iteration/neighbors.js","../src/iteration/adjacency.js","../src/serialization.js","../src/graph.js","../src/classes.js"],"sourcesContent":["/**\n * Graphology Utilities\n * =====================\n *\n * Collection of helpful functions used by the implementation.\n */\n\n/**\n * Object.assign-like polyfill.\n *\n * @param  {object} target       - First object.\n * @param  {object} [...objects] - Objects to merge.\n * @return {object}\n */\nfunction assignPolyfill() {\n  const target = arguments[0];\n\n  for (let i = 1, l = arguments.length; i < l; i++) {\n    if (!arguments[i]) continue;\n\n    for (const k in arguments[i]) target[k] = arguments[i][k];\n  }\n\n  return target;\n}\n\nlet assign = assignPolyfill;\n\nif (typeof Object.assign === 'function') assign = Object.assign;\n\nexport {assign};\n\n/**\n * Function returning the first matching edge for given path.\n * Note: this function does not check the existence of source & target. This\n * must be performed by the caller.\n *\n * @param  {Graph}  graph  - Target graph.\n * @param  {any}    source - Source node.\n * @param  {any}    target - Target node.\n * @param  {string} type   - Type of the edge (mixed, directed or undirected).\n * @return {string|null}\n */\nexport function getMatchingEdge(graph, source, target, type) {\n  const sourceData = graph._nodes.get(source);\n\n  let edge = null;\n\n  if (!sourceData) return edge;\n\n  if (type === 'mixed') {\n    edge =\n      (sourceData.out && sourceData.out[target]) ||\n      (sourceData.undirected && sourceData.undirected[target]);\n  } else if (type === 'directed') {\n    edge = sourceData.out && sourceData.out[target];\n  } else {\n    edge = sourceData.undirected && sourceData.undirected[target];\n  }\n\n  return edge;\n}\n\n/**\n * Checks whether the given value is a plain object.\n *\n * @param  {mixed}   value - Target value.\n * @return {boolean}\n */\nexport function isPlainObject(value) {\n  return (\n    typeof value === 'object' && value !== null && value.constructor === Object\n  );\n}\n\n/**\n * Checks whether the given object is empty.\n *\n * @param  {object}  o - Target Object.\n * @return {boolean}\n */\nexport function isEmpty(o) {\n  let k;\n\n  for (k in o) return false;\n\n  return true;\n}\n\n/**\n * Creates a \"private\" property for the given member name by concealing it\n * using the `enumerable` option.\n *\n * @param {object} target - Target object.\n * @param {string} name   - Member name.\n */\nexport function privateProperty(target, name, value) {\n  Object.defineProperty(target, name, {\n    enumerable: false,\n    configurable: false,\n    writable: true,\n    value\n  });\n}\n\n/**\n * Creates a read-only property for the given member name & the given getter.\n *\n * @param {object}   target - Target object.\n * @param {string}   name   - Member name.\n * @param {mixed}    value  - The attached getter or fixed value.\n */\nexport function readOnlyProperty(target, name, value) {\n  const descriptor = {\n    enumerable: true,\n    configurable: true\n  };\n\n  if (typeof value === 'function') {\n    descriptor.get = value;\n  } else {\n    descriptor.value = value;\n    descriptor.writable = false;\n  }\n\n  Object.defineProperty(target, name, descriptor);\n}\n\n/**\n * Returns whether the given object constitute valid hints.\n *\n * @param {object} hints - Target object.\n */\nexport function validateHints(hints) {\n  if (!isPlainObject(hints)) return false;\n\n  if (hints.attributes && !Array.isArray(hints.attributes)) return false;\n\n  return true;\n}\n\n/**\n * Creates a function generating incremental ids for edges.\n *\n * @return {function}\n */\nexport function incrementalIdStartingFromRandomByte() {\n  let i = Math.floor(Math.random() * 256) & 0xff;\n\n  return () => {\n    return i++;\n  };\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/**\n * Obliterator Iterator Class\n * ===========================\n *\n * Simple class representing the library's iterators.\n */\n\n/**\n * Iterator class.\n *\n * @constructor\n * @param {function} next - Next function.\n */\nfunction Iterator(next) {\n  if (typeof next !== 'function')\n    throw new Error('obliterator/iterator: expecting a function!');\n\n  this.next = next;\n}\n\n/**\n * If symbols are supported, we add `next` to `Symbol.iterator`.\n */\nif (typeof Symbol !== 'undefined')\n  Iterator.prototype[Symbol.iterator] = function () {\n    return this;\n  };\n\n/**\n * Returning an iterator of the given values.\n *\n * @param  {any...} values - Values.\n * @return {Iterator}\n */\nIterator.of = function () {\n  var args = arguments,\n    l = args.length,\n    i = 0;\n\n  return new Iterator(function () {\n    if (i >= l) return {done: true};\n\n    return {done: false, value: args[i++]};\n  });\n};\n\n/**\n * Returning an empty iterator.\n *\n * @return {Iterator}\n */\nIterator.empty = function () {\n  var iterator = new Iterator(function () {\n    return {done: true};\n  });\n\n  return iterator;\n};\n\n/**\n * Returning an iterator over the given indexed sequence.\n *\n * @param  {string|Array} sequence - Target sequence.\n * @return {Iterator}\n */\nIterator.fromSequence = function (sequence) {\n  var i = 0,\n    l = sequence.length;\n\n  return new Iterator(function () {\n    if (i >= l) return {done: true};\n\n    return {done: false, value: sequence[i++]};\n  });\n};\n\n/**\n * Returning whether the given value is an iterator.\n *\n * @param  {any} value - Value.\n * @return {boolean}\n */\nIterator.is = function (value) {\n  if (value instanceof Iterator) return true;\n\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.next === 'function'\n  );\n};\n\n/**\n * Exporting.\n */\nmodule.exports = Iterator;\n","exports.ARRAY_BUFFER_SUPPORT = typeof ArrayBuffer !== 'undefined';\nexports.SYMBOL_SUPPORT = typeof Symbol !== 'undefined';\n","/**\n * Obliterator Iter Function\n * ==========================\n *\n * Function coercing values to an iterator. It can be quite useful when needing\n * to handle iterables and iterators the same way.\n */\nvar Iterator = require('./iterator.js');\nvar support = require('./support.js');\n\nvar ARRAY_BUFFER_SUPPORT = support.ARRAY_BUFFER_SUPPORT;\nvar SYMBOL_SUPPORT = support.SYMBOL_SUPPORT;\n\nfunction iterOrNull(target) {\n  // Indexed sequence\n  if (\n    typeof target === 'string' ||\n    Array.isArray(target) ||\n    (ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(target))\n  )\n    return Iterator.fromSequence(target);\n\n  // Invalid value\n  if (typeof target !== 'object' || target === null) return null;\n\n  // Iterable\n  if (SYMBOL_SUPPORT && typeof target[Symbol.iterator] === 'function')\n    return target[Symbol.iterator]();\n\n  // Iterator duck-typing\n  if (typeof target.next === 'function') return target;\n\n  // Invalid object\n  return null;\n}\n\nmodule.exports = function iter(target) {\n  var iterator = iterOrNull(target);\n\n  if (!iterator)\n    throw new Error(\n      'obliterator: target is not iterable nor a valid iterator.'\n    );\n\n  return iterator;\n};\n","/* eslint no-constant-condition: 0 */\n/**\n * Obliterator Take Function\n * ==========================\n *\n * Function taking n or every value of the given iterator and returns them\n * into an array.\n */\nvar iter = require('./iter.js');\n\n/**\n * Take.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @param  {number}   [n]      - Optional number of items to take.\n * @return {array}\n */\nmodule.exports = function take(iterable, n) {\n  var l = arguments.length > 1 ? n : Infinity,\n    array = l !== Infinity ? new Array(l) : [],\n    step,\n    i = 0;\n\n  var iterator = iter(iterable);\n\n  while (true) {\n    if (i === l) return array;\n\n    step = iterator.next();\n\n    if (step.done) {\n      if (i !== n) array.length = i;\n\n      return array;\n    }\n\n    array[i++] = step.value;\n  }\n};\n","/**\n * Graphology Custom Errors\n * =========================\n *\n * Defining custom errors for ease of use & easy unit tests across\n * implementations (normalized typology rather than relying on error\n * messages to check whether the correct error was found).\n */\nexport class GraphError extends Error {\n  constructor(message) {\n    super();\n    this.name = 'GraphError';\n    this.message = message;\n  }\n}\n\nexport class InvalidArgumentsGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'InvalidArgumentsGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(\n        this,\n        InvalidArgumentsGraphError.prototype.constructor\n      );\n  }\n}\n\nexport class NotFoundGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'NotFoundGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(this, NotFoundGraphError.prototype.constructor);\n  }\n}\n\nexport class UsageGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'UsageGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(this, UsageGraphError.prototype.constructor);\n  }\n}\n","/**\n * Graphology Internal Data Classes\n * =================================\n *\n * Internal classes hopefully reduced to structs by engines & storing\n * necessary information for nodes & edges.\n *\n * Note that those classes don't rely on the `class` keyword to avoid some\n * cruft introduced by most of ES2015 transpilers.\n */\n\n/**\n * MixedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function MixedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nMixedNodeData.prototype.clear = function () {\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n  this.undirectedDegree = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n  this.undirected = {};\n};\n\n/**\n * DirectedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function DirectedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nDirectedNodeData.prototype.clear = function () {\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n};\n\n/**\n * UndirectedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function UndirectedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nUndirectedNodeData.prototype.clear = function () {\n  // Degrees\n  this.undirectedDegree = 0;\n\n  // Indices\n  this.undirected = {};\n};\n\n/**\n * EdgeData class.\n *\n * @constructor\n * @param {boolean} undirected   - Whether the edge is undirected.\n * @param {string}  string       - The edge's key.\n * @param {string}  source       - Source of the edge.\n * @param {string}  target       - Target of the edge.\n * @param {object}  attributes   - Edge's attributes.\n */\nexport function EdgeData(undirected, key, source, target, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n  this.undirected = undirected;\n\n  // Extremities\n  this.source = source;\n  this.target = target;\n}\n\nEdgeData.prototype.attach = function () {\n  let outKey = 'out';\n  let inKey = 'in';\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  const source = this.source.key;\n  const target = this.target.key;\n\n  // Handling source\n  this.source[outKey][target] = this;\n\n  if (this.undirected && source === target) return;\n\n  // Handling target\n  this.target[inKey][source] = this;\n};\n\nEdgeData.prototype.attachMulti = function () {\n  let outKey = 'out';\n  let inKey = 'in';\n\n  const source = this.source.key;\n  const target = this.target.key;\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  // Handling source\n  const adj = this.source[outKey];\n  const head = adj[target];\n\n  if (typeof head === 'undefined') {\n    adj[target] = this;\n\n    // Self-loop optimization\n    if (!(this.undirected && source === target)) {\n      // Handling target\n      this.target[inKey][source] = this;\n    }\n\n    return;\n  }\n\n  // Prepending to doubly-linked list\n  head.previous = this;\n  this.next = head;\n\n  // Pointing to new head\n  // NOTE: use mutating swap later to avoid lookup?\n  adj[target] = this;\n  this.target[inKey][source] = this;\n};\n\nEdgeData.prototype.detach = function () {\n  const source = this.source.key;\n  const target = this.target.key;\n\n  let outKey = 'out';\n  let inKey = 'in';\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  delete this.source[outKey][target];\n\n  // No-op delete in case of undirected self-loop\n  delete this.target[inKey][source];\n};\n\nEdgeData.prototype.detachMulti = function () {\n  const source = this.source.key;\n  const target = this.target.key;\n\n  let outKey = 'out';\n  let inKey = 'in';\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  // Deleting from doubly-linked list\n  if (this.previous === undefined) {\n    // We are dealing with the head\n\n    // Should we delete the adjacency entry because it is now empty?\n    if (this.next === undefined) {\n      delete this.source[outKey][target];\n\n      // No-op delete in case of undirected self-loop\n      delete this.target[inKey][source];\n    } else {\n      // Detaching\n      this.next.previous = undefined;\n\n      // NOTE: could avoid the lookups by creating a #.become mutating method\n      this.source[outKey][target] = this.next;\n\n      // No-op delete in case of undirected self-loop\n      this.target[inKey][source] = this.next;\n    }\n  } else {\n    // We are dealing with another list node\n    this.previous.next = this.next;\n\n    // If not last\n    if (this.next !== undefined) {\n      this.next.previous = this.previous;\n    }\n  }\n};\n","/**\n * Graphology Node Attributes methods\n * ===================================\n */\nimport {assign, isPlainObject} from '../utils';\n\nimport {InvalidArgumentsGraphError, NotFoundGraphError} from '../errors';\n\nconst NODE = 0;\nconst SOURCE = 1;\nconst TARGET = 2;\nconst OPPOSITE = 3;\n\nfunction findRelevantNodeData(\n  graph,\n  method,\n  mode,\n  nodeOrEdge,\n  nameOrEdge,\n  add1,\n  add2\n) {\n  let nodeData, edgeData, arg1, arg2;\n\n  nodeOrEdge = '' + nodeOrEdge;\n\n  if (mode === NODE) {\n    nodeData = graph._nodes.get(nodeOrEdge);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${nodeOrEdge}\" node in the graph.`\n      );\n\n    arg1 = nameOrEdge;\n    arg2 = add1;\n  } else if (mode === OPPOSITE) {\n    nameOrEdge = '' + nameOrEdge;\n\n    edgeData = graph._edges.get(nameOrEdge);\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${nameOrEdge}\" edge in the graph.`\n      );\n\n    const source = edgeData.source.key;\n    const target = edgeData.target.key;\n\n    if (nodeOrEdge === source) {\n      nodeData = edgeData.target;\n    } else if (nodeOrEdge === target) {\n      nodeData = edgeData.source;\n    } else {\n      throw new NotFoundGraphError(\n        `Graph.${method}: the \"${nodeOrEdge}\" node is not attached to the \"${nameOrEdge}\" edge (${source}, ${target}).`\n      );\n    }\n\n    arg1 = add1;\n    arg2 = add2;\n  } else {\n    edgeData = graph._edges.get(nodeOrEdge);\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${nodeOrEdge}\" edge in the graph.`\n      );\n\n    if (mode === SOURCE) {\n      nodeData = edgeData.source;\n    } else {\n      nodeData = edgeData.target;\n    }\n\n    arg1 = nameOrEdge;\n    arg2 = add1;\n  }\n\n  return [nodeData, arg1, arg2];\n}\n\nfunction attachNodeAttributeGetter(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, name] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    return data.attributes[name];\n  };\n}\n\nfunction attachNodeAttributesGetter(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge) {\n    const [data] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge\n    );\n\n    return data.attributes;\n  };\n}\n\nfunction attachNodeAttributeChecker(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, name] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    return data.attributes.hasOwnProperty(name);\n  };\n}\n\nfunction attachNodeAttributeSetter(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1, add2) {\n    const [data, name, value] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1,\n      add2\n    );\n\n    data.attributes[name] = value;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributeUpdater(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1, add2) {\n    const [data, name, updater] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1,\n      add2\n    );\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: updater should be a function.`\n      );\n\n    const attributes = data.attributes;\n    const value = updater(attributes[name]);\n\n    attributes[name] = value;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributeRemover(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, name] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    delete data.attributes[name];\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'remove',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributesReplacer(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, attributes] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    data.attributes = attributes;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'replace',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributesMerger(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, attributes] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    assign(data.attributes, attributes);\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'merge',\n      attributes: data.attributes,\n      data: attributes\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributesUpdater(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, updater] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided updater is not a function.`\n      );\n\n    data.attributes = updater(data.attributes);\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'update',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * List of methods to attach.\n */\nconst NODE_ATTRIBUTES_METHODS = [\n  {\n    name: element => `get${element}Attribute`,\n    attacher: attachNodeAttributeGetter\n  },\n  {\n    name: element => `get${element}Attributes`,\n    attacher: attachNodeAttributesGetter\n  },\n  {\n    name: element => `has${element}Attribute`,\n    attacher: attachNodeAttributeChecker\n  },\n  {\n    name: element => `set${element}Attribute`,\n    attacher: attachNodeAttributeSetter\n  },\n  {\n    name: element => `update${element}Attribute`,\n    attacher: attachNodeAttributeUpdater\n  },\n  {\n    name: element => `remove${element}Attribute`,\n    attacher: attachNodeAttributeRemover\n  },\n  {\n    name: element => `replace${element}Attributes`,\n    attacher: attachNodeAttributesReplacer\n  },\n  {\n    name: element => `merge${element}Attributes`,\n    attacher: attachNodeAttributesMerger\n  },\n  {\n    name: element => `update${element}Attributes`,\n    attacher: attachNodeAttributesUpdater\n  }\n];\n\n/**\n * Attach every attributes-related methods to a Graph class.\n *\n * @param {function} Graph - Target class.\n */\nexport default function attachNodeAttributesMethods(Graph) {\n  NODE_ATTRIBUTES_METHODS.forEach(function ({name, attacher}) {\n    // For nodes\n    attacher(Graph, name('Node'), NODE);\n\n    // For sources\n    attacher(Graph, name('Source'), SOURCE);\n\n    // For targets\n    attacher(Graph, name('Target'), TARGET);\n\n    // For opposites\n    attacher(Graph, name('Opposite'), OPPOSITE);\n  });\n}\n","/**\n * Graphology Edge Attributes methods\n * ===================================\n */\nimport {assign, isPlainObject, getMatchingEdge} from '../utils';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from '../errors';\n\n/**\n * Attach an attribute getter method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeGetter(Class, method, type) {\n  /**\n   * Get the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {mixed}          - The attribute's value.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    return data.attributes[name];\n  };\n}\n\n/**\n * Attach an attributes getter method onto the provided class.\n *\n * @param {function} Class       - Target class.\n * @param {string}   method      - Method name.\n * @param {string}   type        - Type of the edge to find.\n */\nfunction attachEdgeAttributesGetter(Class, method, type) {\n  /**\n   * Retrieves all the target element's attributes.\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   *\n   * @return {object}          - The element's attributes.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 1) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + arguments[1];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    return data.attributes;\n  };\n}\n\n/**\n * Attach an attribute checker method onto the provided class.\n *\n * @param {function} Class       - Target class.\n * @param {string}   method      - Method name.\n * @param {string}   type        - Type of the edge to find.\n */\nfunction attachEdgeAttributeChecker(Class, method, type) {\n  /**\n   * Checks whether the desired attribute is set for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    return data.attributes.hasOwnProperty(name);\n  };\n}\n\n/**\n * Attach an attribute setter method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeSetter(Class, method, type) {\n  /**\n   * Set the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   * @param  {mixed}  value   - New attribute value.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   * @param  {mixed}  value   - New attribute value.\n   *\n   * @return {Graph}          - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name, value) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 3) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n      value = arguments[3];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    data.attributes[name] = value;\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute updater method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeUpdater(Class, method, type) {\n  /**\n   * Update the desired attribute for the given element (node or edge) using\n   * the provided function.\n   *\n   * Arity 2:\n   * @param  {any}      element - Target element.\n   * @param  {string}   name    - Attribute's name.\n   * @param  {function} updater - Updater function.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}      source  - Source element.\n   * @param  {any}      target  - Target element.\n   * @param  {string}   name    - Attribute's name.\n   * @param  {function} updater - Updater function.\n   *\n   * @return {Graph}            - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name, updater) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 3) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n      updater = arguments[3];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: updater should be a function.`\n      );\n\n    data.attributes[name] = updater(data.attributes[name]);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute remover method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeRemover(Class, method, type) {\n  /**\n   * Remove the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {Graph}          - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    delete data.attributes[name];\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'remove',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute replacer method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributesReplacer(Class, method, type) {\n  /**\n   * Replace the attributes for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element    - Target element.\n   * @param  {object} attributes - New attributes.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source     - Source element.\n   * @param  {any}     target     - Target element.\n   * @param  {object}  attributes - New attributes.\n   *\n   * @return {Graph}              - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, attributes) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + attributes;\n\n      attributes = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    data.attributes = attributes;\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'replace',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute merger method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributesMerger(Class, method, type) {\n  /**\n   * Merge the attributes for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element    - Target element.\n   * @param  {object} attributes - Attributes to merge.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source     - Source element.\n   * @param  {any}     target     - Target element.\n   * @param  {object}  attributes - Attributes to merge.\n   *\n   * @return {Graph}              - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, attributes) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + attributes;\n\n      attributes = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    assign(data.attributes, attributes);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'merge',\n      attributes: data.attributes,\n      data: attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute updater method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributesUpdater(Class, method, type) {\n  /**\n   * Update the attributes of the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}      element - Target element.\n   * @param  {function} updater - Updater function.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}      source  - Source element.\n   * @param  {any}      target  - Target element.\n   * @param  {function} updater - Updater function.\n   *\n   * @return {Graph}            - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, updater) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + updater;\n\n      updater = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided updater is not a function.`\n      );\n\n    data.attributes = updater(data.attributes);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'update',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * List of methods to attach.\n */\nconst EDGE_ATTRIBUTES_METHODS = [\n  {\n    name: element => `get${element}Attribute`,\n    attacher: attachEdgeAttributeGetter\n  },\n  {\n    name: element => `get${element}Attributes`,\n    attacher: attachEdgeAttributesGetter\n  },\n  {\n    name: element => `has${element}Attribute`,\n    attacher: attachEdgeAttributeChecker\n  },\n  {\n    name: element => `set${element}Attribute`,\n    attacher: attachEdgeAttributeSetter\n  },\n  {\n    name: element => `update${element}Attribute`,\n    attacher: attachEdgeAttributeUpdater\n  },\n  {\n    name: element => `remove${element}Attribute`,\n    attacher: attachEdgeAttributeRemover\n  },\n  {\n    name: element => `replace${element}Attributes`,\n    attacher: attachEdgeAttributesReplacer\n  },\n  {\n    name: element => `merge${element}Attributes`,\n    attacher: attachEdgeAttributesMerger\n  },\n  {\n    name: element => `update${element}Attributes`,\n    attacher: attachEdgeAttributesUpdater\n  }\n];\n\n/**\n * Attach every attributes-related methods to a Graph class.\n *\n * @param {function} Graph - Target class.\n */\nexport default function attachEdgeAttributesMethods(Graph) {\n  EDGE_ATTRIBUTES_METHODS.forEach(function ({name, attacher}) {\n    // For edges\n    attacher(Graph, name('Edge'), 'mixed');\n\n    // For directed edges\n    attacher(Graph, name('DirectedEdge'), 'directed');\n\n    // For undirected edges\n    attacher(Graph, name('UndirectedEdge'), 'undirected');\n  });\n}\n","/**\n * Obliterator Chain Function\n * ===========================\n *\n * Variadic function combining the given iterables.\n */\nvar Iterator = require('./iterator.js');\nvar iter = require('./iter.js');\n\n/**\n * Chain.\n *\n * @param  {...Iterator} iterables - Target iterables.\n * @return {Iterator}\n */\nmodule.exports = function chain() {\n  var iterables = arguments;\n  var current = null;\n  var i = -1;\n\n  /* eslint-disable no-constant-condition */\n  return new Iterator(function next() {\n    var step = null;\n\n    do {\n      if (current === null) {\n        i++;\n\n        if (i >= iterables.length) return {done: true};\n\n        current = iter(iterables[i]);\n      }\n\n      step = current.next();\n\n      if (step.done === true) {\n        current = null;\n        continue;\n      }\n\n      break;\n    } while (true);\n\n    return step;\n  });\n};\n","/**\n * Graphology Edge Iteration\n * ==========================\n *\n * Attaching some methods to the Graph class to be able to iterate over a\n * graph's edges.\n */\nimport Iterator from 'obliterator/iterator';\nimport chain from 'obliterator/chain';\nimport take from 'obliterator/take';\n\nimport {InvalidArgumentsGraphError, NotFoundGraphError} from '../errors';\n\n/**\n * Definitions.\n */\nconst EDGES_ITERATION = [\n  {\n    name: 'edges',\n    type: 'mixed'\n  },\n  {\n    name: 'inEdges',\n    type: 'directed',\n    direction: 'in'\n  },\n  {\n    name: 'outEdges',\n    type: 'directed',\n    direction: 'out'\n  },\n  {\n    name: 'inboundEdges',\n    type: 'mixed',\n    direction: 'in'\n  },\n  {\n    name: 'outboundEdges',\n    type: 'mixed',\n    direction: 'out'\n  },\n  {\n    name: 'directedEdges',\n    type: 'directed'\n  },\n  {\n    name: 'undirectedEdges',\n    type: 'undirected'\n  }\n];\n\n/**\n * Function iterating over edges from the given object to match one of them.\n *\n * @param {object}   object   - Target object.\n * @param {function} callback - Function to call.\n */\nfunction forEachSimple(breakable, object, callback, avoid) {\n  let shouldBreak = false;\n\n  for (const k in object) {\n    if (k === avoid) continue;\n\n    const edgeData = object[k];\n\n    shouldBreak = callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected\n    );\n\n    if (breakable && shouldBreak) return edgeData.key;\n  }\n\n  return;\n}\n\nfunction forEachMulti(breakable, object, callback, avoid) {\n  let edgeData, source, target;\n\n  let shouldBreak = false;\n\n  for (const k in object) {\n    if (k === avoid) continue;\n\n    edgeData = object[k];\n\n    do {\n      source = edgeData.source;\n      target = edgeData.target;\n\n      shouldBreak = callback(\n        edgeData.key,\n        edgeData.attributes,\n        source.key,\n        target.key,\n        source.attributes,\n        target.attributes,\n        edgeData.undirected\n      );\n\n      if (breakable && shouldBreak) return edgeData.key;\n\n      edgeData = edgeData.next;\n    } while (edgeData !== undefined);\n  }\n\n  return;\n}\n\n/**\n * Function returning an iterator over edges from the given object.\n *\n * @param  {object}   object - Target object.\n * @return {Iterator}\n */\nfunction createIterator(object, avoid) {\n  const keys = Object.keys(object);\n  const l = keys.length;\n\n  let edgeData;\n  let i = 0;\n\n  return new Iterator(function next() {\n    do {\n      if (!edgeData) {\n        if (i >= l) return {done: true};\n\n        const k = keys[i++];\n\n        if (k === avoid) {\n          edgeData = undefined;\n          continue;\n        }\n\n        edgeData = object[k];\n      } else {\n        edgeData = edgeData.next;\n      }\n    } while (!edgeData);\n\n    return {\n      done: false,\n      value: {\n        edge: edgeData.key,\n        attributes: edgeData.attributes,\n        source: edgeData.source.key,\n        target: edgeData.target.key,\n        sourceAttributes: edgeData.source.attributes,\n        targetAttributes: edgeData.target.attributes,\n        undirected: edgeData.undirected\n      }\n    };\n  });\n}\n\n/**\n * Function iterating over the egdes from the object at given key to match\n * one of them.\n *\n * @param {object}   object   - Target object.\n * @param {mixed}    k        - Neighbor key.\n * @param {function} callback - Callback to use.\n */\nfunction forEachForKeySimple(breakable, object, k, callback) {\n  const edgeData = object[k];\n\n  if (!edgeData) return;\n\n  const sourceData = edgeData.source;\n  const targetData = edgeData.target;\n\n  if (\n    callback(\n      edgeData.key,\n      edgeData.attributes,\n      sourceData.key,\n      targetData.key,\n      sourceData.attributes,\n      targetData.attributes,\n      edgeData.undirected\n    ) &&\n    breakable\n  )\n    return edgeData.key;\n}\n\nfunction forEachForKeyMulti(breakable, object, k, callback) {\n  let edgeData = object[k];\n\n  if (!edgeData) return;\n\n  let shouldBreak = false;\n\n  do {\n    shouldBreak = callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected\n    );\n\n    if (breakable && shouldBreak) return edgeData.key;\n\n    edgeData = edgeData.next;\n  } while (edgeData !== undefined);\n\n  return;\n}\n\n/**\n * Function returning an iterator over the egdes from the object at given key.\n *\n * @param  {object}   object   - Target object.\n * @param  {mixed}    k        - Neighbor key.\n * @return {Iterator}\n */\nfunction createIteratorForKey(object, k) {\n  let edgeData = object[k];\n\n  if (edgeData.next !== undefined) {\n    return new Iterator(function () {\n      if (!edgeData) return {done: true};\n\n      const value = {\n        edge: edgeData.key,\n        attributes: edgeData.attributes,\n        source: edgeData.source.key,\n        target: edgeData.target.key,\n        sourceAttributes: edgeData.source.attributes,\n        targetAttributes: edgeData.target.attributes,\n        undirected: edgeData.undirected\n      };\n\n      edgeData = edgeData.next;\n\n      return {\n        done: false,\n        value\n      };\n    });\n  }\n\n  return Iterator.of({\n    edge: edgeData.key,\n    attributes: edgeData.attributes,\n    source: edgeData.source.key,\n    target: edgeData.target.key,\n    sourceAttributes: edgeData.source.attributes,\n    targetAttributes: edgeData.target.attributes,\n    undirected: edgeData.undirected\n  });\n}\n\n/**\n * Function creating an array of edges for the given type.\n *\n * @param  {Graph}   graph - Target Graph instance.\n * @param  {string}  type  - Type of edges to retrieve.\n * @return {array}         - Array of edges.\n */\nfunction createEdgeArray(graph, type) {\n  if (graph.size === 0) return [];\n\n  if (type === 'mixed' || type === graph.type) {\n    if (typeof Array.from === 'function')\n      return Array.from(graph._edges.keys());\n\n    return take(graph._edges.keys(), graph._edges.size);\n  }\n\n  const size =\n    type === 'undirected' ? graph.undirectedSize : graph.directedSize;\n\n  const list = new Array(size),\n    mask = type === 'undirected';\n\n  const iterator = graph._edges.values();\n\n  let i = 0;\n  let step, data;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    data = step.value;\n\n    if (data.undirected === mask) list[i++] = data.key;\n  }\n\n  return list;\n}\n\n/**\n * Function iterating over a graph's edges using a callback to match one of\n * them.\n *\n * @param  {Graph}    graph    - Target Graph instance.\n * @param  {string}   type     - Type of edges to retrieve.\n * @param  {function} callback - Function to call.\n */\nfunction forEachEdge(breakable, graph, type, callback) {\n  if (graph.size === 0) return;\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  let step, data;\n  let shouldBreak = false;\n  const iterator = graph._edges.values();\n\n  while (((step = iterator.next()), step.done !== true)) {\n    data = step.value;\n\n    if (shouldFilter && data.undirected !== mask) continue;\n\n    const {key, attributes, source, target} = data;\n\n    shouldBreak = callback(\n      key,\n      attributes,\n      source.key,\n      target.key,\n      source.attributes,\n      target.attributes,\n      data.undirected\n    );\n\n    if (breakable && shouldBreak) return key;\n  }\n\n  return;\n}\n\n/**\n * Function creating an iterator of edges for the given type.\n *\n * @param  {Graph}    graph - Target Graph instance.\n * @param  {string}   type  - Type of edges to retrieve.\n * @return {Iterator}\n */\nfunction createEdgeIterator(graph, type) {\n  if (graph.size === 0) return Iterator.empty();\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  const iterator = graph._edges.values();\n\n  return new Iterator(function next() {\n    let step, data;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      step = iterator.next();\n\n      if (step.done) return step;\n\n      data = step.value;\n\n      if (shouldFilter && data.undirected !== mask) continue;\n\n      break;\n    }\n\n    const value = {\n      edge: data.key,\n      attributes: data.attributes,\n      source: data.source.key,\n      target: data.target.key,\n      sourceAttributes: data.source.attributes,\n      targetAttributes: data.target.attributes,\n      undirected: data.undirected\n    };\n\n    return {value, done: false};\n  });\n}\n\n/**\n * Function iterating over a node's edges using a callback to match one of them.\n *\n * @param  {boolean}  multi     - Whether the graph is multi or not.\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Function to call.\n */\nfunction forEachEdgeForNode(\n  breakable,\n  multi,\n  type,\n  direction,\n  nodeData,\n  callback\n) {\n  const fn = multi ? forEachMulti : forEachSimple;\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      found = fn(breakable, nodeData.in, callback);\n\n      if (breakable && found) return found;\n    }\n    if (direction !== 'in') {\n      found = fn(\n        breakable,\n        nodeData.out,\n        callback,\n        !direction ? nodeData.key : undefined\n      );\n\n      if (breakable && found) return found;\n    }\n  }\n\n  if (type !== 'directed') {\n    found = fn(breakable, nodeData.undirected, callback);\n\n    if (breakable && found) return found;\n  }\n\n  return;\n}\n\n/**\n * Function creating an array of edges for the given type & the given node.\n *\n * @param  {boolean} multi     - Whether the graph is multi or not.\n * @param  {string}  type      - Type of edges to retrieve.\n * @param  {string}  direction - In or out?\n * @param  {any}     nodeData  - Target node's data.\n * @return {array}             - Array of edges.\n */\nfunction createEdgeArrayForNode(multi, type, direction, nodeData) {\n  const edges = []; // TODO: possibility to know size beforehand or factorize with map\n\n  forEachEdgeForNode(false, multi, type, direction, nodeData, function (key) {\n    edges.push(key);\n  });\n\n  return edges;\n}\n\n/**\n * Function iterating over a node's edges using a callback.\n *\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @return {Iterator}\n */\nfunction createEdgeIteratorForNode(type, direction, nodeData) {\n  let iterator = Iterator.empty();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out' && typeof nodeData.in !== 'undefined')\n      iterator = chain(iterator, createIterator(nodeData.in));\n    if (direction !== 'in' && typeof nodeData.out !== 'undefined')\n      iterator = chain(\n        iterator,\n        createIterator(nodeData.out, !direction ? nodeData.key : undefined)\n      );\n  }\n\n  if (type !== 'directed' && typeof nodeData.undirected !== 'undefined') {\n    iterator = chain(iterator, createIterator(nodeData.undirected));\n  }\n\n  return iterator;\n}\n\n/**\n * Function iterating over edges for the given path using a callback to match\n * one of them.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction forEachEdgeForPath(\n  breakable,\n  type,\n  multi,\n  direction,\n  sourceData,\n  target,\n  callback\n) {\n  const fn = multi ? forEachForKeyMulti : forEachForKeySimple;\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (typeof sourceData.in !== 'undefined' && direction !== 'out') {\n      found = fn(breakable, sourceData.in, target, callback);\n\n      if (breakable && found) return found;\n    }\n\n    if (\n      typeof sourceData.out !== 'undefined' &&\n      direction !== 'in' &&\n      (direction || sourceData.key !== target)\n    ) {\n      found = fn(breakable, sourceData.out, target, callback);\n\n      if (breakable && found) return found;\n    }\n  }\n\n  if (type !== 'directed') {\n    if (typeof sourceData.undirected !== 'undefined') {\n      found = fn(breakable, sourceData.undirected, target, callback);\n\n      if (breakable && found) return found;\n    }\n  }\n\n  return;\n}\n\n/**\n * Function creating an array of edges for the given path.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {any}      target     - Target node.\n * @return {array}               - Array of edges.\n */\nfunction createEdgeArrayForPath(type, multi, direction, sourceData, target) {\n  const edges = []; // TODO: possibility to know size beforehand or factorize with map\n\n  forEachEdgeForPath(\n    false,\n    type,\n    multi,\n    direction,\n    sourceData,\n    target,\n    function (key) {\n      edges.push(key);\n    }\n  );\n\n  return edges;\n}\n\n/**\n * Function returning an iterator over edges for the given path.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction createEdgeIteratorForPath(type, direction, sourceData, target) {\n  let iterator = Iterator.empty();\n\n  if (type !== 'undirected') {\n    if (\n      typeof sourceData.in !== 'undefined' &&\n      direction !== 'out' &&\n      target in sourceData.in\n    )\n      iterator = chain(iterator, createIteratorForKey(sourceData.in, target));\n\n    if (\n      typeof sourceData.out !== 'undefined' &&\n      direction !== 'in' &&\n      target in sourceData.out &&\n      (direction || sourceData.key !== target)\n    )\n      iterator = chain(iterator, createIteratorForKey(sourceData.out, target));\n  }\n\n  if (type !== 'directed') {\n    if (\n      typeof sourceData.undirected !== 'undefined' &&\n      target in sourceData.undirected\n    )\n      iterator = chain(\n        iterator,\n        createIteratorForKey(sourceData.undirected, target)\n      );\n  }\n\n  return iterator;\n}\n\n/**\n * Function attaching an edge array creator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachEdgeArrayCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  /**\n   * Function returning an array of certain edges.\n   *\n   * Arity 0: Return all the relevant edges.\n   *\n   * Arity 1: Return all of a node's relevant edges.\n   * @param  {any}   node   - Target node.\n   *\n   * Arity 2: Return the relevant edges across the given path.\n   * @param  {any}   source - Source node.\n   * @param  {any}   target - Target node.\n   *\n   * @return {array|number} - The edges or the number of edges.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[name] = function (source, target) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return [];\n\n    if (!arguments.length) return createEdgeArray(this, type);\n\n    if (arguments.length === 1) {\n      source = '' + source;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${name}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      return createEdgeArrayForNode(\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData\n      );\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return createEdgeArrayForPath(\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`\n    );\n  };\n}\n\n/**\n * Function attaching a edge callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachEdge(Class, description) {\n  const {name, type, direction} = description;\n\n  const forEachName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over the graph's relevant edges by applying the given\n   * callback.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachName] = function (source, target, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    if (arguments.length === 1) {\n      callback = source;\n      return forEachEdge(false, this, type, callback);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      callback = target;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      // TODO: maybe attach the sub method to the instance dynamically?\n      return forEachEdgeForNode(\n        false,\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData,\n        callback\n      );\n    }\n\n    if (arguments.length === 3) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return forEachEdgeForPath(\n        false,\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target,\n        callback\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${forEachName}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`\n    );\n  };\n\n  /**\n   * Function mapping the graph's relevant edges by applying the given\n   * callback.\n   *\n   * Arity 1: Map all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Map all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Map the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const mapName = 'map' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[mapName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    let result;\n\n    // We know the result length beforehand\n    if (args.length === 0) {\n      let length = 0;\n\n      if (type !== 'directed') length += this.undirectedSize;\n      if (type !== 'undirected') length += this.directedSize;\n\n      result = new Array(length);\n\n      let i = 0;\n\n      args.push((e, ea, s, t, sa, ta, u) => {\n        result[i++] = callback(e, ea, s, t, sa, ta, u);\n      });\n    }\n\n    // We don't know the result length beforehand\n    // TODO: we can in some instances of simple graphs, knowing degree\n    else {\n      result = [];\n\n      args.push((e, ea, s, t, sa, ta, u) => {\n        result.push(callback(e, ea, s, t, sa, ta, u));\n      });\n    }\n\n    this[forEachName].apply(this, args);\n\n    return result;\n  };\n\n  /**\n   * Function filtering the graph's relevant edges using the provided predicate\n   * function.\n   *\n   * Arity 1: Filter all the relevant edges.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * Arity 2: Filter all of a node's relevant edges.\n   * @param  {any}      node      - Target node.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * Arity 3: Filter the relevant edges across the given path.\n   * @param  {any}      source    - Source node.\n   * @param  {any}      target    - Target node.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const filterName = 'filter' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[filterName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    const result = [];\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      if (callback(e, ea, s, t, sa, ta, u)) result.push(e);\n    });\n\n    this[forEachName].apply(this, args);\n\n    return result;\n  };\n\n  /**\n   * Function reducing the graph's relevant edges using the provided accumulator\n   * function.\n   *\n   * Arity 1: Reduce all the relevant edges.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * Arity 2: Reduce all of a node's relevant edges.\n   * @param  {any}      node         - Target node.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * Arity 3: Reduce the relevant edges across the given path.\n   * @param  {any}      source       - Source node.\n   * @param  {any}      target       - Target node.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const reduceName = 'reduce' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[reduceName] = function () {\n    let args = Array.prototype.slice.call(arguments);\n\n    if (args.length < 2 || args.length > 4) {\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: invalid number of arguments (expecting 2, 3 or 4 and got ${args.length}).`\n      );\n    }\n\n    if (\n      typeof args[args.length - 1] === 'function' &&\n      typeof args[args.length - 2] !== 'function'\n    ) {\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`\n      );\n    }\n\n    let callback;\n    let initialValue;\n\n    if (args.length === 2) {\n      callback = args[0];\n      initialValue = args[1];\n      args = [];\n    } else if (args.length === 3) {\n      callback = args[1];\n      initialValue = args[2];\n      args = [args[0]];\n    } else if (args.length === 4) {\n      callback = args[2];\n      initialValue = args[3];\n      args = [args[0], args[1]];\n    }\n\n    let accumulator = initialValue;\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      accumulator = callback(accumulator, e, ea, s, t, sa, ta, u);\n    });\n\n    this[forEachName].apply(this, args);\n\n    return accumulator;\n  };\n}\n\n/**\n * Function attaching a breakable edge callback iterator method to the Graph\n * prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachFindEdge(Class, description) {\n  const {name, type, direction} = description;\n\n  const findEdgeName = 'find' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over the graph's relevant edges in order to match\n   * one of them using the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[findEdgeName] = function (source, target, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return false;\n\n    if (arguments.length === 1) {\n      callback = source;\n      return forEachEdge(true, this, type, callback);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      callback = target;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      // TODO: maybe attach the sub method to the instance dynamically?\n      return forEachEdgeForNode(\n        true,\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData,\n        callback\n      );\n    }\n\n    if (arguments.length === 3) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return forEachEdgeForPath(\n        true,\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target,\n        callback\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${findEdgeName}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`\n    );\n  };\n\n  /**\n   * Function iterating over the graph's relevant edges in order to assert\n   * whether any one of them matches the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const someName = 'some' + name[0].toUpperCase() + name.slice(1, -1);\n\n  Class.prototype[someName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      return callback(e, ea, s, t, sa, ta, u);\n    });\n\n    const found = this[findEdgeName].apply(this, args);\n\n    if (found) return true;\n\n    return false;\n  };\n\n  /**\n   * Function iterating over the graph's relevant edges in order to assert\n   * whether all of them matche the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const everyName = 'every' + name[0].toUpperCase() + name.slice(1, -1);\n\n  Class.prototype[everyName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      return !callback(e, ea, s, t, sa, ta, u);\n    });\n\n    const found = this[findEdgeName].apply(this, args);\n\n    if (found) return false;\n\n    return true;\n  };\n}\n\n/**\n * Function attaching an edge iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachEdgeIteratorCreator(Class, description) {\n  const {name: originalName, type, direction} = description;\n\n  const name = originalName.slice(0, -1) + 'Entries';\n\n  /**\n   * Function returning an iterator over the graph's edges.\n   *\n   * Arity 0: Iterate over all the relevant edges.\n   *\n   * Arity 1: Iterate over all of a node's relevant edges.\n   * @param  {any}   node   - Target node.\n   *\n   * Arity 2: Iterate over the relevant edges across the given path.\n   * @param  {any}   source - Source node.\n   * @param  {any}   target - Target node.\n   *\n   * @return {array|number} - The edges or the number of edges.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[name] = function (source, target) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return Iterator.empty();\n\n    if (!arguments.length) return createEdgeIterator(this, type);\n\n    if (arguments.length === 1) {\n      source = '' + source;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      return createEdgeIteratorForNode(type, direction, sourceData);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return createEdgeIteratorForPath(type, direction, sourceData, target);\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`\n    );\n  };\n}\n\n/**\n * Function attaching every edge iteration method to the Graph class.\n *\n * @param {function} Graph - Graph class.\n */\nexport default function attachEdgeIterationMethods(Graph) {\n  EDGES_ITERATION.forEach(description => {\n    attachEdgeArrayCreator(Graph, description);\n    attachForEachEdge(Graph, description);\n    attachFindEdge(Graph, description);\n    attachEdgeIteratorCreator(Graph, description);\n  });\n}\n","/**\n * Graphology Neighbor Iteration\n * ==============================\n *\n * Attaching some methods to the Graph class to be able to iterate over\n * neighbors.\n */\nimport Iterator from 'obliterator/iterator';\nimport chain from 'obliterator/chain';\n\nimport {NotFoundGraphError, InvalidArgumentsGraphError} from '../errors';\n\n/**\n * Definitions.\n */\nconst NEIGHBORS_ITERATION = [\n  {\n    name: 'neighbors',\n    type: 'mixed'\n  },\n  {\n    name: 'inNeighbors',\n    type: 'directed',\n    direction: 'in'\n  },\n  {\n    name: 'outNeighbors',\n    type: 'directed',\n    direction: 'out'\n  },\n  {\n    name: 'inboundNeighbors',\n    type: 'mixed',\n    direction: 'in'\n  },\n  {\n    name: 'outboundNeighbors',\n    type: 'mixed',\n    direction: 'out'\n  },\n  {\n    name: 'directedNeighbors',\n    type: 'directed'\n  },\n  {\n    name: 'undirectedNeighbors',\n    type: 'undirected'\n  }\n];\n\n/**\n * Helpers.\n */\nfunction CompositeSetWrapper() {\n  this.A = null;\n  this.B = null;\n}\n\nCompositeSetWrapper.prototype.wrap = function (set) {\n  if (this.A === null) this.A = set;\n  else if (this.B === null) this.B = set;\n};\n\nCompositeSetWrapper.prototype.has = function (key) {\n  if (this.A !== null && key in this.A) return true;\n  if (this.B !== null && key in this.B) return true;\n  return false;\n};\n\n/**\n * Function iterating over the given node's relevant neighbors to match\n * one of them using a predicated function.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Callback to use.\n */\nfunction forEachInObjectOnce(breakable, visited, nodeData, object, callback) {\n  for (const k in object) {\n    const edgeData = object[k];\n\n    const sourceData = edgeData.source;\n    const targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    if (visited && visited.has(neighborData.key)) continue;\n\n    const shouldBreak = callback(neighborData.key, neighborData.attributes);\n\n    if (breakable && shouldBreak) return neighborData.key;\n  }\n\n  return;\n}\n\nfunction forEachNeighbor(breakable, type, direction, nodeData, callback) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return forEachInObjectOnce(\n        breakable,\n        null,\n        nodeData,\n        nodeData.undirected,\n        callback\n      );\n\n    if (typeof direction === 'string')\n      return forEachInObjectOnce(\n        breakable,\n        null,\n        nodeData,\n        nodeData[direction],\n        callback\n      );\n  }\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  // We cheat by querying the other adjacencies\n  const visited = new CompositeSetWrapper();\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      found = forEachInObjectOnce(\n        breakable,\n        null,\n        nodeData,\n        nodeData.in,\n        callback\n      );\n\n      if (breakable && found) return found;\n\n      visited.wrap(nodeData.in);\n    }\n    if (direction !== 'in') {\n      found = forEachInObjectOnce(\n        breakable,\n        visited,\n        nodeData,\n        nodeData.out,\n        callback\n      );\n\n      if (breakable && found) return found;\n\n      visited.wrap(nodeData.out);\n    }\n  }\n\n  if (type !== 'directed') {\n    found = forEachInObjectOnce(\n      breakable,\n      visited,\n      nodeData,\n      nodeData.undirected,\n      callback\n    );\n\n    if (breakable && found) return found;\n  }\n\n  return;\n}\n\n/**\n * Function creating an array of relevant neighbors for the given node.\n *\n * @param  {string}       type      - Type of neighbors.\n * @param  {string}       direction - Direction.\n * @param  {any}          nodeData  - Target node's data.\n * @return {Array}                  - The list of neighbors.\n */\nfunction createNeighborArrayForNode(type, direction, nodeData) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected') return Object.keys(nodeData.undirected);\n\n    if (typeof direction === 'string') return Object.keys(nodeData[direction]);\n  }\n\n  const neighbors = [];\n\n  forEachNeighbor(false, type, direction, nodeData, function (key) {\n    neighbors.push(key);\n  });\n\n  return neighbors;\n}\n\n/**\n * Function returning an iterator over the given node's relevant neighbors.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @return {Iterator}\n */\nfunction createDedupedObjectIterator(visited, nodeData, object) {\n  const keys = Object.keys(object);\n  const l = keys.length;\n\n  let i = 0;\n\n  return new Iterator(function next() {\n    let neighborData = null;\n\n    do {\n      if (i >= l) {\n        if (visited) visited.wrap(object);\n        return {done: true};\n      }\n\n      const edgeData = object[keys[i++]];\n\n      const sourceData = edgeData.source;\n      const targetData = edgeData.target;\n\n      neighborData = sourceData === nodeData ? targetData : sourceData;\n\n      if (visited && visited.has(neighborData.key)) {\n        neighborData = null;\n        continue;\n      }\n    } while (neighborData === null);\n\n    return {\n      done: false,\n      value: {neighbor: neighborData.key, attributes: neighborData.attributes}\n    };\n  });\n}\n\nfunction createNeighborIterator(type, direction, nodeData) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return createDedupedObjectIterator(null, nodeData, nodeData.undirected);\n\n    if (typeof direction === 'string')\n      return createDedupedObjectIterator(null, nodeData, nodeData[direction]);\n  }\n\n  let iterator = Iterator.empty();\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  // We cheat by querying the other adjacencies\n  const visited = new CompositeSetWrapper();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      iterator = chain(\n        iterator,\n        createDedupedObjectIterator(visited, nodeData, nodeData.in)\n      );\n    }\n    if (direction !== 'in') {\n      iterator = chain(\n        iterator,\n        createDedupedObjectIterator(visited, nodeData, nodeData.out)\n      );\n    }\n  }\n\n  if (type !== 'directed') {\n    iterator = chain(\n      iterator,\n      createDedupedObjectIterator(visited, nodeData, nodeData.undirected)\n    );\n  }\n\n  return iterator;\n}\n\n/**\n * Function attaching a neighbors array creator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachNeighborArrayCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  /**\n   * Function returning an array of certain neighbors.\n   *\n   * @param  {any}   node   - Target node.\n   * @return {array} - The neighbors of neighbors.\n   *\n   * @throws {Error} - Will throw if node is not found in the graph.\n   */\n  Class.prototype[name] = function (node) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return [];\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${name}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return createNeighborArrayForNode(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData\n    );\n  };\n}\n\n/**\n * Function attaching a neighbors callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachNeighbor(Class, description) {\n  const {name, type, direction} = description;\n\n  const forEachName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over all the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachName] = function (node, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${forEachName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    forEachNeighbor(\n      false,\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData,\n      callback\n    );\n  };\n\n  /**\n   * Function mapping the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const mapName = 'map' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[mapName] = function (node, callback) {\n    // TODO: optimize when size is known beforehand\n    const result = [];\n\n    this[forEachName](node, (n, a) => {\n      result.push(callback(n, a));\n    });\n\n    return result;\n  };\n\n  /**\n   * Function filtering the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const filterName = 'filter' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[filterName] = function (node, callback) {\n    const result = [];\n\n    this[forEachName](node, (n, a) => {\n      if (callback(n, a)) result.push(n);\n    });\n\n    return result;\n  };\n\n  /**\n   * Function reducing the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const reduceName = 'reduce' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[reduceName] = function (node, callback, initialValue) {\n    if (arguments.length < 3)\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`\n      );\n\n    let accumulator = initialValue;\n\n    this[forEachName](node, (n, a) => {\n      accumulator = callback(accumulator, n, a);\n    });\n\n    return accumulator;\n  };\n}\n\n/**\n * Function attaching a breakable neighbors callback iterator method to the\n * Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachFindNeighbor(Class, description) {\n  const {name, type, direction} = description;\n\n  const capitalizedSingular = name[0].toUpperCase() + name.slice(1, -1);\n\n  const findName = 'find' + capitalizedSingular;\n\n  /**\n   * Function iterating over all the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[findName] = function (node, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${findName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return forEachNeighbor(\n      true,\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData,\n      callback\n    );\n  };\n\n  /**\n   * Function iterating over all the relevant neighbors to find if any of them\n   * matches the given predicate.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const someName = 'some' + capitalizedSingular;\n\n  Class.prototype[someName] = function (node, callback) {\n    const found = this[findName](node, callback);\n\n    if (found) return true;\n\n    return false;\n  };\n\n  /**\n   * Function iterating over all the relevant neighbors to find if all of them\n   * matche the given predicate.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const everyName = 'every' + capitalizedSingular;\n\n  Class.prototype[everyName] = function (node, callback) {\n    const found = this[findName](node, (n, a) => {\n      return !callback(n, a);\n    });\n\n    if (found) return false;\n\n    return true;\n  };\n}\n\n/**\n * Function attaching a neighbors callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachNeighborIteratorCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  const iteratorName = name.slice(0, -1) + 'Entries';\n\n  /**\n   * Function returning an iterator over all the relevant neighbors.\n   *\n   * @param  {any}      node     - Target node.\n   * @return {Iterator}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[iteratorName] = function (node) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return Iterator.empty();\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${iteratorName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return createNeighborIterator(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData\n    );\n  };\n}\n\n/**\n * Function attaching every neighbor iteration method to the Graph class.\n *\n * @param {function} Graph - Graph class.\n */\nexport default function attachNeighborIterationMethods(Graph) {\n  NEIGHBORS_ITERATION.forEach(description => {\n    attachNeighborArrayCreator(Graph, description);\n    attachForEachNeighbor(Graph, description);\n    attachFindNeighbor(Graph, description);\n    attachNeighborIteratorCreator(Graph, description);\n  });\n}\n","/**\n * Graphology Adjacency Iteration\n * ===============================\n *\n * Attaching some methods to the Graph class to be able to iterate over a\n * graph's adjacency.\n */\n\n/**\n * Function iterating over a simple graph's adjacency using a callback.\n *\n * @param {boolean}  breakable         - Can we break?\n * @param {boolean}  assymetric        - Whether to emit undirected edges only once.\n * @param {boolean}  disconnectedNodes - Whether to emit disconnected nodes.\n * @param {Graph}    graph             - Target Graph instance.\n * @param {callback} function          - Iteration callback.\n */\nexport function forEachAdjacency(\n  breakable,\n  assymetric,\n  disconnectedNodes,\n  graph,\n  callback\n) {\n  const iterator = graph._nodes.values();\n\n  const type = graph.type;\n\n  let step, sourceData, neighbor, adj, edgeData, targetData, shouldBreak;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    let hasEdges = false;\n\n    sourceData = step.value;\n\n    if (type !== 'undirected') {\n      adj = sourceData.out;\n\n      for (neighbor in adj) {\n        edgeData = adj[neighbor];\n\n        do {\n          targetData = edgeData.target;\n\n          hasEdges = true;\n          shouldBreak = callback(\n            sourceData.key,\n            targetData.key,\n            sourceData.attributes,\n            targetData.attributes,\n            edgeData.key,\n            edgeData.attributes,\n            edgeData.undirected\n          );\n\n          if (breakable && shouldBreak) return edgeData;\n\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    if (type !== 'directed') {\n      adj = sourceData.undirected;\n\n      for (neighbor in adj) {\n        if (assymetric && sourceData.key > neighbor) continue;\n\n        edgeData = adj[neighbor];\n\n        do {\n          targetData = edgeData.target;\n\n          if (targetData.key !== neighbor) targetData = edgeData.source;\n\n          hasEdges = true;\n          shouldBreak = callback(\n            sourceData.key,\n            targetData.key,\n            sourceData.attributes,\n            targetData.attributes,\n            edgeData.key,\n            edgeData.attributes,\n            edgeData.undirected\n          );\n\n          if (breakable && shouldBreak) return edgeData;\n\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    if (disconnectedNodes && !hasEdges) {\n      shouldBreak = callback(\n        sourceData.key,\n        null,\n        sourceData.attributes,\n        null,\n        null,\n        null,\n        null\n      );\n\n      if (breakable && shouldBreak) return null;\n    }\n  }\n\n  return;\n}\n","/**\n * Graphology Serialization Utilities\n * ===================================\n *\n * Collection of functions used by the graph serialization schemes.\n */\nimport {InvalidArgumentsGraphError} from './errors';\nimport {assign, isPlainObject, isEmpty} from './utils';\n\n/**\n * Formats internal node data into a serialized node.\n *\n * @param  {any}    key  - The node's key.\n * @param  {object} data - Internal node's data.\n * @return {array}       - The serialized node.\n */\nexport function serializeNode(key, data) {\n  const serialized = {key};\n\n  if (!isEmpty(data.attributes))\n    serialized.attributes = assign({}, data.attributes);\n\n  return serialized;\n}\n\n/**\n * Formats internal edge data into a serialized edge.\n *\n * @param  {string} type - The graph's type.\n * @param  {any}    key  - The edge's key.\n * @param  {object} data - Internal edge's data.\n * @return {array}       - The serialized edge.\n */\nexport function serializeEdge(type, key, data) {\n  const serialized = {\n    key,\n    source: data.source.key,\n    target: data.target.key\n  };\n\n  if (!isEmpty(data.attributes))\n    serialized.attributes = assign({}, data.attributes);\n\n  if (type === 'mixed' && data.undirected) serialized.undirected = true;\n\n  return serialized;\n}\n\n/**\n * Checks whether the given value is a serialized node.\n *\n * @param  {mixed} value - Target value.\n * @return {string|null}\n */\nexport function validateSerializedNode(value) {\n  if (!isPlainObject(value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid serialized node. A serialized node should be a plain object with at least a \"key\" property.'\n    );\n\n  if (!('key' in value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: serialized node is missing its key.'\n    );\n\n  if (\n    'attributes' in value &&\n    (!isPlainObject(value.attributes) || value.attributes === null)\n  )\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.'\n    );\n}\n\n/**\n * Checks whether the given value is a serialized edge.\n *\n * @param  {mixed} value - Target value.\n * @return {string|null}\n */\nexport function validateSerializedEdge(value) {\n  if (!isPlainObject(value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid serialized edge. A serialized edge should be a plain object with at least a \"source\" & \"target\" property.'\n    );\n\n  if (!('source' in value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: serialized edge is missing its source.'\n    );\n\n  if (!('target' in value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: serialized edge is missing its target.'\n    );\n\n  if (\n    'attributes' in value &&\n    (!isPlainObject(value.attributes) || value.attributes === null)\n  )\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.'\n    );\n\n  if ('undirected' in value && typeof value.undirected !== 'boolean')\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid undirectedness information. Undirected should be boolean or omitted.'\n    );\n}\n","/* eslint no-nested-ternary: 0 */\n/**\n * Graphology Reference Implementation\n * ====================================\n *\n * Reference implementation of the graphology specs.\n */\nimport {EventEmitter} from 'events';\nimport Iterator from 'obliterator/iterator';\nimport take from 'obliterator/take';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\nimport {\n  MixedNodeData,\n  DirectedNodeData,\n  UndirectedNodeData,\n  EdgeData\n} from './data';\n\nimport attachNodeAttributesMethods from './attributes/nodes';\nimport attachEdgeAttributesMethods from './attributes/edges';\nimport attachEdgeIterationMethods from './iteration/edges';\nimport attachNeighborIterationMethods from './iteration/neighbors';\nimport {forEachAdjacency} from './iteration/adjacency';\n\nimport {\n  serializeNode,\n  serializeEdge,\n  validateSerializedNode,\n  validateSerializedEdge\n} from './serialization';\n\nimport {\n  assign,\n  getMatchingEdge,\n  isPlainObject,\n  privateProperty,\n  readOnlyProperty,\n  incrementalIdStartingFromRandomByte,\n  validateHints\n} from './utils';\n\n/**\n * Constants.\n */\nconst INSTANCE_ID = incrementalIdStartingFromRandomByte();\n\n/**\n * Enums.\n */\nconst TYPES = new Set(['directed', 'undirected', 'mixed']);\n\nconst EMITTER_PROPS = new Set([\n  'domain',\n  '_events',\n  '_eventsCount',\n  '_maxListeners'\n]);\n\nconst EDGE_ADD_METHODS = [\n  {\n    name: verb => `${verb}Edge`,\n    generateKey: true\n  },\n  {\n    name: verb => `${verb}DirectedEdge`,\n    generateKey: true,\n    type: 'directed'\n  },\n  {\n    name: verb => `${verb}UndirectedEdge`,\n    generateKey: true,\n    type: 'undirected'\n  },\n  {\n    name: verb => `${verb}EdgeWithKey`\n  },\n  {\n    name: verb => `${verb}DirectedEdgeWithKey`,\n    type: 'directed'\n  },\n  {\n    name: verb => `${verb}UndirectedEdgeWithKey`,\n    type: 'undirected'\n  }\n];\n\n/**\n * Default options.\n */\nconst DEFAULTS = {\n  allowSelfLoops: true,\n  multi: false,\n  type: 'mixed'\n};\n\n/**\n * Abstract functions used by the Graph class for various methods.\n */\n\n/**\n * Internal method used to add a node to the given graph\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {any}     node            - The node's key.\n * @param  {object}  [attributes]    - Optional attributes.\n * @return {NodeData}                - Created node data.\n */\nfunction addNode(graph, node, attributes) {\n  if (attributes && !isPlainObject(attributes))\n    throw new InvalidArgumentsGraphError(\n      `Graph.addNode: invalid attributes. Expecting an object but got \"${attributes}\"`\n    );\n\n  // String coercion\n  node = '' + node;\n  attributes = attributes || {};\n\n  if (graph._nodes.has(node))\n    throw new UsageGraphError(\n      `Graph.addNode: the \"${node}\" node already exist in the graph.`\n    );\n\n  const data = new graph.NodeDataClass(node, attributes);\n\n  // Adding the node to internal register\n  graph._nodes.set(node, data);\n\n  // Emitting\n  graph.emit('nodeAdded', {\n    key: node,\n    attributes\n  });\n\n  return data;\n}\n\n/**\n * Same as the above but without sanity checks because we call this in contexts\n * where necessary checks were already done.\n */\nfunction unsafeAddNode(graph, node, attributes) {\n  const data = new graph.NodeDataClass(node, attributes);\n\n  graph._nodes.set(node, data);\n\n  graph.emit('nodeAdded', {\n    key: node,\n    attributes\n  });\n\n  return data;\n}\n\n/**\n * Internal method used to add an arbitrary edge to the given graph.\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {string}  name            - Name of the child method for errors.\n * @param  {boolean} mustGenerateKey - Should the graph generate an id?\n * @param  {boolean} undirected      - Whether the edge is undirected.\n * @param  {any}     edge            - The edge's key.\n * @param  {any}     source          - The source node.\n * @param  {any}     target          - The target node.\n * @param  {object}  [attributes]    - Optional attributes.\n * @return {any}                     - The edge.\n *\n * @throws {Error} - Will throw if the graph is of the wrong type.\n * @throws {Error} - Will throw if the given attributes are not an object.\n * @throws {Error} - Will throw if source or target doesn't exist.\n * @throws {Error} - Will throw if the edge already exist.\n */\nfunction addEdge(\n  graph,\n  name,\n  mustGenerateKey,\n  undirected,\n  edge,\n  source,\n  target,\n  attributes\n) {\n  // Checking validity of operation\n  if (!undirected && graph.type === 'undirected')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead.`\n    );\n\n  if (undirected && graph.type === 'directed')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead.`\n    );\n\n  if (attributes && !isPlainObject(attributes))\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: invalid attributes. Expecting an object but got \"${attributes}\"`\n    );\n\n  // Coercion of source & target:\n  source = '' + source;\n  target = '' + target;\n  attributes = attributes || {};\n\n  if (!graph.allowSelfLoops && source === target)\n    throw new UsageGraphError(\n      `Graph.${name}: source & target are the same (\"${source}\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`\n    );\n\n  const sourceData = graph._nodes.get(source),\n    targetData = graph._nodes.get(target);\n\n  if (!sourceData)\n    throw new NotFoundGraphError(\n      `Graph.${name}: source node \"${source}\" not found.`\n    );\n\n  if (!targetData)\n    throw new NotFoundGraphError(\n      `Graph.${name}: target node \"${target}\" not found.`\n    );\n\n  // Must the graph generate an id for this edge?\n  const eventData = {\n    key: null,\n    undirected,\n    source,\n    target,\n    attributes\n  };\n\n  if (mustGenerateKey) {\n    // NOTE: in this case we can guarantee that the key does not already\n    // exist and is already correctly casted as a string\n    edge = graph._edgeKeyGenerator();\n  } else {\n    // Coercion of edge key\n    edge = '' + edge;\n\n    // Here, we have a key collision\n    if (graph._edges.has(edge))\n      throw new UsageGraphError(\n        `Graph.${name}: the \"${edge}\" edge already exists in the graph.`\n      );\n  }\n\n  // Here, we might have a source / target collision\n  if (\n    !graph.multi &&\n    (undirected\n      ? typeof sourceData.undirected[target] !== 'undefined'\n      : typeof sourceData.out[target] !== 'undefined')\n  ) {\n    throw new UsageGraphError(\n      `Graph.${name}: an edge linking \"${source}\" to \"${target}\" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option.`\n    );\n  }\n\n  // Storing some data\n  const edgeData = new EdgeData(\n    undirected,\n    edge,\n    sourceData,\n    targetData,\n    attributes\n  );\n\n  // Adding the edge to the internal register\n  graph._edges.set(edge, edgeData);\n\n  // Incrementing node degree counters\n  const isSelfLoop = source === target;\n\n  if (undirected) {\n    sourceData.undirectedDegree++;\n    targetData.undirectedDegree++;\n\n    if (isSelfLoop) graph._undirectedSelfLoopCount++;\n  } else {\n    sourceData.outDegree++;\n    targetData.inDegree++;\n\n    if (isSelfLoop) graph._directedSelfLoopCount++;\n  }\n\n  // Updating relevant index\n  if (graph.multi) edgeData.attachMulti();\n  else edgeData.attach();\n\n  if (undirected) graph._undirectedSize++;\n  else graph._directedSize++;\n\n  // Emitting\n  eventData.key = edge;\n\n  graph.emit('edgeAdded', eventData);\n\n  return edge;\n}\n\n/**\n * Internal method used to add an arbitrary edge to the given graph.\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {string}  name            - Name of the child method for errors.\n * @param  {boolean} mustGenerateKey - Should the graph generate an id?\n * @param  {boolean} undirected      - Whether the edge is undirected.\n * @param  {any}     edge            - The edge's key.\n * @param  {any}     source          - The source node.\n * @param  {any}     target          - The target node.\n * @param  {object}  [attributes]    - Optional attributes.\n * @param  {boolean} [asUpdater]       - Are we updating or merging?\n * @return {any}                     - The edge.\n *\n * @throws {Error} - Will throw if the graph is of the wrong type.\n * @throws {Error} - Will throw if the given attributes are not an object.\n * @throws {Error} - Will throw if source or target doesn't exist.\n * @throws {Error} - Will throw if the edge already exist.\n */\nfunction mergeEdge(\n  graph,\n  name,\n  mustGenerateKey,\n  undirected,\n  edge,\n  source,\n  target,\n  attributes,\n  asUpdater\n) {\n  // Checking validity of operation\n  if (!undirected && graph.type === 'undirected')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot merge/update a directed edge to an undirected graph. Use the #.mergeEdge/#.updateEdge or #.addUndirectedEdge instead.`\n    );\n\n  if (undirected && graph.type === 'directed')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot merge/update an undirected edge to a directed graph. Use the #.mergeEdge/#.updateEdge or #.addDirectedEdge instead.`\n    );\n\n  if (attributes) {\n    if (asUpdater) {\n      if (typeof attributes !== 'function')\n        throw new InvalidArgumentsGraphError(\n          `Graph.${name}: invalid updater function. Expecting a function but got \"${attributes}\"`\n        );\n    } else {\n      if (!isPlainObject(attributes))\n        throw new InvalidArgumentsGraphError(\n          `Graph.${name}: invalid attributes. Expecting an object but got \"${attributes}\"`\n        );\n    }\n  }\n\n  // Coercion of source & target:\n  source = '' + source;\n  target = '' + target;\n\n  let updater;\n\n  if (asUpdater) {\n    updater = attributes;\n    attributes = undefined;\n  }\n\n  if (!graph.allowSelfLoops && source === target)\n    throw new UsageGraphError(\n      `Graph.${name}: source & target are the same (\"${source}\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`\n    );\n\n  let sourceData = graph._nodes.get(source);\n  let targetData = graph._nodes.get(target);\n  let edgeData;\n\n  // Do we need to handle duplicate?\n  let alreadyExistingEdgeData;\n\n  if (!mustGenerateKey) {\n    edgeData = graph._edges.get(edge);\n\n    if (edgeData) {\n      // Here, we need to ensure, if the user gave a key, that source & target\n      // are consistent\n      if (edgeData.source.key !== source || edgeData.target.key !== target) {\n        // If source or target inconsistent\n        if (\n          !undirected ||\n          edgeData.source.key !== target ||\n          edgeData.target.key !== source\n        ) {\n          // If directed, or source/target aren't flipped\n          throw new UsageGraphError(\n            `Graph.${name}: inconsistency detected when attempting to merge the \"${edge}\" edge with \"${source}\" source & \"${target}\" target vs. (\"${edgeData.source.key}\", \"${edgeData.target.key}\").`\n          );\n        }\n      }\n\n      alreadyExistingEdgeData = edgeData;\n    }\n  }\n\n  // Here, we might have a source / target collision\n  if (!alreadyExistingEdgeData && !graph.multi && sourceData) {\n    alreadyExistingEdgeData = undirected\n      ? sourceData.undirected[target]\n      : sourceData.out[target];\n  }\n\n  // Handling duplicates\n  if (alreadyExistingEdgeData) {\n    const info = [alreadyExistingEdgeData.key, false, false, false];\n\n    // We can skip the attribute merging part if the user did not provide them\n    if (asUpdater ? !updater : !attributes) return info;\n\n    // Updating the attributes\n    if (asUpdater) {\n      const oldAttributes = alreadyExistingEdgeData.attributes;\n      alreadyExistingEdgeData.attributes = updater(oldAttributes);\n\n      graph.emit('edgeAttributesUpdated', {\n        type: 'replace',\n        key: alreadyExistingEdgeData.key,\n        attributes: alreadyExistingEdgeData.attributes\n      });\n    }\n\n    // Merging the attributes\n    else {\n      assign(alreadyExistingEdgeData.attributes, attributes);\n\n      graph.emit('edgeAttributesUpdated', {\n        type: 'merge',\n        key: alreadyExistingEdgeData.key,\n        attributes: alreadyExistingEdgeData.attributes,\n        data: attributes\n      });\n    }\n\n    return info;\n  }\n\n  attributes = attributes || {};\n\n  if (asUpdater && updater) attributes = updater(attributes);\n\n  // Must the graph generate an id for this edge?\n  const eventData = {\n    key: null,\n    undirected,\n    source,\n    target,\n    attributes\n  };\n\n  if (mustGenerateKey) {\n    // NOTE: in this case we can guarantee that the key does not already\n    // exist and is already correctly casted as a string\n    edge = graph._edgeKeyGenerator();\n  } else {\n    // Coercion of edge key\n    edge = '' + edge;\n\n    // Here, we have a key collision\n    if (graph._edges.has(edge))\n      throw new UsageGraphError(\n        `Graph.${name}: the \"${edge}\" edge already exists in the graph.`\n      );\n  }\n\n  let sourceWasAdded = false;\n  let targetWasAdded = false;\n\n  if (!sourceData) {\n    sourceData = unsafeAddNode(graph, source, {});\n    sourceWasAdded = true;\n\n    if (source === target) {\n      targetData = sourceData;\n      targetWasAdded = true;\n    }\n  }\n  if (!targetData) {\n    targetData = unsafeAddNode(graph, target, {});\n    targetWasAdded = true;\n  }\n\n  // Storing some data\n  edgeData = new EdgeData(undirected, edge, sourceData, targetData, attributes);\n\n  // Adding the edge to the internal register\n  graph._edges.set(edge, edgeData);\n\n  // Incrementing node degree counters\n  const isSelfLoop = source === target;\n\n  if (undirected) {\n    sourceData.undirectedDegree++;\n    targetData.undirectedDegree++;\n\n    if (isSelfLoop) graph._undirectedSelfLoopCount++;\n  } else {\n    sourceData.outDegree++;\n    targetData.inDegree++;\n\n    if (isSelfLoop) graph._directedSelfLoopCount++;\n  }\n\n  // Updating relevant index\n  if (graph.multi) edgeData.attachMulti();\n  else edgeData.attach();\n\n  if (undirected) graph._undirectedSize++;\n  else graph._directedSize++;\n\n  // Emitting\n  eventData.key = edge;\n\n  graph.emit('edgeAdded', eventData);\n\n  return [edge, true, sourceWasAdded, targetWasAdded];\n}\n\n/**\n * Internal method used to drop an edge.\n *\n * @param  {Graph}    graph    - Target graph.\n * @param  {EdgeData} edgeData - Data of the edge to drop.\n */\nfunction dropEdgeFromData(graph, edgeData) {\n  // Dropping the edge from the register\n  graph._edges.delete(edgeData.key);\n\n  // Updating related degrees\n  const {source: sourceData, target: targetData, attributes} = edgeData;\n\n  const undirected = edgeData.undirected;\n\n  const isSelfLoop = sourceData === targetData;\n\n  if (undirected) {\n    sourceData.undirectedDegree--;\n    targetData.undirectedDegree--;\n\n    if (isSelfLoop) graph._undirectedSelfLoopCount--;\n  } else {\n    sourceData.outDegree--;\n    targetData.inDegree--;\n\n    if (isSelfLoop) graph._directedSelfLoopCount--;\n  }\n\n  // Clearing index\n  if (graph.multi) edgeData.detachMulti();\n  else edgeData.detach();\n\n  if (undirected) graph._undirectedSize--;\n  else graph._directedSize--;\n\n  // Emitting\n  graph.emit('edgeDropped', {\n    key: edgeData.key,\n    attributes,\n    source: sourceData.key,\n    target: targetData.key,\n    undirected\n  });\n}\n\n/**\n * Graph class\n *\n * @constructor\n * @param  {object}  [options] - Options:\n * @param  {boolean}   [allowSelfLoops] - Allow self loops?\n * @param  {string}    [type]           - Type of the graph.\n * @param  {boolean}   [map]            - Allow references as keys?\n * @param  {boolean}   [multi]          - Allow parallel edges?\n *\n * @throws {Error} - Will throw if the arguments are not valid.\n */\nexport default class Graph extends EventEmitter {\n  constructor(options) {\n    super();\n\n    //-- Solving options\n    options = assign({}, DEFAULTS, options);\n\n    // Enforcing options validity\n    if (typeof options.multi !== 'boolean')\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'multi' option. Expecting a boolean but got \"${options.multi}\".`\n      );\n\n    if (!TYPES.has(options.type))\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'type' option. Should be one of \"mixed\", \"directed\" or \"undirected\" but got \"${options.type}\".`\n      );\n\n    if (typeof options.allowSelfLoops !== 'boolean')\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got \"${options.allowSelfLoops}\".`\n      );\n\n    //-- Private properties\n\n    // Utilities\n    const NodeDataClass =\n      options.type === 'mixed'\n        ? MixedNodeData\n        : options.type === 'directed'\n        ? DirectedNodeData\n        : UndirectedNodeData;\n\n    privateProperty(this, 'NodeDataClass', NodeDataClass);\n\n    // Internal edge key generator\n\n    // NOTE: this internal generator produce keys that are strings\n    // composed of a weird prefix, an incremental instance id starting from\n    // a random byte and finally an internal instance incremental id.\n    // All this to avoid intra-frame and cross-frame adversarial inputs\n    // that can force a single #.addEdge call to degenerate into a O(n)\n    // available key search loop.\n\n    // It also ensures that automatically generated edge keys are unlikely\n    // to produce collisions with arbitrary keys given by users.\n    const instancePrefix = 'geid_' + INSTANCE_ID() + '_';\n    let edgeId = 0;\n\n    const edgeKeyGenerator = () => {\n      let availableEdgeKey;\n\n      do {\n        availableEdgeKey = instancePrefix + edgeId++;\n      } while (this._edges.has(availableEdgeKey));\n\n      return availableEdgeKey;\n    };\n\n    // Indexes\n    privateProperty(this, '_attributes', {});\n    privateProperty(this, '_nodes', new Map());\n    privateProperty(this, '_edges', new Map());\n    privateProperty(this, '_directedSize', 0);\n    privateProperty(this, '_undirectedSize', 0);\n    privateProperty(this, '_directedSelfLoopCount', 0);\n    privateProperty(this, '_undirectedSelfLoopCount', 0);\n    privateProperty(this, '_edgeKeyGenerator', edgeKeyGenerator);\n\n    // Options\n    privateProperty(this, '_options', options);\n\n    // Emitter properties\n    EMITTER_PROPS.forEach(prop => privateProperty(this, prop, this[prop]));\n\n    //-- Properties readers\n    readOnlyProperty(this, 'order', () => this._nodes.size);\n    readOnlyProperty(this, 'size', () => this._edges.size);\n    readOnlyProperty(this, 'directedSize', () => this._directedSize);\n    readOnlyProperty(this, 'undirectedSize', () => this._undirectedSize);\n    readOnlyProperty(\n      this,\n      'selfLoopCount',\n      () => this._directedSelfLoopCount + this._undirectedSelfLoopCount\n    );\n    readOnlyProperty(\n      this,\n      'directedSelfLoopCount',\n      () => this._directedSelfLoopCount\n    );\n    readOnlyProperty(\n      this,\n      'undirectedSelfLoopCount',\n      () => this._undirectedSelfLoopCount\n    );\n    readOnlyProperty(this, 'multi', this._options.multi);\n    readOnlyProperty(this, 'type', this._options.type);\n    readOnlyProperty(this, 'allowSelfLoops', this._options.allowSelfLoops);\n    readOnlyProperty(this, 'implementation', () => 'graphology');\n  }\n\n  _resetInstanceCounters() {\n    this._directedSize = 0;\n    this._undirectedSize = 0;\n    this._directedSelfLoopCount = 0;\n    this._undirectedSelfLoopCount = 0;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Read\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning whether the given node is found in the graph.\n   *\n   * @param  {any}     node - The node.\n   * @return {boolean}\n   */\n  hasNode(node) {\n    return this._nodes.has('' + node);\n  }\n\n  /**\n   * Method returning whether the given directed edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasDirectedEdge(source, target) {\n    // Early termination\n    if (this.type === 'undirected') return false;\n\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      const edgeData = this._edges.get(edge);\n\n      return !!edgeData && !edgeData.undirected;\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      const edges = nodeData.out[target];\n\n      if (!edges) return false;\n\n      return this.multi ? !!edges.size : true;\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning whether the given undirected edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasUndirectedEdge(source, target) {\n    // Early termination\n    if (this.type === 'directed') return false;\n\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      const edgeData = this._edges.get(edge);\n\n      return !!edgeData && edgeData.undirected;\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      const edges = nodeData.undirected[target];\n\n      if (!edges) return false;\n\n      return this.multi ? !!edges.size : true;\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning whether the given edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasEdge(source, target) {\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      return this._edges.has(edge);\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      let edges = typeof nodeData.out !== 'undefined' && nodeData.out[target];\n\n      if (!edges)\n        edges =\n          typeof nodeData.undirected !== 'undefined' &&\n          nodeData.undirected[target];\n\n      if (!edges) return false;\n\n      return this.multi ? !!edges.size : true;\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning the edge matching source & target in a directed fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  directedEdge(source, target) {\n    if (this.type === 'undirected') return;\n\n    source = '' + source;\n    target = '' + target;\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.'\n      );\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.directedEdge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.directedEdge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData = (sourceData.out && sourceData.out[target]) || undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning the edge matching source & target in a undirected fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  undirectedEdge(source, target) {\n    if (this.type === 'directed') return;\n\n    source = '' + source;\n    target = '' + target;\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.'\n      );\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedEdge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.undirectedEdge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData =\n      (sourceData.undirected && sourceData.undirected[target]) || undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning the edge matching source & target in a mixed fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  edge(source, target) {\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.'\n      );\n\n    source = '' + source;\n    target = '' + target;\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.edge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.edge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData =\n      (sourceData.out && sourceData.out[target]) ||\n      (sourceData.undirected && sourceData.undirected[target]) ||\n      undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning whether two nodes are directed neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areDirectedNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areDirectedNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.in || neighbor in nodeData.out;\n  }\n\n  /**\n   * Method returning whether two nodes are out neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areOutNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areOutNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.out;\n  }\n\n  /**\n   * Method returning whether two nodes are in neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areInNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areInNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.in;\n  }\n\n  /**\n   * Method returning whether two nodes are undirected neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areUndirectedNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areUndirectedNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return false;\n\n    return neighbor in nodeData.undirected;\n  }\n\n  /**\n   * Method returning whether two nodes are neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.in || neighbor in nodeData.out) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether two nodes are inbound neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areInboundNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areInboundNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.in) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether two nodes are outbound neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areOutboundNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areOutboundNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.out) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning the given node's in degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree;\n  }\n\n  /**\n   * Method returning the given node's out degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.outDegree;\n  }\n\n  /**\n   * Method returning the given node's directed degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  directedDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.directedDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree + nodeData.outDegree;\n  }\n\n  /**\n   * Method returning the given node's undirected degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  undirectedDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return 0;\n\n    return nodeData.undirectedDegree;\n  }\n\n  /**\n   * Method returning the given node's inbound degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's inbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inboundDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inboundDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given node's outbound degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's outbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outboundDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outboundDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.outDegree;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given node's directed degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  degree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.degree: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree + nodeData.outDegree;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given node's in degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    const self = nodeData.in[node];\n    const loops = self ? (this.multi ? self.size : 1) : 0;\n\n    return nodeData.inDegree - loops;\n  }\n\n  /**\n   * Method returning the given node's out degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    const self = nodeData.out[node];\n    const loops = self ? (this.multi ? self.size : 1) : 0;\n\n    return nodeData.outDegree - loops;\n  }\n\n  /**\n   * Method returning the given node's directed degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  directedDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.directedDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    const self = nodeData.out[node];\n    const loops = self ? (this.multi ? self.size : 1) : 0;\n\n    return nodeData.inDegree + nodeData.outDegree - loops * 2;\n  }\n\n  /**\n   * Method returning the given node's undirected degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  undirectedDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return 0;\n\n    const self = nodeData.undirected[node];\n    const loops = self ? (this.multi ? self.size : 1) : 0;\n\n    return nodeData.undirectedDegree - loops * 2;\n  }\n\n  /**\n   * Method returning the given node's inbound degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's inbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inboundDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inboundDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    let self;\n    let degree = 0;\n    let loops = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n\n      self = nodeData.undirected[node];\n      loops += (self ? (this.multi ? self.size : 1) : 0) * 2;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree;\n\n      self = nodeData.out[node];\n      loops += self ? (this.multi ? self.size : 1) : 0;\n    }\n\n    return degree - loops;\n  }\n\n  /**\n   * Method returning the given node's outbound degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's outbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outboundDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outboundDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    let self;\n    let degree = 0;\n    let loops = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n\n      self = nodeData.undirected[node];\n      loops += (self ? (this.multi ? self.size : 1) : 0) * 2;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.outDegree;\n\n      self = nodeData.in[node];\n      loops += self ? (this.multi ? self.size : 1) : 0;\n    }\n\n    return degree - loops;\n  }\n\n  /**\n   * Method returning the given node's directed degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  degreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.degreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    let self;\n    let degree = 0;\n    let loops = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n\n      self = nodeData.undirected[node];\n      loops += (self ? (this.multi ? self.size : 1) : 0) * 2;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree + nodeData.outDegree;\n\n      self = nodeData.out[node];\n      loops += (self ? (this.multi ? self.size : 1) : 0) * 2;\n    }\n\n    return degree - loops;\n  }\n\n  /**\n   * Method returning the given edge's source.\n   *\n   * @param  {any} edge - The edge's key.\n   * @return {any}      - The edge's source.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  source(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.source: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source.key;\n  }\n\n  /**\n   * Method returning the given edge's target.\n   *\n   * @param  {any} edge - The edge's key.\n   * @return {any}      - The edge's target.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  target(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.target: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.target.key;\n  }\n\n  /**\n   * Method returning the given edge's extremities.\n   *\n   * @param  {any}   edge - The edge's key.\n   * @return {array}      - The edge's extremities.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  extremities(edge) {\n    edge = '' + edge;\n\n    const edgeData = this._edges.get(edge);\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.extremities: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return [edgeData.source.key, edgeData.target.key];\n  }\n\n  /**\n   * Given a node & an edge, returns the other extremity of the edge.\n   *\n   * @param  {any}   node - The node's key.\n   * @param  {any}   edge - The edge's key.\n   * @return {any}        - The related node.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph or if the\n   *                   edge & node are not related.\n   */\n  opposite(node, edge) {\n    node = '' + node;\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.opposite: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    const source = data.source.key;\n    const target = data.target.key;\n\n    if (node === source) return target;\n    if (node === target) return source;\n\n    throw new NotFoundGraphError(\n      `Graph.opposite: the \"${node}\" node is not attached to the \"${edge}\" edge (${source}, ${target}).`\n    );\n  }\n\n  /**\n   * Returns whether the given edge has the given node as extremity.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @param  {any}     node - The node's key.\n   * @return {boolean}      - The related node.\n   *\n   * @throws {Error} - Will throw if either the node or the edge isn't in the graph.\n   */\n  hasExtremity(edge, node) {\n    edge = '' + edge;\n    node = '' + node;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.hasExtremity: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source.key === node || data.target.key === node;\n  }\n\n  /**\n   * Method returning whether the given edge is undirected.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isUndirected(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isUndirected: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.undirected;\n  }\n\n  /**\n   * Method returning whether the given edge is directed.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isDirected(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isDirected: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return !data.undirected;\n  }\n\n  /**\n   * Method returning whether the given edge is a self loop.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isSelfLoop(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isSelfLoop: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source === data.target;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Mutation\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used to add a node to the graph.\n   *\n   * @param  {any}    node         - The node.\n   * @param  {object} [attributes] - Optional attributes.\n   * @return {any}                 - The node.\n   *\n   * @throws {Error} - Will throw if the given node already exist.\n   * @throws {Error} - Will throw if the given attributes are not an object.\n   */\n  addNode(node, attributes) {\n    const nodeData = addNode(this, node, attributes);\n\n    return nodeData.key;\n  }\n\n  /**\n   * Method used to merge a node into the graph.\n   *\n   * @param  {any}    node         - The node.\n   * @param  {object} [attributes] - Optional attributes.\n   * @return {any}                 - The node.\n   */\n  mergeNode(node, attributes) {\n    if (attributes && !isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.mergeNode: invalid attributes. Expecting an object but got \"${attributes}\"`\n      );\n\n    // String coercion\n    node = '' + node;\n    attributes = attributes || {};\n\n    // If the node already exists, we merge the attributes\n    let data = this._nodes.get(node);\n\n    if (data) {\n      if (attributes) {\n        assign(data.attributes, attributes);\n\n        this.emit('nodeAttributesUpdated', {\n          type: 'merge',\n          key: node,\n          attributes: data.attributes,\n          data: attributes\n        });\n      }\n      return [node, false];\n    }\n\n    data = new this.NodeDataClass(node, attributes);\n\n    // Adding the node to internal register\n    this._nodes.set(node, data);\n\n    // Emitting\n    this.emit('nodeAdded', {\n      key: node,\n      attributes\n    });\n\n    return [node, true];\n  }\n\n  /**\n   * Method used to add a node if it does not exist in the graph or else to\n   * update its attributes using a function.\n   *\n   * @param  {any}      node      - The node.\n   * @param  {function} [updater] - Optional updater function.\n   * @return {any}                - The node.\n   */\n  updateNode(node, updater) {\n    if (updater && typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.updateNode: invalid updater function. Expecting a function but got \"${updater}\"`\n      );\n\n    // String coercion\n    node = '' + node;\n\n    // If the node already exists, we update the attributes\n    let data = this._nodes.get(node);\n\n    if (data) {\n      if (updater) {\n        const oldAttributes = data.attributes;\n        data.attributes = updater(oldAttributes);\n\n        this.emit('nodeAttributesUpdated', {\n          type: 'replace',\n          key: node,\n          attributes: data.attributes\n        });\n      }\n      return [node, false];\n    }\n\n    const attributes = updater ? updater({}) : {};\n\n    data = new this.NodeDataClass(node, attributes);\n\n    // Adding the node to internal register\n    this._nodes.set(node, data);\n\n    // Emitting\n    this.emit('nodeAdded', {\n      key: node,\n      attributes\n    });\n\n    return [node, true];\n  }\n\n  /**\n   * Method used to drop a single node & all its attached edges from the graph.\n   *\n   * @param  {any}    node - The node.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the node doesn't exist.\n   */\n  dropNode(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.dropNode: could not find the \"${node}\" node in the graph.`\n      );\n\n    let edgeData;\n\n    // Removing attached edges\n    // NOTE: we could be faster here, but this is such a pain to maintain\n    if (this.type !== 'undirected') {\n      for (const neighbor in nodeData.out) {\n        edgeData = nodeData.out[neighbor];\n\n        do {\n          dropEdgeFromData(this, edgeData);\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n\n      for (const neighbor in nodeData.in) {\n        edgeData = nodeData.in[neighbor];\n\n        do {\n          dropEdgeFromData(this, edgeData);\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    if (this.type !== 'directed') {\n      for (const neighbor in nodeData.undirected) {\n        edgeData = nodeData.undirected[neighbor];\n\n        do {\n          dropEdgeFromData(this, edgeData);\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    // Dropping the node from the register\n    this._nodes.delete(node);\n\n    // Emitting\n    this.emit('nodeDropped', {\n      key: node,\n      attributes: nodeData.attributes\n    });\n  }\n\n  /**\n   * Method used to drop a single edge from the graph.\n   *\n   * Arity 1:\n   * @param  {any}    edge - The edge.\n   *\n   * Arity 2:\n   * @param  {any}    source - Source node.\n   * @param  {any}    target - Target node.\n   *\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the edge doesn't exist.\n   */\n  dropEdge(edge) {\n    let edgeData;\n\n    if (arguments.length > 1) {\n      const source = '' + arguments[0];\n      const target = '' + arguments[1];\n\n      edgeData = getMatchingEdge(this, source, target, this.type);\n\n      if (!edgeData)\n        throw new NotFoundGraphError(\n          `Graph.dropEdge: could not find the \"${source}\" -> \"${target}\" edge in the graph.`\n        );\n    } else {\n      edge = '' + edge;\n\n      edgeData = this._edges.get(edge);\n\n      if (!edgeData)\n        throw new NotFoundGraphError(\n          `Graph.dropEdge: could not find the \"${edge}\" edge in the graph.`\n        );\n    }\n\n    dropEdgeFromData(this, edgeData);\n\n    return this;\n  }\n\n  /**\n   * Method used to drop a single directed edge from the graph.\n   *\n   * @param  {any}    source - Source node.\n   * @param  {any}    target - Target node.\n   *\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the edge doesn't exist.\n   */\n  dropDirectedEdge(source, target) {\n    if (arguments.length < 2)\n      throw new UsageGraphError(\n        'Graph.dropDirectedEdge: it does not make sense to try and drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.'\n      );\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.dropDirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.'\n      );\n\n    source = '' + source;\n    target = '' + target;\n\n    const edgeData = getMatchingEdge(this, source, target, 'directed');\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.dropDirectedEdge: could not find a \"${source}\" -> \"${target}\" edge in the graph.`\n      );\n\n    dropEdgeFromData(this, edgeData);\n\n    return this;\n  }\n\n  /**\n   * Method used to drop a single undirected edge from the graph.\n   *\n   * @param  {any}    source - Source node.\n   * @param  {any}    target - Target node.\n   *\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the edge doesn't exist.\n   */\n  dropUndirectedEdge(source, target) {\n    if (arguments.length < 2)\n      throw new UsageGraphError(\n        'Graph.dropUndirectedEdge: it does not make sense to drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.'\n      );\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.dropUndirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.'\n      );\n\n    const edgeData = getMatchingEdge(this, source, target, 'undirected');\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.dropUndirectedEdge: could not find a \"${source}\" -> \"${target}\" edge in the graph.`\n      );\n\n    dropEdgeFromData(this, edgeData);\n\n    return this;\n  }\n\n  /**\n   * Method used to remove every edge & every node from the graph.\n   *\n   * @return {Graph}\n   */\n  clear() {\n    // Clearing edges\n    this._edges.clear();\n\n    // Clearing nodes\n    this._nodes.clear();\n\n    // Reset counters\n    this._resetInstanceCounters();\n\n    // Emitting\n    this.emit('cleared');\n  }\n\n  /**\n   * Method used to remove every edge from the graph.\n   *\n   * @return {Graph}\n   */\n  clearEdges() {\n    // Clearing structure index\n    const iterator = this._nodes.values();\n\n    let step;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      step.value.clear();\n    }\n\n    // Clearing edges\n    this._edges.clear();\n\n    // Reset counters\n    this._resetInstanceCounters();\n\n    // Emitting\n    this.emit('edgesCleared');\n  }\n\n  /**---------------------------------------------------------------------------\n   * Attributes-related methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning the desired graph's attribute.\n   *\n   * @param  {string} name - Name of the attribute.\n   * @return {any}\n   */\n  getAttribute(name) {\n    return this._attributes[name];\n  }\n\n  /**\n   * Method returning the graph's attributes.\n   *\n   * @return {object}\n   */\n  getAttributes() {\n    return this._attributes;\n  }\n\n  /**\n   * Method returning whether the graph has the desired attribute.\n   *\n   * @param  {string}  name - Name of the attribute.\n   * @return {boolean}\n   */\n  hasAttribute(name) {\n    return this._attributes.hasOwnProperty(name);\n  }\n\n  /**\n   * Method setting a value for the desired graph's attribute.\n   *\n   * @param  {string}  name  - Name of the attribute.\n   * @param  {any}     value - Value for the attribute.\n   * @return {Graph}\n   */\n  setAttribute(name, value) {\n    this._attributes[name] = value;\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'set',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method using a function to update the desired graph's attribute's value.\n   *\n   * @param  {string}   name    - Name of the attribute.\n   * @param  {function} updater - Function use to update the attribute's value.\n   * @return {Graph}\n   */\n  updateAttribute(name, updater) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateAttribute: updater should be a function.'\n      );\n\n    const value = this._attributes[name];\n\n    this._attributes[name] = updater(value);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'set',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method removing the desired graph's attribute.\n   *\n   * @param  {string} name  - Name of the attribute.\n   * @return {Graph}\n   */\n  removeAttribute(name) {\n    delete this._attributes[name];\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'remove',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method replacing the graph's attributes.\n   *\n   * @param  {object} attributes - New attributes.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given attributes are not a plain object.\n   */\n  replaceAttributes(attributes) {\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        'Graph.replaceAttributes: provided attributes are not a plain object.'\n      );\n\n    this._attributes = attributes;\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'replace',\n      attributes: this._attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method merging the graph's attributes.\n   *\n   * @param  {object} attributes - Attributes to merge.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given attributes are not a plain object.\n   */\n  mergeAttributes(attributes) {\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        'Graph.mergeAttributes: provided attributes are not a plain object.'\n      );\n\n    assign(this._attributes, attributes);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'merge',\n      attributes: this._attributes,\n      data: attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method updating the graph's attributes.\n   *\n   * @param  {function} updater - Function used to update the attributes.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given updater is not a function.\n   */\n  updateAttributes(updater) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateAttributes: provided updater is not a function.'\n      );\n\n    this._attributes = updater(this._attributes);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'update',\n      attributes: this._attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method used to update each node's attributes using the given function.\n   *\n   * @param {function}  updater - Updater function to use.\n   * @param {object}    [hints] - Optional hints.\n   */\n  updateEachNodeAttributes(updater, hints) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachNodeAttributes: expecting an updater function.'\n      );\n\n    if (hints && !validateHints(hints))\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      nodeData.attributes = updater(nodeData.key, nodeData.attributes);\n    }\n\n    this.emit('eachNodeAttributesUpdated', {\n      hints: hints ? hints : null\n    });\n  }\n\n  /**\n   * Method used to update each edge's attributes using the given function.\n   *\n   * @param {function}  updater - Updater function to use.\n   * @param {object}    [hints] - Optional hints.\n   */\n  updateEachEdgeAttributes(updater, hints) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachEdgeAttributes: expecting an updater function.'\n      );\n\n    if (hints && !validateHints(hints))\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}'\n      );\n\n    const iterator = this._edges.values();\n\n    let step, edgeData, sourceData, targetData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      edgeData = step.value;\n      sourceData = edgeData.source;\n      targetData = edgeData.target;\n\n      edgeData.attributes = updater(\n        edgeData.key,\n        edgeData.attributes,\n        sourceData.key,\n        targetData.key,\n        sourceData.attributes,\n        targetData.attributes,\n        edgeData.undirected\n      );\n    }\n\n    this.emit('eachEdgeAttributesUpdated', {\n      hints: hints ? hints : null\n    });\n  }\n\n  /**---------------------------------------------------------------------------\n   * Iteration-related methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method iterating over the graph's adjacency using the given callback.\n   *\n   * @param  {function}  callback - Callback to use.\n   */\n  forEachAdjacencyEntry(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAdjacencyEntry: expecting a callback.'\n      );\n\n    forEachAdjacency(false, false, false, this, callback);\n  }\n  forEachAdjacencyEntryWithOrphans(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAdjacencyEntryWithOrphans: expecting a callback.'\n      );\n\n    forEachAdjacency(false, false, true, this, callback);\n  }\n\n  /**\n   * Method iterating over the graph's assymetric adjacency using the given callback.\n   *\n   * @param  {function}  callback - Callback to use.\n   */\n  forEachAssymetricAdjacencyEntry(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAssymetricAdjacencyEntry: expecting a callback.'\n      );\n\n    forEachAdjacency(false, true, false, this, callback);\n  }\n  forEachAssymetricAdjacencyEntryWithOrphans(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAssymetricAdjacencyEntryWithOrphans: expecting a callback.'\n      );\n\n    forEachAdjacency(false, true, true, this, callback);\n  }\n\n  /**\n   * Method returning the list of the graph's nodes.\n   *\n   * @return {array} - The nodes.\n   */\n  nodes() {\n    if (typeof Array.from === 'function') return Array.from(this._nodes.keys());\n\n    return take(this._nodes.keys(), this._nodes.size);\n  }\n\n  /**\n   * Method iterating over the graph's nodes using the given callback.\n   *\n   * @param  {function}  callback - Callback (key, attributes, index).\n   */\n  forEachNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      callback(nodeData.key, nodeData.attributes);\n    }\n  }\n\n  /**\n   * Method iterating attempting to find a node matching the given predicate\n   * function.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  findNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.findNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes)) return nodeData.key;\n    }\n\n    return;\n  }\n\n  /**\n   * Method mapping nodes.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  mapNodes(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.mapNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    const result = new Array(this.order);\n    let i = 0;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      result[i++] = callback(nodeData.key, nodeData.attributes);\n    }\n\n    return result;\n  }\n\n  /**\n   * Method returning whether some node verify the given predicate.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  someNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.someNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes)) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether all node verify the given predicate.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  everyNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.everyNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (!callback(nodeData.key, nodeData.attributes)) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Method filtering nodes.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  filterNodes(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.filterNodes: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    const result = [];\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes))\n        result.push(nodeData.key);\n    }\n\n    return result;\n  }\n\n  /**\n   * Method reducing nodes.\n   *\n   * @param  {function}  callback - Callback (accumulator, key, attributes).\n   */\n  reduceNodes(callback, initialValue) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.reduceNodes: expecting a callback.'\n      );\n\n    if (arguments.length < 2)\n      throw new InvalidArgumentsGraphError(\n        'Graph.reduceNodes: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.'\n      );\n\n    let accumulator = initialValue;\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      accumulator = callback(accumulator, nodeData.key, nodeData.attributes);\n    }\n\n    return accumulator;\n  }\n\n  /**\n   * Method returning an iterator over the graph's node entries.\n   *\n   * @return {Iterator}\n   */\n  nodeEntries() {\n    const iterator = this._nodes.values();\n\n    return new Iterator(() => {\n      const step = iterator.next();\n\n      if (step.done) return step;\n\n      const data = step.value;\n\n      return {\n        value: {node: data.key, attributes: data.attributes},\n        done: false\n      };\n    });\n  }\n\n  /**---------------------------------------------------------------------------\n   * Serialization\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used to export the whole graph.\n   *\n   * @return {object} - The serialized graph.\n   */\n  export() {\n    const nodes = new Array(this._nodes.size);\n\n    let i = 0;\n\n    this._nodes.forEach((data, key) => {\n      nodes[i++] = serializeNode(key, data);\n    });\n\n    const edges = new Array(this._edges.size);\n\n    i = 0;\n\n    this._edges.forEach((data, key) => {\n      edges[i++] = serializeEdge(this.type, key, data);\n    });\n\n    return {\n      options: {\n        type: this.type,\n        multi: this.multi,\n        allowSelfLoops: this.allowSelfLoops\n      },\n      attributes: this.getAttributes(),\n      nodes,\n      edges\n    };\n  }\n\n  /**\n   * Method used to import a serialized graph.\n   *\n   * @param  {object|Graph} data  - The serialized graph.\n   * @param  {boolean}      merge - Whether to merge data.\n   * @return {Graph}              - Returns itself for chaining.\n   */\n  import(data, merge = false) {\n    // Importing a Graph instance directly\n    if (data instanceof Graph) {\n      // Nodes\n      data.forEachNode((n, a) => {\n        if (merge) this.mergeNode(n, a);\n        else this.addNode(n, a);\n      });\n\n      // Edges\n      data.forEachEdge((e, a, s, t, _sa, _ta, u) => {\n        if (merge) {\n          if (u) this.mergeUndirectedEdgeWithKey(e, s, t, a);\n          else this.mergeDirectedEdgeWithKey(e, s, t, a);\n        } else {\n          if (u) this.addUndirectedEdgeWithKey(e, s, t, a);\n          else this.addDirectedEdgeWithKey(e, s, t, a);\n        }\n      });\n\n      return this;\n    }\n\n    // Importing a serialized graph\n    if (!isPlainObject(data))\n      throw new InvalidArgumentsGraphError(\n        'Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.'\n      );\n\n    if (data.attributes) {\n      if (!isPlainObject(data.attributes))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid attributes. Expecting a plain object.'\n        );\n\n      if (merge) this.mergeAttributes(data.attributes);\n      else this.replaceAttributes(data.attributes);\n    }\n\n    let i, l, list, node, edge;\n\n    if (data.nodes) {\n      list = data.nodes;\n\n      if (!Array.isArray(list))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid nodes. Expecting an array.'\n        );\n\n      for (i = 0, l = list.length; i < l; i++) {\n        node = list[i];\n\n        // Validating\n        validateSerializedNode(node);\n\n        // Adding the node\n        const {key, attributes} = node;\n\n        if (merge) this.mergeNode(key, attributes);\n        else this.addNode(key, attributes);\n      }\n    }\n\n    if (data.edges) {\n      let undirectedByDefault = false;\n\n      if (this.type === 'undirected') {\n        undirectedByDefault = true;\n      }\n\n      list = data.edges;\n\n      if (!Array.isArray(list))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid edges. Expecting an array.'\n        );\n\n      for (i = 0, l = list.length; i < l; i++) {\n        edge = list[i];\n\n        // Validating\n        validateSerializedEdge(edge);\n\n        // Adding the edge\n        const {\n          source,\n          target,\n          attributes,\n          undirected = undirectedByDefault\n        } = edge;\n\n        let method;\n\n        if ('key' in edge) {\n          method = merge\n            ? undirected\n              ? this.mergeUndirectedEdgeWithKey\n              : this.mergeDirectedEdgeWithKey\n            : undirected\n            ? this.addUndirectedEdgeWithKey\n            : this.addDirectedEdgeWithKey;\n\n          method.call(this, edge.key, source, target, attributes);\n        } else {\n          method = merge\n            ? undirected\n              ? this.mergeUndirectedEdge\n              : this.mergeDirectedEdge\n            : undirected\n            ? this.addUndirectedEdge\n            : this.addDirectedEdge;\n\n          method.call(this, source, target, attributes);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Utils\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning a null copy of the graph, i.e. a graph without nodes\n   * & edges but with the exact same options.\n   *\n   * @param  {object} options - Options to merge with the current ones.\n   * @return {Graph}          - The null copy.\n   */\n  nullCopy(options) {\n    const graph = new Graph(assign({}, this._options, options));\n    graph.replaceAttributes(assign({}, this.getAttributes()));\n    return graph;\n  }\n\n  /**\n   * Method returning an empty copy of the graph, i.e. a graph without edges but\n   * with the exact same options.\n   *\n   * @param  {object} options - Options to merge with the current ones.\n   * @return {Graph}          - The empty copy.\n   */\n  emptyCopy(options) {\n    const graph = this.nullCopy(options);\n\n    this._nodes.forEach((nodeData, key) => {\n      const attributes = assign({}, nodeData.attributes);\n\n      // NOTE: no need to emit events since user cannot access the instance yet\n      nodeData = new graph.NodeDataClass(key, attributes);\n      graph._nodes.set(key, nodeData);\n    });\n\n    return graph;\n  }\n\n  /**\n   * Method returning an exact copy of the graph.\n   *\n   * @param  {object} options - Upgrade options.\n   * @return {Graph}          - The copy.\n   */\n  copy(options) {\n    options = options || {};\n\n    if (\n      typeof options.type === 'string' &&\n      options.type !== this.type &&\n      options.type !== 'mixed'\n    )\n      throw new UsageGraphError(\n        `Graph.copy: cannot create an incompatible copy from \"${this.type}\" type to \"${options.type}\" because this would mean losing information about the current graph.`\n      );\n\n    if (\n      typeof options.multi === 'boolean' &&\n      options.multi !== this.multi &&\n      options.multi !== true\n    )\n      throw new UsageGraphError(\n        'Graph.copy: cannot create an incompatible copy by downgrading a multi graph to a simple one because this would mean losing information about the current graph.'\n      );\n\n    if (\n      typeof options.allowSelfLoops === 'boolean' &&\n      options.allowSelfLoops !== this.allowSelfLoops &&\n      options.allowSelfLoops !== true\n    )\n      throw new UsageGraphError(\n        'Graph.copy: cannot create an incompatible copy from a graph allowing self loops to one that does not because this would mean losing information about the current graph.'\n      );\n\n    const graph = this.emptyCopy(options);\n\n    const iterator = this._edges.values();\n\n    let step, edgeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      edgeData = step.value;\n\n      // NOTE: no need to emit events since user cannot access the instance yet\n      addEdge(\n        graph,\n        'copy',\n        false,\n        edgeData.undirected,\n        edgeData.key,\n        edgeData.source.key,\n        edgeData.target.key,\n        assign({}, edgeData.attributes)\n      );\n    }\n\n    return graph;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Known methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used by JavaScript to perform JSON serialization.\n   *\n   * @return {object} - The serialized graph.\n   */\n  toJSON() {\n    return this.export();\n  }\n\n  /**\n   * Method returning [object Graph].\n   */\n  toString() {\n    return '[object Graph]';\n  }\n\n  /**\n   * Method used internally by node's console to display a custom object.\n   *\n   * @return {object} - Formatted object representation of the graph.\n   */\n  inspect() {\n    const nodes = {};\n    this._nodes.forEach((data, key) => {\n      nodes[key] = data.attributes;\n    });\n\n    const edges = {},\n      multiIndex = {};\n\n    this._edges.forEach((data, key) => {\n      const direction = data.undirected ? '--' : '->';\n\n      let label = '';\n\n      let source = data.source.key;\n      let target = data.target.key;\n      let tmp;\n\n      if (data.undirected && source > target) {\n        tmp = source;\n        source = target;\n        target = tmp;\n      }\n\n      const desc = `(${source})${direction}(${target})`;\n\n      if (!key.startsWith('geid_')) {\n        label += `[${key}]: `;\n      } else if (this.multi) {\n        if (typeof multiIndex[desc] === 'undefined') {\n          multiIndex[desc] = 0;\n        } else {\n          multiIndex[desc]++;\n        }\n\n        label += `${multiIndex[desc]}. `;\n      }\n\n      label += desc;\n\n      edges[label] = data.attributes;\n    });\n\n    const dummy = {};\n\n    for (const k in this) {\n      if (\n        this.hasOwnProperty(k) &&\n        !EMITTER_PROPS.has(k) &&\n        typeof this[k] !== 'function' &&\n        typeof k !== 'symbol'\n      )\n        dummy[k] = this[k];\n    }\n\n    dummy.attributes = this._attributes;\n    dummy.nodes = nodes;\n    dummy.edges = edges;\n\n    privateProperty(dummy, 'constructor', this.constructor);\n\n    return dummy;\n  }\n}\n\n/**\n * Attaching methods to the prototype.\n *\n * Here, we are attaching a wide variety of methods to the Graph class'\n * prototype when those are very numerous and when their creation is\n * abstracted.\n */\n\n/**\n * Attaching custom inspect method for node >= 10.\n */\nif (typeof Symbol !== 'undefined')\n  Graph.prototype[Symbol.for('nodejs.util.inspect.custom')] =\n    Graph.prototype.inspect;\n\n/**\n * Related to edge addition.\n */\nEDGE_ADD_METHODS.forEach(method => {\n  ['add', 'merge', 'update'].forEach(verb => {\n    const name = method.name(verb);\n    const fn = verb === 'add' ? addEdge : mergeEdge;\n\n    if (method.generateKey) {\n      Graph.prototype[name] = function (source, target, attributes) {\n        return fn(\n          this,\n          name,\n          true,\n          (method.type || this.type) === 'undirected',\n          null,\n          source,\n          target,\n          attributes,\n          verb === 'update'\n        );\n      };\n    } else {\n      Graph.prototype[name] = function (edge, source, target, attributes) {\n        return fn(\n          this,\n          name,\n          false,\n          (method.type || this.type) === 'undirected',\n          edge,\n          source,\n          target,\n          attributes,\n          verb === 'update'\n        );\n      };\n    }\n  });\n});\n\n/**\n * Attributes-related.\n */\nattachNodeAttributesMethods(Graph);\nattachEdgeAttributesMethods(Graph);\n\n/**\n * Edge iteration-related.\n */\nattachEdgeIterationMethods(Graph);\n\n/**\n * Neighbor iteration-related.\n */\nattachNeighborIterationMethods(Graph);\n","/**\n * Graphology Helper Classes\n * ==========================\n *\n * Building some higher-order classes instantiating the graph with\n * predefinite options.\n */\nimport {assign} from './utils';\nimport Graph from './graph';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\n/**\n * Alternative constructors.\n */\nclass DirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'directed'}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== false)\n      throw new InvalidArgumentsGraphError(\n        'DirectedGraph.from: inconsistent indication that the graph should be multi in given options!'\n      );\n\n    if (finalOptions.type !== 'directed')\n      throw new InvalidArgumentsGraphError(\n        'DirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass UndirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'undirected'}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== false)\n      throw new InvalidArgumentsGraphError(\n        'UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!'\n      );\n\n    if (finalOptions.type !== 'undirected')\n      throw new InvalidArgumentsGraphError(\n        'UndirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiDirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'directed', multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    if (finalOptions.type !== 'directed')\n      throw new InvalidArgumentsGraphError(\n        'MultiDirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiUndirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'undirected', multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    if (finalOptions.type !== 'undirected')\n      throw new InvalidArgumentsGraphError(\n        'MultiUndirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\n\n/**\n * Attaching static #.from method to each of the constructors.\n */\nfunction attachStaticFromMethod(Class) {\n  /**\n   * Builds a graph from serialized data or another graph's data.\n   *\n   * @param  {Graph|SerializedGraph} data      - Hydratation data.\n   * @param  {object}                [options] - Options.\n   * @return {Class}\n   */\n  Class.from = function (data, options) {\n    // Merging given options with serialized ones\n    const finalOptions = assign({}, data.options, options);\n\n    const instance = new Class(finalOptions);\n    instance.import(data);\n\n    return instance;\n  };\n}\n\nattachStaticFromMethod(Graph);\nattachStaticFromMethod(DirectedGraph);\nattachStaticFromMethod(UndirectedGraph);\nattachStaticFromMethod(MultiGraph);\nattachStaticFromMethod(MultiDirectedGraph);\nattachStaticFromMethod(MultiUndirectedGraph);\n\nGraph.Graph = Graph;\nGraph.DirectedGraph = DirectedGraph;\nGraph.UndirectedGraph = UndirectedGraph;\nGraph.MultiGraph = MultiGraph;\nGraph.MultiDirectedGraph = MultiDirectedGraph;\nGraph.MultiUndirectedGraph = MultiUndirectedGraph;\n\nGraph.InvalidArgumentsGraphError = InvalidArgumentsGraphError;\nGraph.NotFoundGraphError = NotFoundGraphError;\nGraph.UsageGraphError = UsageGraphError;\n\nexport {\n  Graph,\n  DirectedGraph,\n  UndirectedGraph,\n  MultiGraph,\n  MultiDirectedGraph,\n  MultiUndirectedGraph\n};\n"],"names":["assign","target","arguments","i","l","length","k","getMatchingEdge","graph","source","type","sourceData","_nodes","get","edge","out","undirected","isPlainObject","value","_typeof","constructor","Object","isEmpty","o","privateProperty","name","defineProperty","enumerable","configurable","writable","readOnlyProperty","descriptor","validateHints","hints","attributes","Array","isArray","ReflectOwnKeys","R","Reflect","ReflectApply","apply","receiver","args","Function","prototype","call","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","concat","NumberIsNaN","Number","isNaN","EventEmitter","init","this","eventsModule","exports","events","once","emitter","Promise","resolve","reject","errorListener","err","removeListener","resolver","slice","eventTargetAgnosticAddListener","handler","flags","on","addErrorHandlerIfEventEmitter","_events","undefined","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","listener","TypeError","_getMaxListeners","that","_addListener","prepend","m","existing","warning","create","newListener","emit","unshift","push","warned","w","Error","String","count","console","warn","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","bind","_listeners","unwrap","evlistener","arr","ret","unwrapListeners","arrayClone","listenerCount","n","copy","addEventListener","wrapListener","arg","removeEventListener","Iterator","next","set","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","error","er","message","context","len","listeners","addListener","prependListener","prependOnceListener","list","position","originalListener","shift","index","pop","spliceOne","off","removeAllListeners","key","keys","rawListeners","eventNames","Symbol","iterator","Iterator$2","of","done","empty","fromSequence","sequence","is","support","ARRAY_BUFFER_SUPPORT","ArrayBuffer","SYMBOL_SUPPORT","require$$0","require$$1","iter","isView","iterOrNull","take","iterable","step","Infinity","array","GraphError","_Error","_this","_inheritsLoose","_wrapNativeSuper","InvalidArgumentsGraphError","_GraphError","_this2","captureStackTrace","NotFoundGraphError","_GraphError2","_this3","UsageGraphError","_GraphError3","_this4","MixedNodeData","clear","DirectedNodeData","UndirectedNodeData","EdgeData","inDegree","outDegree","undirectedDegree","attach","outKey","inKey","attachMulti","adj","head","previous","detach","detachMulti","findRelevantNodeData","method","mode","nodeOrEdge","nameOrEdge","add1","add2","nodeData","edgeData","arg1","arg2","_edges","NODE_ATTRIBUTES_METHODS","element","attacher","Class","_findRelevantNodeData","data","_findRelevantNodeData3","hasOwnProperty","_findRelevantNodeData4","_findRelevantNodeData5","updater","_findRelevantNodeData6","_findRelevantNodeData7","_findRelevantNodeData8","_findRelevantNodeData9","EDGE_ATTRIBUTES_METHODS","multi","chain","iterables","current","EDGES_ITERATION","direction","forEachSimple","breakable","object","callback","avoid","shouldBreak","forEachMulti","createIterator","sourceAttributes","targetAttributes","forEachForKeySimple","targetData","forEachForKeyMulti","createIteratorForKey","createEdgeArray","size","from","undirectedSize","directedSize","mask","values","forEachEdge","shouldFilter","_data","createEdgeIterator","forEachEdgeForNode","found","fn","createEdgeArrayForNode","edges","createEdgeIteratorForNode","forEachEdgeForPath","createEdgeArrayForPath","createEdgeIteratorForPath","NEIGHBORS_ITERATION","CompositeSetWrapper","A","B","forEachInObjectOnce","visited","neighborData","has","forEachNeighbor","wrap","createDedupedObjectIterator","neighbor","attachNeighborArrayCreator","description","node","neighbors","createNeighborArrayForNode","attachNeighborIteratorCreator","iteratorName","createNeighborIterator","forEachAdjacency","assymetric","disconnectedNodes","hasEdges","validateSerializedNode","validateSerializedEdge","INSTANCE_ID","Math","floor","random","TYPES","Set","EMITTER_PROPS","DEFAULTS","allowSelfLoops","unsafeAddNode","NodeDataClass","addEdge","mustGenerateKey","eventData","_edgeKeyGenerator","isSelfLoop","_undirectedSelfLoopCount","_directedSelfLoopCount","_undirectedSize","_directedSize","mergeEdge","asUpdater","alreadyExistingEdgeData","info","oldAttributes","sourceWasAdded","targetWasAdded","dropEdgeFromData","Graph","options","_EventEmitter","_assertThisInitialized","instancePrefix","edgeId","Map","availableEdgeKey","forEach","prop","_options","_resetInstanceCounters","hasNode","hasDirectedEdge","hasUndirectedEdge","hasEdge","directedEdge","undirectedEdge","areDirectedNeighbors","areOutNeighbors","areInNeighbors","areUndirectedNeighbors","areNeighbors","areInboundNeighbors","areOutboundNeighbors","directedDegree","inboundDegree","degree","outboundDegree","inDegreeWithoutSelfLoops","self","loops","outDegreeWithoutSelfLoops","directedDegreeWithoutSelfLoops","undirectedDegreeWithoutSelfLoops","inboundDegreeWithoutSelfLoops","outboundDegreeWithoutSelfLoops","degreeWithoutSelfLoops","extremities","opposite","hasExtremity","isUndirected","isDirected","addNode","mergeNode","updateNode","dropNode","dropEdge","dropDirectedEdge","dropUndirectedEdge","clearEdges","getAttribute","_attributes","getAttributes","hasAttribute","setAttribute","updateAttribute","removeAttribute","replaceAttributes","mergeAttributes","updateAttributes","updateEachNodeAttributes","updateEachEdgeAttributes","forEachAdjacencyEntry","forEachAdjacencyEntryWithOrphans","forEachAssymetricAdjacencyEntry","forEachAssymetricAdjacencyEntryWithOrphans","nodes","forEachNode","findNode","mapNodes","result","order","someNode","everyNode","filterNodes","reduceNodes","initialValue","accumulator","nodeEntries","serialized","serializeNode","serializeEdge","_proto","merge","a","e","s","t","_sa","_ta","u","mergeUndirectedEdgeWithKey","mergeDirectedEdgeWithKey","addUndirectedEdgeWithKey","addDirectedEdgeWithKey","_node","undirectedByDefault","_edge","_edge$undirected","mergeUndirectedEdge","mergeDirectedEdge","addUndirectedEdge","addDirectedEdge","nullCopy","emptyCopy","toJSON","toString","inspect","multiIndex","tmp","label","desc","startsWith","dummy","verb","generateKey","_ref","attachNodeAttributesMethods","attachEdgeAttributesMethods","attachEdgeArrayCreator","forEachName","toUpperCase","mapName","ea","sa","ta","filterName","reduceName","attachForEachEdge","findEdgeName","someName","everyName","attachFindEdge","originalName","attachEdgeIteratorCreator","attachEdgeIterationMethods","attachForEachNeighbor","capitalizedSingular","findName","attachFindNeighbor","attachNeighborIterationMethods","DirectedGraph","finalOptions","_Graph","UndirectedGraph","_Graph2","MultiGraph","_Graph3","MultiDirectedGraph","_Graph4","MultiUndirectedGraph","_Graph5","attachStaticFromMethod","instance"],"mappings":"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"}